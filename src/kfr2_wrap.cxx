/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_DSP__BandPassFilterT_double_t swig_types[0]
#define SWIGTYPE_p_DSP__BesselBandPassFilterT_double_t swig_types[1]
#define SWIGTYPE_p_DSP__BesselBandStopFilterT_double_t swig_types[2]
#define SWIGTYPE_p_DSP__BesselFilterT_double_t swig_types[3]
#define SWIGTYPE_p_DSP__BesselHighPassFilterT_double_t swig_types[4]
#define SWIGTYPE_p_DSP__BesselLowPassFilterT_double_t swig_types[5]
#define SWIGTYPE_p_DSP__BiQuadParamsT_double_t swig_types[6]
#define SWIGTYPE_p_DSP__BiquadT_double_t swig_types[7]
#define SWIGTYPE_p_DSP__ButterworthBandPassFilterT_double_t swig_types[8]
#define SWIGTYPE_p_DSP__ButterworthBandStopFilterT_double_t swig_types[9]
#define SWIGTYPE_p_DSP__ButterworthFilterT_double_t swig_types[10]
#define SWIGTYPE_p_DSP__ButterworthHighPassFilterT_double_t swig_types[11]
#define SWIGTYPE_p_DSP__ButterworthLowPassFilterT_double_t swig_types[12]
#define SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_double_t swig_types[13]
#define SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_double_t swig_types[14]
#define SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t swig_types[15]
#define SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_double_t swig_types[16]
#define SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_double_t swig_types[17]
#define SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_double_t swig_types[18]
#define SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_double_t swig_types[19]
#define SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t swig_types[20]
#define SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_double_t swig_types[21]
#define SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_double_t swig_types[22]
#define SWIGTYPE_p_DSP__ComplexT_double_t swig_types[23]
#define SWIGTYPE_p_DSP__ConvolveFilterT_double_t swig_types[24]
#define SWIGTYPE_p_DSP__DCTPlanT_double_t swig_types[25]
#define SWIGTYPE_p_DSP__DFTPlanT_double_t swig_types[26]
#define SWIGTYPE_p_DSP__DFTRealPlanT_double_t swig_types[27]
#define SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t swig_types[28]
#define SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t swig_types[29]
#define SWIGTYPE_p_DSP__FIRFilterT_double_t swig_types[30]
#define SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t swig_types[31]
#define SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t swig_types[32]
#define SWIGTYPE_p_DSP__FlacReaderT_double_t swig_types[33]
#define SWIGTYPE_p_DSP__HighPassFilterT_double_t swig_types[34]
#define SWIGTYPE_p_DSP__HighShelfFilterT_double_t swig_types[35]
#define SWIGTYPE_p_DSP__LowPassFilterT_double_t swig_types[36]
#define SWIGTYPE_p_DSP__LowShelfFilterT_double_t swig_types[37]
#define SWIGTYPE_p_DSP__MP3ReaderT_double_t swig_types[38]
#define SWIGTYPE_p_DSP__NotchFilterT_double_t swig_types[39]
#define SWIGTYPE_p_DSP__PeakFilterT_double_t swig_types[40]
#define SWIGTYPE_p_DSP__SampleMatrixT_double_t swig_types[41]
#define SWIGTYPE_p_DSP__SampleVectorT_double_t swig_types[42]
#define SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t swig_types[43]
#define SWIGTYPE_p_DSP__ScalarT_double_t swig_types[44]
#define SWIGTYPE_p_DSP__WavReaderT_double_t swig_types[45]
#define SWIGTYPE_p_DSP__WavWriterT_double_t swig_types[46]
#define SWIGTYPE_p_difference_type swig_types[47]
#define SWIGTYPE_p_double swig_types[48]
#define SWIGTYPE_p_float swig_types[49]
#define SWIGTYPE_p_int swig_types[50]
#define SWIGTYPE_p_kfr__audio_format_and_length swig_types[51]
#define SWIGTYPE_p_kfr__audio_reader_flacT_double_t swig_types[52]
#define SWIGTYPE_p_kfr__audio_reader_mp3T_double_t swig_types[53]
#define SWIGTYPE_p_kfr__audio_writer_wavT_double_t swig_types[54]
#define SWIGTYPE_p_kfr__biquad_filterT_double_t swig_types[55]
#define SWIGTYPE_p_kfr__biquad_paramsT_double_t swig_types[56]
#define SWIGTYPE_p_kfr__complexT_double_t swig_types[57]
#define SWIGTYPE_p_kfr__expression_pointerT_double_t swig_types[58]
#define SWIGTYPE_p_kfr__seek_origin swig_types[59]
#define SWIGTYPE_p_kfr__univector2dT_double_t swig_types[60]
#define SWIGTYPE_p_kfr__univectorT_double_t swig_types[61]
#define SWIGTYPE_p_long_long swig_types[62]
#define SWIGTYPE_p_sample_rate_conversion_quality swig_types[63]
#define SWIGTYPE_p_short swig_types[64]
#define SWIGTYPE_p_signed_char swig_types[65]
#define SWIGTYPE_p_size_t swig_types[66]
#define SWIGTYPE_p_size_type swig_types[67]
#define SWIGTYPE_p_std__string swig_types[68]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[69]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[70]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[71]
#define SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t swig_types[72]
#define SWIGTYPE_p_std__vectorT_long_long_t swig_types[73]
#define SWIGTYPE_p_std__vectorT_short_t swig_types[74]
#define SWIGTYPE_p_std__vectorT_signed_char_t swig_types[75]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[76]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[77]
#define SWIGTYPE_p_std__vectorT_unsigned_short_t swig_types[78]
#define SWIGTYPE_p_unsigned_char swig_types[79]
#define SWIGTYPE_p_unsigned_int swig_types[80]
#define SWIGTYPE_p_unsigned_long_long swig_types[81]
#define SWIGTYPE_p_unsigned_short swig_types[82]
#define SWIGTYPE_p_value_type swig_types[83]
#define SWIGTYPE_p_window_symmetry swig_types[84]
static swig_type_info *swig_types[86];
static swig_module_info swig_module = {swig_types, 85, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "kfr2"
#define SWIG_init      luaopen_kfr2
#define SWIG_init_user luaopen_kfr2_user

#define SWIG_LUACODE   luaopen_kfr2_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <cmath>
#include <vector>
#include <complex>
#include <iostream>
#include <random> 

#include <kfr/kfr.h>
#include <kfr/dsp.hpp>
#include <kfr/dft.hpp>
#include <kfr/io.hpp>
#include <kfr/math.hpp>

using namespace kfr;

#include "dsp.hpp"

typedef kfr::complex<SampleType> complex;


#include <stdint.h>		// Use the C99 official header


#include <vector>


#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>


#include <complex>


typedef int8_t    i8;
typedef uint8_t   u8;
typedef int16_t  i16;
typedef uint16_t u16;
typedef int32_t  i32;
typedef uint32_t u32;
typedef int64_t  i64;
typedef float    f32;
typedef double   f64;

SWIGINTERN float std_vector_Sl_f32_Sg____getitem____SWIG(std::vector< f32 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_f32_Sg____setitem____SWIG(std::vector< f32 > *self,unsigned int idx,float val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN double std_vector_Sl_f64_Sg____getitem____SWIG(std::vector< f64 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_f64_Sg____setitem____SWIG(std::vector< f64 > *self,unsigned int idx,double val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN signed char std_vector_Sl_i8_Sg____getitem____SWIG(std::vector< i8 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_i8_Sg____setitem____SWIG(std::vector< i8 > *self,unsigned int idx,signed char val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN unsigned char std_vector_Sl_u8_Sg____getitem____SWIG(std::vector< u8 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_u8_Sg____setitem____SWIG(std::vector< u8 > *self,unsigned int idx,unsigned char val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN short std_vector_Sl_i16_Sg____getitem____SWIG(std::vector< i16 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_i16_Sg____setitem____SWIG(std::vector< i16 > *self,unsigned int idx,short val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN unsigned short std_vector_Sl_u16_Sg____getitem____SWIG(std::vector< u16 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_u16_Sg____setitem____SWIG(std::vector< u16 > *self,unsigned int idx,unsigned short val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN int std_vector_Sl_i32_Sg____getitem____SWIG(std::vector< i32 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_i32_Sg____setitem____SWIG(std::vector< i32 > *self,unsigned int idx,int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN unsigned int std_vector_Sl_u32_Sg____getitem____SWIG(std::vector< u32 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_u32_Sg____setitem____SWIG(std::vector< u32 > *self,unsigned int idx,unsigned int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN long long std_vector_Sl_i64_Sg____getitem____SWIG(std::vector< i64 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_i64_Sg____setitem____SWIG(std::vector< i64 > *self,unsigned int idx,long long val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}

SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_dB_to_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  std::string result;
  
  SWIG_check_num_args("DSP::dB_to_string",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::dB_to_string",1,"double const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::dB_to_string",2,"double");
  arg1 = (double const)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::dB_to_string(arg1,arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  std::string result;
  
  SWIG_check_num_args("DSP::dB_to_string",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::dB_to_string",1,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  result = DSP::dB_to_string(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_string(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_dB_to_string__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dB_to_string__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dB_to_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::dB_to_string(double const,double)\n"
    "    DSP::dB_to_string(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_dB_to_utf8string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  std::string result;
  
  SWIG_check_num_args("DSP::dB_to_utf8string",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::dB_to_utf8string",1,"double const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::dB_to_utf8string",2,"double");
  arg1 = (double const)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::dB_to_utf8string(arg1,arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_utf8string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  std::string result;
  
  SWIG_check_num_args("DSP::dB_to_utf8string",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::dB_to_utf8string",1,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  result = DSP::dB_to_utf8string(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_utf8string(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_dB_to_utf8string__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dB_to_utf8string__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dB_to_utf8string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::dB_to_utf8string(double const,double)\n"
    "    DSP::dB_to_utf8string(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::vector",0,0)
  result = (std::vector< f32 > *)new std::vector< f32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< f32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< f32 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< f32 > *)new std::vector< f32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = 0 ;
  std::vector< f32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< f32 >::vector",1,"std::vector< f32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (std::vector< f32 > *)new std::vector< f32 >((std::vector< f32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float arg2 ;
  std::vector< f32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< f32 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::vector",2,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (std::vector< f32 > *)new std::vector< f32 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< f32 >::vector()\n"
    "    std::vector< f32 >::vector(unsigned int)\n"
    "    std::vector< f32 >::vector(std::vector< f32 > const &)\n"
    "    std::vector< f32 >::vector(unsigned int,float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< f32 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::size",1,"std::vector< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (unsigned int)((std::vector< f32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< f32 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::max_size",1,"std::vector< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_max_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (unsigned int)((std::vector< f32 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< f32 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::empty",1,"std::vector< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (bool)((std::vector< f32 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::clear",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::vector< f32 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::push_back",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::push_back",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::pop_back",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::vector< f32 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::front",1,"std::vector< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float)((std::vector< f32 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::vector< f32 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::back",1,"std::vector< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float)((std::vector< f32 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< f32 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::__getitem__",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___getitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (float)std_vector_Sl_f32_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< f32 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::__setitem__",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< f32 >::__setitem__",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___setitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  try {
    std_vector_Sl_f32_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
std::vector< f32 > *arg1 = (std::vector< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "size", _wrap_float_vector_size},
    { "max_size", _wrap_float_vector_max_size},
    { "empty", _wrap_float_vector_empty},
    { "clear", _wrap_float_vector_clear},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static int _wrap_new_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::vector",0,0)
  result = (std::vector< f64 > *)new std::vector< f64 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< f64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< f64 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< f64 > *)new std::vector< f64 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = 0 ;
  std::vector< f64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< f64 >::vector",1,"std::vector< f64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< f64 > *)new std::vector< f64 >((std::vector< f64 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  std::vector< f64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< f64 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::vector",2,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (std::vector< f64 > *)new std::vector< f64 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< f64 >::vector()\n"
    "    std::vector< f64 >::vector(unsigned int)\n"
    "    std::vector< f64 >::vector(std::vector< f64 > const &)\n"
    "    std::vector< f64 >::vector(unsigned int,double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< f64 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::size",1,"std::vector< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (unsigned int)((std::vector< f64 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< f64 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::max_size",1,"std::vector< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_max_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (unsigned int)((std::vector< f64 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< f64 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::empty",1,"std::vector< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_empty",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)((std::vector< f64 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::clear",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_clear",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::vector< f64 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::push_back",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::push_back",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_push_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::pop_back",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::vector< f64 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::front",1,"std::vector< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_front",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)((std::vector< f64 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::vector< f64 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::back",1,"std::vector< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)((std::vector< f64 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  unsigned int arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< f64 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::__getitem__",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___getitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (double)std_vector_Sl_f64_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< f64 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::__setitem__",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< f64 >::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___setitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  try {
    std_vector_Sl_f64_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector(void *obj) {
std::vector< f64 > *arg1 = (std::vector< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_vector_methods[]= {
    { "size", _wrap_double_vector_size},
    { "max_size", _wrap_double_vector_max_size},
    { "empty", _wrap_double_vector_empty},
    { "clear", _wrap_double_vector_clear},
    { "push_back", _wrap_double_vector_push_back},
    { "pop_back", _wrap_double_vector_pop_back},
    { "front", _wrap_double_vector_front},
    { "back", _wrap_double_vector_back},
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};
static swig_lua_method swig_double_vector_meta[] = {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_Sf_SwigStatic = {
    "double_vector",
    swig_double_vector_Sf_SwigStatic_methods,
    swig_double_vector_Sf_SwigStatic_attributes,
    swig_double_vector_Sf_SwigStatic_constants,
    swig_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_bases[] = {0};
static const char *swig_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector = { "double_vector", "double_vector", &SWIGTYPE_p_std__vectorT_double_t,_proxy__wrap_new_double_vector, swig_delete_double_vector, swig_double_vector_methods, swig_double_vector_attributes, &swig_double_vector_Sf_SwigStatic, swig_double_vector_meta, swig_double_vector_bases, swig_double_vector_base_names };

static int _wrap_new_int8_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::vector",0,0)
  result = (std::vector< i8 > *)new std::vector< i8 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< i8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i8 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< i8 > *)new std::vector< i8 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = 0 ;
  std::vector< i8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< i8 >::vector",1,"std::vector< i8 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("new_int8_vector",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (std::vector< i8 > *)new std::vector< i8 >((std::vector< i8 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  signed char arg2 ;
  std::vector< i8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i8 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::vector",2,"signed char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (signed char)lua_tonumber(L, 2);
  result = (std::vector< i8 > *)new std::vector< i8 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int8_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int8_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int8_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int8_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int8_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i8 >::vector()\n"
    "    std::vector< i8 >::vector(unsigned int)\n"
    "    std::vector< i8 >::vector(std::vector< i8 > const &)\n"
    "    std::vector< i8 >::vector(unsigned int,signed char)\n");
  lua_error(L);return 0;
}


static int _wrap_int8_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i8 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::size",1,"std::vector< i8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_size",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (unsigned int)((std::vector< i8 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i8 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::max_size",1,"std::vector< i8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_max_size",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (unsigned int)((std::vector< i8 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< i8 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::empty",1,"std::vector< i8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_empty",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (bool)((std::vector< i8 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::clear",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_clear",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("std::vector< i8 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::push_back",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::push_back",2,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_push_back",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  arg2 = (signed char)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::pop_back",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_pop_back",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("std::vector< i8 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::front",1,"std::vector< i8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_front",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (signed char)((std::vector< i8 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("std::vector< i8 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::back",1,"std::vector< i8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_back",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (signed char)((std::vector< i8 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  unsigned int arg2 ;
  signed char result;
  
  SWIG_check_num_args("std::vector< i8 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::__getitem__",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector___getitem",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (signed char)std_vector_Sl_i8_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  unsigned int arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("std::vector< i8 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::__setitem__",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i8 >::__setitem__",3,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector___setitem",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (signed char)lua_tonumber(L, 3);
  try {
    std_vector_Sl_i8_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int8_vector(void *obj) {
std::vector< i8 > *arg1 = (std::vector< i8 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int8_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int8_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int8_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int8_vector_methods[]= {
    { "size", _wrap_int8_vector_size},
    { "max_size", _wrap_int8_vector_max_size},
    { "empty", _wrap_int8_vector_empty},
    { "clear", _wrap_int8_vector_clear},
    { "push_back", _wrap_int8_vector_push_back},
    { "pop_back", _wrap_int8_vector_pop_back},
    { "front", _wrap_int8_vector_front},
    { "back", _wrap_int8_vector_back},
    { "__getitem", _wrap_int8_vector___getitem},
    { "__setitem", _wrap_int8_vector___setitem},
    {0,0}
};
static swig_lua_method swig_int8_vector_meta[] = {
    { "__getitem", _wrap_int8_vector___getitem},
    { "__setitem", _wrap_int8_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int8_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int8_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int8_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int8_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int8_vector_Sf_SwigStatic = {
    "int8_vector",
    swig_int8_vector_Sf_SwigStatic_methods,
    swig_int8_vector_Sf_SwigStatic_attributes,
    swig_int8_vector_Sf_SwigStatic_constants,
    swig_int8_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int8_vector_bases[] = {0};
static const char *swig_int8_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int8_vector = { "int8_vector", "int8_vector", &SWIGTYPE_p_std__vectorT_signed_char_t,_proxy__wrap_new_int8_vector, swig_delete_int8_vector, swig_int8_vector_methods, swig_int8_vector_attributes, &swig_int8_vector_Sf_SwigStatic, swig_int8_vector_meta, swig_int8_vector_bases, swig_int8_vector_base_names };

static int _wrap_new_uint8_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::vector",0,0)
  result = (std::vector< u8 > *)new std::vector< u8 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< u8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u8 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< u8 > *)new std::vector< u8 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = 0 ;
  std::vector< u8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< u8 >::vector",1,"std::vector< u8 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_uint8_vector",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (std::vector< u8 > *)new std::vector< u8 >((std::vector< u8 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned char arg2 ;
  std::vector< u8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u8 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::vector",2,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned char)lua_tonumber(L, 2);
  result = (std::vector< u8 > *)new std::vector< u8 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint8_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint8_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint8_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint8_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint8_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u8 >::vector()\n"
    "    std::vector< u8 >::vector(unsigned int)\n"
    "    std::vector< u8 >::vector(std::vector< u8 > const &)\n"
    "    std::vector< u8 >::vector(unsigned int,unsigned char)\n");
  lua_error(L);return 0;
}


static int _wrap_uint8_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u8 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::size",1,"std::vector< u8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned int)((std::vector< u8 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u8 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::max_size",1,"std::vector< u8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned int)((std::vector< u8 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< u8 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::empty",1,"std::vector< u8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (bool)((std::vector< u8 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::clear",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("std::vector< u8 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::push_back",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::push_back",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned char)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::pop_back",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< u8 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::front",1,"std::vector< u8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned char)((std::vector< u8 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< u8 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::back",1,"std::vector< u8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned char)((std::vector< u8 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned int arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< u8 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::__getitem__",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (unsigned char)std_vector_Sl_u8_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned int arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("std::vector< u8 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::__setitem__",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u8 >::__setitem__",3,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned char)lua_tonumber(L, 3);
  try {
    std_vector_Sl_u8_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint8_vector(void *obj) {
std::vector< u8 > *arg1 = (std::vector< u8 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint8_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint8_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint8_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint8_vector_methods[]= {
    { "size", _wrap_uint8_vector_size},
    { "max_size", _wrap_uint8_vector_max_size},
    { "empty", _wrap_uint8_vector_empty},
    { "clear", _wrap_uint8_vector_clear},
    { "push_back", _wrap_uint8_vector_push_back},
    { "pop_back", _wrap_uint8_vector_pop_back},
    { "front", _wrap_uint8_vector_front},
    { "back", _wrap_uint8_vector_back},
    { "__getitem", _wrap_uint8_vector___getitem},
    { "__setitem", _wrap_uint8_vector___setitem},
    {0,0}
};
static swig_lua_method swig_uint8_vector_meta[] = {
    { "__getitem", _wrap_uint8_vector___getitem},
    { "__setitem", _wrap_uint8_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint8_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint8_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint8_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint8_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint8_vector_Sf_SwigStatic = {
    "uint8_vector",
    swig_uint8_vector_Sf_SwigStatic_methods,
    swig_uint8_vector_Sf_SwigStatic_attributes,
    swig_uint8_vector_Sf_SwigStatic_constants,
    swig_uint8_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint8_vector_bases[] = {0};
static const char *swig_uint8_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint8_vector = { "uint8_vector", "uint8_vector", &SWIGTYPE_p_std__vectorT_unsigned_char_t,_proxy__wrap_new_uint8_vector, swig_delete_uint8_vector, swig_uint8_vector_methods, swig_uint8_vector_attributes, &swig_uint8_vector_Sf_SwigStatic, swig_uint8_vector_meta, swig_uint8_vector_bases, swig_uint8_vector_base_names };

static int _wrap_new_int16_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::vector",0,0)
  result = (std::vector< i16 > *)new std::vector< i16 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< i16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i16 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< i16 > *)new std::vector< i16 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = 0 ;
  std::vector< i16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< i16 >::vector",1,"std::vector< i16 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("new_int16_vector",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (std::vector< i16 > *)new std::vector< i16 >((std::vector< i16 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  short arg2 ;
  std::vector< i16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i16 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::vector",2,"short");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (short)lua_tonumber(L, 2);
  result = (std::vector< i16 > *)new std::vector< i16 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int16_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int16_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int16_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int16_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int16_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i16 >::vector()\n"
    "    std::vector< i16 >::vector(unsigned int)\n"
    "    std::vector< i16 >::vector(std::vector< i16 > const &)\n"
    "    std::vector< i16 >::vector(unsigned int,short)\n");
  lua_error(L);return 0;
}


static int _wrap_int16_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i16 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::size",1,"std::vector< i16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_size",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (unsigned int)((std::vector< i16 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i16 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::max_size",1,"std::vector< i16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_max_size",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (unsigned int)((std::vector< i16 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< i16 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::empty",1,"std::vector< i16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_empty",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (bool)((std::vector< i16 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::clear",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_clear",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("std::vector< i16 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::push_back",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::push_back",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_push_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::pop_back",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_pop_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::vector< i16 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::front",1,"std::vector< i16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_front",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (short)((std::vector< i16 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::vector< i16 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::back",1,"std::vector< i16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (short)((std::vector< i16 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  unsigned int arg2 ;
  short result;
  
  SWIG_check_num_args("std::vector< i16 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::__getitem__",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector___getitem",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (short)std_vector_Sl_i16_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  unsigned int arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("std::vector< i16 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::__setitem__",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i16 >::__setitem__",3,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector___setitem",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (short)lua_tonumber(L, 3);
  try {
    std_vector_Sl_i16_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int16_vector(void *obj) {
std::vector< i16 > *arg1 = (std::vector< i16 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int16_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int16_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int16_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int16_vector_methods[]= {
    { "size", _wrap_int16_vector_size},
    { "max_size", _wrap_int16_vector_max_size},
    { "empty", _wrap_int16_vector_empty},
    { "clear", _wrap_int16_vector_clear},
    { "push_back", _wrap_int16_vector_push_back},
    { "pop_back", _wrap_int16_vector_pop_back},
    { "front", _wrap_int16_vector_front},
    { "back", _wrap_int16_vector_back},
    { "__getitem", _wrap_int16_vector___getitem},
    { "__setitem", _wrap_int16_vector___setitem},
    {0,0}
};
static swig_lua_method swig_int16_vector_meta[] = {
    { "__getitem", _wrap_int16_vector___getitem},
    { "__setitem", _wrap_int16_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int16_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int16_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int16_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int16_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int16_vector_Sf_SwigStatic = {
    "int16_vector",
    swig_int16_vector_Sf_SwigStatic_methods,
    swig_int16_vector_Sf_SwigStatic_attributes,
    swig_int16_vector_Sf_SwigStatic_constants,
    swig_int16_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int16_vector_bases[] = {0};
static const char *swig_int16_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int16_vector = { "int16_vector", "int16_vector", &SWIGTYPE_p_std__vectorT_short_t,_proxy__wrap_new_int16_vector, swig_delete_int16_vector, swig_int16_vector_methods, swig_int16_vector_attributes, &swig_int16_vector_Sf_SwigStatic, swig_int16_vector_meta, swig_int16_vector_bases, swig_int16_vector_base_names };

static int _wrap_new_uint16_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::vector",0,0)
  result = (std::vector< u16 > *)new std::vector< u16 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< u16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u16 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< u16 > *)new std::vector< u16 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = 0 ;
  std::vector< u16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< u16 >::vector",1,"std::vector< u16 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_uint16_vector",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (std::vector< u16 > *)new std::vector< u16 >((std::vector< u16 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned short arg2 ;
  std::vector< u16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u16 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::vector",2,"unsigned short");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned short)lua_tonumber(L, 2);
  result = (std::vector< u16 > *)new std::vector< u16 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint16_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint16_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint16_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint16_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint16_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u16 >::vector()\n"
    "    std::vector< u16 >::vector(unsigned int)\n"
    "    std::vector< u16 >::vector(std::vector< u16 > const &)\n"
    "    std::vector< u16 >::vector(unsigned int,unsigned short)\n");
  lua_error(L);return 0;
}


static int _wrap_uint16_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u16 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::size",1,"std::vector< u16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned int)((std::vector< u16 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u16 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::max_size",1,"std::vector< u16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned int)((std::vector< u16 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< u16 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::empty",1,"std::vector< u16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (bool)((std::vector< u16 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::clear",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("std::vector< u16 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::push_back",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::push_back",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned short)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::pop_back",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::vector< u16 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::front",1,"std::vector< u16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned short)((std::vector< u16 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::vector< u16 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::back",1,"std::vector< u16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned short)((std::vector< u16 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned int arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("std::vector< u16 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::__getitem__",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (unsigned short)std_vector_Sl_u16_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned int arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("std::vector< u16 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::__setitem__",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u16 >::__setitem__",3,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned short)lua_tonumber(L, 3);
  try {
    std_vector_Sl_u16_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint16_vector(void *obj) {
std::vector< u16 > *arg1 = (std::vector< u16 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint16_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint16_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint16_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint16_vector_methods[]= {
    { "size", _wrap_uint16_vector_size},
    { "max_size", _wrap_uint16_vector_max_size},
    { "empty", _wrap_uint16_vector_empty},
    { "clear", _wrap_uint16_vector_clear},
    { "push_back", _wrap_uint16_vector_push_back},
    { "pop_back", _wrap_uint16_vector_pop_back},
    { "front", _wrap_uint16_vector_front},
    { "back", _wrap_uint16_vector_back},
    { "__getitem", _wrap_uint16_vector___getitem},
    { "__setitem", _wrap_uint16_vector___setitem},
    {0,0}
};
static swig_lua_method swig_uint16_vector_meta[] = {
    { "__getitem", _wrap_uint16_vector___getitem},
    { "__setitem", _wrap_uint16_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint16_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint16_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint16_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint16_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint16_vector_Sf_SwigStatic = {
    "uint16_vector",
    swig_uint16_vector_Sf_SwigStatic_methods,
    swig_uint16_vector_Sf_SwigStatic_attributes,
    swig_uint16_vector_Sf_SwigStatic_constants,
    swig_uint16_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint16_vector_bases[] = {0};
static const char *swig_uint16_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint16_vector = { "uint16_vector", "uint16_vector", &SWIGTYPE_p_std__vectorT_unsigned_short_t,_proxy__wrap_new_uint16_vector, swig_delete_uint16_vector, swig_uint16_vector_methods, swig_uint16_vector_attributes, &swig_uint16_vector_Sf_SwigStatic, swig_uint16_vector_meta, swig_uint16_vector_bases, swig_uint16_vector_base_names };

static int _wrap_new_int32_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::vector",0,0)
  result = (std::vector< i32 > *)new std::vector< i32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< i32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i32 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< i32 > *)new std::vector< i32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = 0 ;
  std::vector< i32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< i32 >::vector",1,"std::vector< i32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_int32_vector",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (std::vector< i32 > *)new std::vector< i32 >((std::vector< i32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  int arg2 ;
  std::vector< i32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i32 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::vector",2,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (std::vector< i32 > *)new std::vector< i32 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int32_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int32_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int32_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int32_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int32_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i32 >::vector()\n"
    "    std::vector< i32 >::vector(unsigned int)\n"
    "    std::vector< i32 >::vector(std::vector< i32 > const &)\n"
    "    std::vector< i32 >::vector(unsigned int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_int32_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i32 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::size",1,"std::vector< i32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (unsigned int)((std::vector< i32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i32 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::max_size",1,"std::vector< i32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_max_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (unsigned int)((std::vector< i32 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< i32 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::empty",1,"std::vector< i32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_empty",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (bool)((std::vector< i32 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::clear",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_clear",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("std::vector< i32 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::push_back",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::push_back",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_push_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::pop_back",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_pop_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< i32 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::front",1,"std::vector< i32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_front",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int)((std::vector< i32 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< i32 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::back",1,"std::vector< i32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int)((std::vector< i32 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  unsigned int arg2 ;
  int result;
  
  SWIG_check_num_args("std::vector< i32 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::__getitem__",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector___getitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (int)std_vector_Sl_i32_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("std::vector< i32 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::__setitem__",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i32 >::__setitem__",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector___setitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  try {
    std_vector_Sl_i32_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int32_vector(void *obj) {
std::vector< i32 > *arg1 = (std::vector< i32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int32_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int32_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int32_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int32_vector_methods[]= {
    { "size", _wrap_int32_vector_size},
    { "max_size", _wrap_int32_vector_max_size},
    { "empty", _wrap_int32_vector_empty},
    { "clear", _wrap_int32_vector_clear},
    { "push_back", _wrap_int32_vector_push_back},
    { "pop_back", _wrap_int32_vector_pop_back},
    { "front", _wrap_int32_vector_front},
    { "back", _wrap_int32_vector_back},
    { "__getitem", _wrap_int32_vector___getitem},
    { "__setitem", _wrap_int32_vector___setitem},
    {0,0}
};
static swig_lua_method swig_int32_vector_meta[] = {
    { "__getitem", _wrap_int32_vector___getitem},
    { "__setitem", _wrap_int32_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int32_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int32_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int32_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int32_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int32_vector_Sf_SwigStatic = {
    "int32_vector",
    swig_int32_vector_Sf_SwigStatic_methods,
    swig_int32_vector_Sf_SwigStatic_attributes,
    swig_int32_vector_Sf_SwigStatic_constants,
    swig_int32_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int32_vector_bases[] = {0};
static const char *swig_int32_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int32_vector = { "int32_vector", "int32_vector", &SWIGTYPE_p_std__vectorT_int_t,_proxy__wrap_new_int32_vector, swig_delete_int32_vector, swig_int32_vector_methods, swig_int32_vector_attributes, &swig_int32_vector_Sf_SwigStatic, swig_int32_vector_meta, swig_int32_vector_bases, swig_int32_vector_base_names };

static int _wrap_new_uint32_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::vector",0,0)
  result = (std::vector< u32 > *)new std::vector< u32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< u32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u32 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< u32 > *)new std::vector< u32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = 0 ;
  std::vector< u32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< u32 >::vector",1,"std::vector< u32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_uint32_vector",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (std::vector< u32 > *)new std::vector< u32 >((std::vector< u32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  std::vector< u32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u32 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::vector",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (std::vector< u32 > *)new std::vector< u32 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint32_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint32_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint32_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint32_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint32_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u32 >::vector()\n"
    "    std::vector< u32 >::vector(unsigned int)\n"
    "    std::vector< u32 >::vector(std::vector< u32 > const &)\n"
    "    std::vector< u32 >::vector(unsigned int,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_uint32_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u32 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::size",1,"std::vector< u32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< u32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u32 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::max_size",1,"std::vector< u32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< u32 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< u32 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::empty",1,"std::vector< u32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (bool)((std::vector< u32 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::clear",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("std::vector< u32 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::push_back",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::push_back",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::pop_back",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u32 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::front",1,"std::vector< u32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< u32 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u32 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::back",1,"std::vector< u32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< u32 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u32 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::__getitem__",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (unsigned int)std_vector_Sl_u32_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("std::vector< u32 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::__setitem__",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u32 >::__setitem__",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  try {
    std_vector_Sl_u32_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint32_vector(void *obj) {
std::vector< u32 > *arg1 = (std::vector< u32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint32_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint32_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint32_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint32_vector_methods[]= {
    { "size", _wrap_uint32_vector_size},
    { "max_size", _wrap_uint32_vector_max_size},
    { "empty", _wrap_uint32_vector_empty},
    { "clear", _wrap_uint32_vector_clear},
    { "push_back", _wrap_uint32_vector_push_back},
    { "pop_back", _wrap_uint32_vector_pop_back},
    { "front", _wrap_uint32_vector_front},
    { "back", _wrap_uint32_vector_back},
    { "__getitem", _wrap_uint32_vector___getitem},
    { "__setitem", _wrap_uint32_vector___setitem},
    {0,0}
};
static swig_lua_method swig_uint32_vector_meta[] = {
    { "__getitem", _wrap_uint32_vector___getitem},
    { "__setitem", _wrap_uint32_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint32_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint32_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint32_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint32_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint32_vector_Sf_SwigStatic = {
    "uint32_vector",
    swig_uint32_vector_Sf_SwigStatic_methods,
    swig_uint32_vector_Sf_SwigStatic_attributes,
    swig_uint32_vector_Sf_SwigStatic_constants,
    swig_uint32_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint32_vector_bases[] = {0};
static const char *swig_uint32_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint32_vector = { "uint32_vector", "uint32_vector", &SWIGTYPE_p_std__vectorT_unsigned_int_t,_proxy__wrap_new_uint32_vector, swig_delete_uint32_vector, swig_uint32_vector_methods, swig_uint32_vector_attributes, &swig_uint32_vector_Sf_SwigStatic, swig_uint32_vector_meta, swig_uint32_vector_bases, swig_uint32_vector_base_names };

static int _wrap_new_int64_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::vector",0,0)
  result = (std::vector< i64 > *)new std::vector< i64 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< i64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i64 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< i64 > *)new std::vector< i64 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = 0 ;
  std::vector< i64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< i64 >::vector",1,"std::vector< i64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("new_int64_vector",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (std::vector< i64 > *)new std::vector< i64 >((std::vector< i64 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  long long arg2 ;
  std::vector< i64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i64 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::vector",2,"long long");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (long long)lua_tonumber(L, 2);
  result = (std::vector< i64 > *)new std::vector< i64 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int64_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int64_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int64_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int64_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int64_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i64 >::vector()\n"
    "    std::vector< i64 >::vector(unsigned int)\n"
    "    std::vector< i64 >::vector(std::vector< i64 > const &)\n"
    "    std::vector< i64 >::vector(unsigned int,long long)\n");
  lua_error(L);return 0;
}


static int _wrap_int64_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i64 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::size",1,"std::vector< i64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("int64_vector_size",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (unsigned int)((std::vector< i64 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i64 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::max_size",1,"std::vector< i64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("int64_vector_max_size",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (unsigned int)((std::vector< i64 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< i64 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::empty",1,"std::vector< i64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("int64_vector_empty",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (bool)((std::vector< i64 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::clear",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("int64_vector_clear",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  long long arg2 ;
  
  SWIG_check_num_args("std::vector< i64 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::push_back",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::push_back",2,"long long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("int64_vector_push_back",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  arg2 = (long long)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::pop_back",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("int64_vector_pop_back",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::vector< i64 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::front",1,"std::vector< i64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("int64_vector_front",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (long long)((std::vector< i64 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::vector< i64 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::back",1,"std::vector< i64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("int64_vector_back",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (long long)((std::vector< i64 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  unsigned int arg2 ;
  long long result;
  
  SWIG_check_num_args("std::vector< i64 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::__getitem__",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("int64_vector___getitem",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (long long)std_vector_Sl_i64_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  unsigned int arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("std::vector< i64 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::__setitem__",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i64 >::__setitem__",3,"long long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("int64_vector___setitem",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (long long)lua_tonumber(L, 3);
  try {
    std_vector_Sl_i64_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int64_vector(void *obj) {
std::vector< i64 > *arg1 = (std::vector< i64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int64_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int64_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int64_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int64_vector_methods[]= {
    { "size", _wrap_int64_vector_size},
    { "max_size", _wrap_int64_vector_max_size},
    { "empty", _wrap_int64_vector_empty},
    { "clear", _wrap_int64_vector_clear},
    { "push_back", _wrap_int64_vector_push_back},
    { "pop_back", _wrap_int64_vector_pop_back},
    { "front", _wrap_int64_vector_front},
    { "back", _wrap_int64_vector_back},
    { "__getitem", _wrap_int64_vector___getitem},
    { "__setitem", _wrap_int64_vector___setitem},
    {0,0}
};
static swig_lua_method swig_int64_vector_meta[] = {
    { "__getitem", _wrap_int64_vector___getitem},
    { "__setitem", _wrap_int64_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int64_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int64_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int64_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int64_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int64_vector_Sf_SwigStatic = {
    "int64_vector",
    swig_int64_vector_Sf_SwigStatic_methods,
    swig_int64_vector_Sf_SwigStatic_attributes,
    swig_int64_vector_Sf_SwigStatic_constants,
    swig_int64_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int64_vector_bases[] = {0};
static const char *swig_int64_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int64_vector = { "int64_vector", "int64_vector", &SWIGTYPE_p_std__vectorT_long_long_t,_proxy__wrap_new_int64_vector, swig_delete_int64_vector, swig_int64_vector_methods, swig_int64_vector_attributes, &swig_int64_vector_Sf_SwigStatic, swig_int64_vector_meta, swig_int64_vector_bases, swig_int64_vector_base_names };

static int _wrap_Vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  kfr::univector< double > arg2 ;
  kfr::univector< double > *argp2 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::vector",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::vector",2,"kfr::univector< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_vector_set",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_double_t,0))){
    SWIG_fail_ptr("Vector_vector_set",2,SWIGTYPE_p_kfr__univectorT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  kfr::univector< double > result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::vector",1,"DSP::SampleVector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_vector_get",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result =  ((arg1)->vector);
  {
    kfr::univector< double > * resultptr = new kfr::univector< double >((const kfr::univector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector__channels_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::_channels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::_channels",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::_channels",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector__channels_set",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->_channels = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector__channels_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::_channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::_channels",1,"DSP::SampleVector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector__channels_get",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result =  ((arg1)->_channels);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::SampleVector",0,0)
  result = (DSP::SampleVector< SampleType > *)new DSP::SampleVector< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  DSP::SampleVector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::SampleVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::SampleVector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::SampleVector",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::SampleVector< SampleType > *)new DSP::SampleVector< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::SampleVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::SampleVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::SampleVector< SampleType > *)new DSP::SampleVector< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  size_t arg2 ;
  DSP::SampleVector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::SampleVector",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::SampleVector",1,"std::vector< double > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::SampleVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_Vector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::SampleVector< SampleType > *)new DSP::SampleVector< SampleType >(*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  DSP::SampleVector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::SampleVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::SampleVector",1,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_Vector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (DSP::SampleVector< SampleType > *)new DSP::SampleVector< SampleType >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  DSP::SampleVector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::SampleVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::SampleVector",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::SampleVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("new_Vector",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::SampleVector< SampleType > *)new DSP::SampleVector< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< double > *arg1 = 0 ;
  DSP::SampleVector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::SampleVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::SampleVector",1,"kfr::univector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_double_t,0))){
    SWIG_fail_ptr("new_Vector",1,SWIGTYPE_p_kfr__univectorT_double_t);
  }
  
  result = (DSP::SampleVector< SampleType > *)new DSP::SampleVector< SampleType >((kfr::univector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::SampleVector< SampleType >::SampleVector()\n"
    "    DSP::SampleVector< SampleType >::SampleVector(size_t,size_t)\n"
    "    DSP::SampleVector< SampleType >::SampleVector(size_t)\n"
    "    DSP::SampleVector< SampleType >::SampleVector(std::vector< double > &,size_t)\n"
    "    DSP::SampleVector< SampleType >::SampleVector(std::vector< double > &)\n"
    "    DSP::SampleVector< SampleType >::SampleVector(double *,size_t)\n"
    "    DSP::SampleVector< SampleType >::SampleVector(kfr::univector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::size",1,"DSP::SampleVector< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_size",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = ((DSP::SampleVector< SampleType > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_channels(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::channels",1,"DSP::SampleVector< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_channels",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = ((DSP::SampleVector< SampleType > const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_samples_per_channel(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::samples_per_channel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::samples_per_channel",1,"DSP::SampleVector< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_samples_per_channel",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = ((DSP::SampleVector< SampleType > const *)arg1)->samples_per_channel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::resize",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_resize",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::fill",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_fill",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_zero(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::zero",1,"DSP::SampleVector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_zero",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::copy",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::copy",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_copy",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_copy",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_scalar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::scalar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::scalar",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::scalar",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::SampleVector< SampleType >::scalar",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_scalar",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (arg1)->scalar(arg2,(double const &)*arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::at",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_at",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::front",1,"DSP::SampleVector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_front",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::back",1,"DSP::SampleVector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_back",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::data",1,"DSP::SampleVector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_data",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::push_back",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::push_back",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_push_back",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  double result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::pop_back",1,"DSP::SampleVector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_pop_back",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (double)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::__getitem",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___getitem",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::__setitem",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::SampleVector< SampleType >::__setitem",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___setitem",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->__setitem(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator ()",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___call",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator ()",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___call",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->operator ()(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___call__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator ()",1,"DSP::SampleVector< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___call",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (double *) &((DSP::SampleVector< SampleType > const *)arg1)->operator ()(arg2,arg3);
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___call__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator ()",1,"DSP::SampleVector< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator ()",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___call",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &((DSP::SampleVector< SampleType > const *)arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___call(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector___call__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector___call__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Vector___call__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Vector___call__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector___call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::SampleVector< SampleType >::operator ()(size_t,size_t)\n"
    "    DSP::SampleVector< SampleType >::operator ()(size_t)\n"
    "    DSP::SampleVector< SampleType >::operator ()(size_t,size_t) const\n"
    "    DSP::SampleVector< SampleType >::operator ()(size_t) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector_get_channel(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  size_t arg2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::get_channel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::get_channel",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::get_channel",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_get_channel",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_channel(arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_set_channel(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::set_channel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::set_channel",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::set_channel",2,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::SampleVector< SampleType >::set_channel",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_set_channel",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_set_channel",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_channel((DSP::SampleVector< double > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator +",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator +",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___add",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___add",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (arg1)->operator +((DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator -",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator -",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___sub",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___sub",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (arg1)->operator -((DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator *",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator *",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___mul",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___mul",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (arg1)->operator *((DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator /",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator /",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___div",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___div",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (arg1)->operator /((DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator +",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator +",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___add",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::SampleVector< SampleType >::operator +(DSP::SampleVector< double > const &)\n"
    "    DSP::SampleVector< SampleType >::operator +(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator -",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator -",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___sub",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::SampleVector< SampleType >::operator -(DSP::SampleVector< double > const &)\n"
    "    DSP::SampleVector< SampleType >::operator -(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator *",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator *",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___mul",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::SampleVector< SampleType >::operator *(DSP::SampleVector< double > const &)\n"
    "    DSP::SampleVector< SampleType >::operator *(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator /",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::operator /",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector___div",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::SampleVector< SampleType >::operator /(DSP::SampleVector< double > const &)\n"
    "    DSP::SampleVector< SampleType >::operator /(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector_println(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::println",1,"DSP::SampleVector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_println",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_plot_save__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::plot_save",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::plot_save",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::plot_save",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::SampleVector< SampleType >::plot_save",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_plot_save",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Vector_plot_save",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Vector_plot_save",3,SWIGTYPE_p_std__string);
  }
  
  (arg1)->plot_save((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_plot_save__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::plot_save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::plot_save",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::plot_save",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_plot_save",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Vector_plot_save",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->plot_save((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_plot_save__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::plot_save",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::plot_save",1,"DSP::SampleVector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_plot_save",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->plot_save();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_plot_save(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector_plot_save__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector_plot_save__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Vector_plot_save__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector_plot_save'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::SampleVector< SampleType >::plot_save(std::string const &,std::string const &)\n"
    "    DSP::SampleVector< SampleType >::plot_save(std::string const &)\n"
    "    DSP::SampleVector< SampleType >::plot_save()\n");
  lua_error(L);return 0;
}


static int _wrap_Vector_plot_show__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::plot_show",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::plot_show",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::plot_show",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::SampleVector< SampleType >::plot_show",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_plot_show",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Vector_plot_show",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Vector_plot_show",3,SWIGTYPE_p_std__string);
  }
  
  (arg1)->plot_show((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_plot_show__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::plot_show",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::plot_show",1,"DSP::SampleVector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleVector< SampleType >::plot_show",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_plot_show",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Vector_plot_show",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->plot_show((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_plot_show__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::SampleVector< SampleType >::plot_show",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleVector< SampleType >::plot_show",1,"DSP::SampleVector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector_plot_show",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->plot_show();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector_plot_show(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector_plot_show__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector_plot_show__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Vector_plot_show__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector_plot_show'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::SampleVector< SampleType >::plot_show(std::string const &,std::string const &)\n"
    "    DSP::SampleVector< SampleType >::plot_show(std::string const &)\n"
    "    DSP::SampleVector< SampleType >::plot_show()\n");
  lua_error(L);return 0;
}


static void swig_delete_Vector(void *obj) {
DSP::SampleVector< SampleType > *arg1 = (DSP::SampleVector< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector_attributes[] = {
    { "vector", _wrap_Vector_vector_get, _wrap_Vector_vector_set },
    { "_channels", _wrap_Vector__channels_get, _wrap_Vector__channels_set },
    {0,0,0}
};
static swig_lua_method swig_Vector_methods[]= {
    { "size", _wrap_Vector_size},
    { "channels", _wrap_Vector_channels},
    { "samples_per_channel", _wrap_Vector_samples_per_channel},
    { "resize", _wrap_Vector_resize},
    { "fill", _wrap_Vector_fill},
    { "zero", _wrap_Vector_zero},
    { "copy", _wrap_Vector_copy},
    { "scalar", _wrap_Vector_scalar},
    { "at", _wrap_Vector_at},
    { "front", _wrap_Vector_front},
    { "back", _wrap_Vector_back},
    { "data", _wrap_Vector_data},
    { "push_back", _wrap_Vector_push_back},
    { "pop_back", _wrap_Vector_pop_back},
    { "__getitem", _wrap_Vector___getitem},
    { "__setitem", _wrap_Vector___setitem},
    { "__call", _wrap_Vector___call},
    { "get_channel", _wrap_Vector_get_channel},
    { "set_channel", _wrap_Vector_set_channel},
    { "__add", _wrap_Vector___add},
    { "__sub", _wrap_Vector___sub},
    { "__mul", _wrap_Vector___mul},
    { "__div", _wrap_Vector___div},
    { "println", _wrap_Vector_println},
    { "plot_save", _wrap_Vector_plot_save},
    { "plot_show", _wrap_Vector_plot_show},
    {0,0}
};
static swig_lua_method swig_Vector_meta[] = {
    { "__getitem", _wrap_Vector___getitem},
    { "__setitem", _wrap_Vector___setitem},
    { "__call", _wrap_Vector___call},
    { "__add", _wrap_Vector___add},
    { "__sub", _wrap_Vector___sub},
    { "__mul", _wrap_Vector___mul},
    { "__div", _wrap_Vector___div},
    {0,0}
};

static swig_lua_attribute swig_Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector_Sf_SwigStatic = {
    "Vector",
    swig_Vector_Sf_SwigStatic_methods,
    swig_Vector_Sf_SwigStatic_attributes,
    swig_Vector_Sf_SwigStatic_constants,
    swig_Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector_bases[] = {0};
static const char *swig_Vector_base_names[] = {0};
static swig_lua_class _wrap_class_Vector = { "Vector", "Vector", &SWIGTYPE_p_DSP__SampleVectorT_double_t,_proxy__wrap_new_Vector, swig_delete_Vector, swig_Vector_methods, swig_Vector_attributes, &swig_Vector_Sf_SwigStatic, swig_Vector_meta, swig_Vector_bases, swig_Vector_base_names };

static int _wrap_Vector2D_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  kfr::univector2d< double > arg2 ;
  kfr::univector2d< double > *argp2 ;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::vector",1,"DSP::SampleMatrix< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::vector",2,"kfr::univector2d< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D_vector_set",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univector2dT_double_t,0))){
    SWIG_fail_ptr("Vector2D_vector_set",2,SWIGTYPE_p_kfr__univector2dT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vector = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  kfr::univector2d< double > result;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::vector",1,"DSP::SampleMatrix< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D_vector_get",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  result =  ((arg1)->vector);
  {
    kfr::univector2d< double > * resultptr = new kfr::univector2d< double >((const kfr::univector2d< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univector2dT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2D__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::SampleMatrix",0,0)
  result = (DSP::SampleMatrix< SampleType > *)new DSP::SampleMatrix< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__SampleMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2D__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  DSP::SampleMatrix< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::SampleMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::SampleMatrix",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::SampleMatrix",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::SampleMatrix< SampleType > *)new DSP::SampleMatrix< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__SampleMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2D__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleMatrix< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::SampleMatrix",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::SampleMatrix",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::SampleMatrix< SampleType > *)new DSP::SampleMatrix< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__SampleMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2D__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector2d< double > *arg1 = 0 ;
  DSP::SampleMatrix< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::SampleMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::SampleMatrix",1,"kfr::univector2d< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univector2dT_double_t,0))){
    SWIG_fail_ptr("new_Vector2D",1,SWIGTYPE_p_kfr__univector2dT_double_t);
  }
  
  result = (DSP::SampleMatrix< SampleType > *)new DSP::SampleMatrix< SampleType >((kfr::univector2d< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__SampleMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2D__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< double > *arg1 = 0 ;
  DSP::SampleMatrix< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::SampleMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::SampleMatrix",1,"DSP::SampleMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("new_Vector2D",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  result = (DSP::SampleMatrix< SampleType > *)new DSP::SampleMatrix< SampleType >((DSP::SampleMatrix< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__SampleMatrixT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2D(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector2D__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univector2dT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2D__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleMatrixT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2D__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector2D__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector2D__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector2D'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::SampleMatrix< SampleType >::SampleMatrix()\n"
    "    DSP::SampleMatrix< SampleType >::SampleMatrix(size_t,size_t)\n"
    "    DSP::SampleMatrix< SampleType >::SampleMatrix(size_t)\n"
    "    DSP::SampleMatrix< SampleType >::SampleMatrix(kfr::univector2d< double > const &)\n"
    "    DSP::SampleMatrix< SampleType >::SampleMatrix(DSP::SampleMatrix< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2D_size__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  size_t arg2 ;
  size_t result;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::size",1,"DSP::SampleMatrix< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D_size",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = ((DSP::SampleMatrix< SampleType > const *)arg1)->size(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::size",1,"DSP::SampleMatrix< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D_size",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  result = ((DSP::SampleMatrix< SampleType > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_size(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector2D_size__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2D_size__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2D_size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::SampleMatrix< SampleType >::size(size_t) const\n"
    "    DSP::SampleMatrix< SampleType >::size() const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2D_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::resize",1,"DSP::SampleMatrix< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D_resize",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_num_channels(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::num_channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::num_channels",1,"DSP::SampleMatrix< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D_num_channels",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  result = (int)((DSP::SampleMatrix< SampleType > const *)arg1)->num_channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::fill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::fill",1,"DSP::SampleMatrix< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::fill",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::fill",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D_fill",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->fill(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::fill",1,"DSP::SampleMatrix< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D_fill",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_fill(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2D_fill__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleMatrixT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Vector2D_fill__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2D_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::SampleMatrix< SampleType >::fill(size_t,double)\n"
    "    DSP::SampleMatrix< SampleType >::fill(double)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2D_get_channel(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  size_t arg2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::get_channel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::get_channel",1,"DSP::SampleMatrix< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::get_channel",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D_get_channel",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_channel(arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_set_channel(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  size_t arg2 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::set_channel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::set_channel",1,"DSP::SampleMatrix< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::set_channel",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::set_channel",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D_set_channel",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector2D_set_channel",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->set_channel(arg2,(DSP::SampleVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  size_t arg2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::__getitem",1,"DSP::SampleMatrix< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D___getitem",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  size_t arg2 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::__setitem",1,"DSP::SampleMatrix< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::__setitem",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D___setitem",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Vector2D___setitem",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->__setitem(arg2,(DSP::SampleVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D___add(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  DSP::SampleMatrix< double > *arg2 = 0 ;
  DSP::SampleMatrix< double > result;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::operator +",1,"DSP::SampleMatrix< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::operator +",2,"DSP::SampleMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D___add",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D___add",2,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  result = (arg1)->operator +((DSP::SampleMatrix< double > const &)*arg2);
  {
    DSP::SampleMatrix< double > * resultptr = new DSP::SampleMatrix< double >((const DSP::SampleMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D___sub(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  DSP::SampleMatrix< double > *arg2 = 0 ;
  DSP::SampleMatrix< double > result;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::operator -",1,"DSP::SampleMatrix< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::operator -",2,"DSP::SampleMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D___sub",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D___sub",2,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  result = (arg1)->operator -((DSP::SampleMatrix< double > const &)*arg2);
  {
    DSP::SampleMatrix< double > * resultptr = new DSP::SampleMatrix< double >((const DSP::SampleMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D___mul(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  DSP::SampleMatrix< double > *arg2 = 0 ;
  DSP::SampleMatrix< double > result;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::operator *",1,"DSP::SampleMatrix< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::operator *",2,"DSP::SampleMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D___mul",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D___mul",2,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  result = (arg1)->operator *((DSP::SampleMatrix< double > const &)*arg2);
  {
    DSP::SampleMatrix< double > * resultptr = new DSP::SampleMatrix< double >((const DSP::SampleMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D___div(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) 0 ;
  DSP::SampleMatrix< double > *arg2 = 0 ;
  DSP::SampleMatrix< double > result;
  
  SWIG_check_num_args("DSP::SampleMatrix< SampleType >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::operator /",1,"DSP::SampleMatrix< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::SampleMatrix< SampleType >::operator /",2,"DSP::SampleMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D___div",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("Vector2D___div",2,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  result = (arg1)->operator /((DSP::SampleMatrix< double > const &)*arg2);
  {
    DSP::SampleMatrix< double > * resultptr = new DSP::SampleMatrix< double >((const DSP::SampleMatrix< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleMatrixT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector2D(void *obj) {
DSP::SampleMatrix< SampleType > *arg1 = (DSP::SampleMatrix< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector2D(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector2D);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector2D_attributes[] = {
    { "vector", _wrap_Vector2D_vector_get, _wrap_Vector2D_vector_set },
    {0,0,0}
};
static swig_lua_method swig_Vector2D_methods[]= {
    { "size", _wrap_Vector2D_size},
    { "resize", _wrap_Vector2D_resize},
    { "num_channels", _wrap_Vector2D_num_channels},
    { "fill", _wrap_Vector2D_fill},
    { "get_channel", _wrap_Vector2D_get_channel},
    { "set_channel", _wrap_Vector2D_set_channel},
    { "__getitem", _wrap_Vector2D___getitem},
    { "__setitem", _wrap_Vector2D___setitem},
    { "__add", _wrap_Vector2D___add},
    { "__sub", _wrap_Vector2D___sub},
    { "__mul", _wrap_Vector2D___mul},
    { "__div", _wrap_Vector2D___div},
    {0,0}
};
static swig_lua_method swig_Vector2D_meta[] = {
    { "__getitem", _wrap_Vector2D___getitem},
    { "__setitem", _wrap_Vector2D___setitem},
    { "__add", _wrap_Vector2D___add},
    { "__sub", _wrap_Vector2D___sub},
    { "__mul", _wrap_Vector2D___mul},
    { "__div", _wrap_Vector2D___div},
    {0,0}
};

static swig_lua_attribute swig_Vector2D_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector2D_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector2D_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector2D_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector2D_Sf_SwigStatic = {
    "Vector2D",
    swig_Vector2D_Sf_SwigStatic_methods,
    swig_Vector2D_Sf_SwigStatic_attributes,
    swig_Vector2D_Sf_SwigStatic_constants,
    swig_Vector2D_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector2D_bases[] = {0};
static const char *swig_Vector2D_base_names[] = {0};
static swig_lua_class _wrap_class_Vector2D = { "Vector2D", "Vector2D", &SWIGTYPE_p_DSP__SampleMatrixT_double_t,_proxy__wrap_new_Vector2D, swig_delete_Vector2D, swig_Vector2D_methods, swig_Vector2D_attributes, &swig_Vector2D_Sf_SwigStatic, swig_Vector2D_meta, swig_Vector2D_bases, swig_Vector2D_base_names };

static int _wrap_Biquad_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  kfr::biquad_filter< double > *arg2 = (kfr::biquad_filter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::filter",1,"DSP::Biquad< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::filter",2,"kfr::biquad_filter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_filter_set",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__biquad_filterT_double_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Biquad_filter_set",2,SWIGTYPE_p_kfr__biquad_filterT_double_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  kfr::biquad_filter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::filter",1,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_filter_get",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  result = (kfr::biquad_filter< double > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_filterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_init__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  DSP::BiQuadParams< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::init",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::init",2,"DSP::BiQuadParams< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_init",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("Biquad_init",2,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  (arg1)->init((DSP::BiQuadParams< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_init__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  kfr::biquad_params< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::init",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::init",2,"kfr::biquad_params< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_init",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__biquad_paramsT_double_t,0))){
    SWIG_fail_ptr("Biquad_init",2,SWIGTYPE_p_kfr__biquad_paramsT_double_t);
  }
  
  (arg1)->init((kfr::biquad_params< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_init__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::init",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::init",2,"std::vector< kfr::biquad_params< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_init",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0))){
    SWIG_fail_ptr("Biquad_init",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t);
  }
  
  (arg1)->init((std::vector< kfr::biquad_params< double > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_init(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__BiQuadParamsT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Biquad_init__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Biquad_init__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Biquad_init__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Biquad_init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Biquad< SampleType >::init(DSP::BiQuadParams< double > const &)\n"
    "    DSP::Biquad< SampleType >::init(kfr::biquad_params< double > const &)\n"
    "    DSP::Biquad< SampleType >::init(std::vector< kfr::biquad_params< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_Biquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::Biquad",0,0)
  result = (DSP::Biquad< SampleType > *)new DSP::Biquad< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< double > *arg1 = 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::Biquad",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::Biquad",1,"kfr::biquad_params< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_double_t,0))){
    SWIG_fail_ptr("new_Biquad",1,SWIGTYPE_p_kfr__biquad_paramsT_double_t);
  }
  
  result = (DSP::Biquad< SampleType > *)new DSP::Biquad< SampleType >((kfr::biquad_params< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::Biquad",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::Biquad",1,"DSP::BiQuadParams< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_Biquad",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  result = (DSP::Biquad< SampleType > *)new DSP::Biquad< SampleType >((DSP::BiQuadParams< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Biquad__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Biquad__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiQuadParamsT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Biquad__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Biquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Biquad< SampleType >::Biquad()\n"
    "    DSP::Biquad< SampleType >::Biquad(kfr::biquad_params< double > const &)\n"
    "    DSP::Biquad< SampleType >::Biquad(DSP::BiQuadParams< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad_notch(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::notch",1,"DSP::Biquad< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::notch",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::notch",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_notch",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->notch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::lowpass",1,"DSP::Biquad< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_lowpass",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::highpass",1,"DSP::Biquad< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_highpass",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_peak(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::peak",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::peak",1,"DSP::Biquad< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::peak",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::peak",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Biquad< SampleType >::peak",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_peak",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->peak(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::lowshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::lowshelf",1,"DSP::Biquad< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::lowshelf",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::lowshelf",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_lowshelf",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_highshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::highshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::highshelf",1,"DSP::Biquad< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::highshelf",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::highshelf",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_highshelf",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::bandpass",1,"DSP::Biquad< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::bandpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_bandpass",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->bandpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::apply",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_apply",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Biquad_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::apply",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_apply",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Biquad_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Biquad_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Biquad_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Biquad_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Biquad_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Biquad< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::Biquad< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::reset",1,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Biquad_reset",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Biquad(void *obj) {
DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Biquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Biquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Biquad_attributes[] = {
    { "filter", _wrap_Biquad_filter_get, _wrap_Biquad_filter_set },
    {0,0,0}
};
static swig_lua_method swig_Biquad_methods[]= {
    { "init", _wrap_Biquad_init},
    { "notch", _wrap_Biquad_notch},
    { "lowpass", _wrap_Biquad_lowpass},
    { "highpass", _wrap_Biquad_highpass},
    { "peak", _wrap_Biquad_peak},
    { "lowshelf", _wrap_Biquad_lowshelf},
    { "highshelf", _wrap_Biquad_highshelf},
    { "bandpass", _wrap_Biquad_bandpass},
    { "apply", _wrap_Biquad_apply},
    { "reset", _wrap_Biquad_reset},
    {0,0}
};
static swig_lua_method swig_Biquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Biquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Biquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Biquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Biquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Biquad_Sf_SwigStatic = {
    "Biquad",
    swig_Biquad_Sf_SwigStatic_methods,
    swig_Biquad_Sf_SwigStatic_attributes,
    swig_Biquad_Sf_SwigStatic_constants,
    swig_Biquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Biquad_bases[] = {0};
static const char *swig_Biquad_base_names[] = {0};
static swig_lua_class _wrap_class_Biquad = { "Biquad", "Biquad", &SWIGTYPE_p_DSP__BiquadT_double_t,_proxy__wrap_new_Biquad, swig_delete_Biquad, swig_Biquad_methods, swig_Biquad_attributes, &swig_Biquad_Sf_SwigStatic, swig_Biquad_meta, swig_Biquad_bases, swig_Biquad_base_names };

static int _wrap_BiquadParams_bq_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< double > > *arg2 = (std::vector< kfr::biquad_params< double > > *) 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::bq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::bq",1,"DSP::BiQuadParams< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::bq",2,"std::vector< kfr::biquad_params< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_bq_set",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0))){
    SWIG_fail_ptr("BiquadParams_bq_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t);
  }
  
  if (arg1) (arg1)->bq = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_bq_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< double > > *result = 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::bq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::bq",1,"DSP::BiQuadParams< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_bq_get",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  result = (std::vector< kfr::biquad_params< double > > *)& ((arg1)->bq);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadParams(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::BiQuadParams",0,0)
  result = (DSP::BiQuadParams< SampleType > *)new DSP::BiQuadParams< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_get_params(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  kfr::biquad_params< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::get_params",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::get_params",1,"DSP::BiQuadParams< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_get_params",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  result = (kfr::biquad_params< double > *)(arg1)->get_params();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_paramsT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_biquad_notch(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_notch",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_notch",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_notch",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_biquad_notch",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->biquad_notch(arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_biquad_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_lowpass",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_biquad_lowpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->biquad_lowpass(arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_biquad_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_highpass",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_biquad_highpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->biquad_highpass(arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_biquad_peak(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_peak",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_peak",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_peak",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_peak",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_peak",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_biquad_peak",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (arg1)->biquad_peak(arg2,arg3,arg4);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_biquad_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_lowshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_lowshelf",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_lowshelf",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_lowshelf",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_biquad_lowshelf",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->biquad_lowshelf(arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_biquad_highshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_highshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_highshelf",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_highshelf",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_highshelf",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_biquad_highshelf",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->biquad_highshelf(arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_biquad_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_bandpass",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_bandpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_biquad_bandpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->biquad_bandpass(arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_add_notch(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_notch",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_notch",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_notch",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_add_notch",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->add_notch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_add_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_lowpass",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_add_lowpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->add_lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_add_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_highpass",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_add_highpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->add_highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_add_peak(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_peak",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_peak",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_peak",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_peak",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_peak",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_add_peak",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->add_peak(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_add_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_lowshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_lowshelf",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_lowshelf",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_lowshelf",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_add_lowshelf",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->add_lowshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_add_highself(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_highself",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_highself",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_highself",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_highself",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_add_highself",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->add_highself(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadParams_add_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_bandpass",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_bandpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("BiquadParams_add_bandpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->add_bandpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadParams(void *obj) {
DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadParams(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadParams);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadParams_attributes[] = {
    { "bq", _wrap_BiquadParams_bq_get, _wrap_BiquadParams_bq_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadParams_methods[]= {
    { "get_params", _wrap_BiquadParams_get_params},
    { "biquad_notch", _wrap_BiquadParams_biquad_notch},
    { "biquad_lowpass", _wrap_BiquadParams_biquad_lowpass},
    { "biquad_highpass", _wrap_BiquadParams_biquad_highpass},
    { "biquad_peak", _wrap_BiquadParams_biquad_peak},
    { "biquad_lowshelf", _wrap_BiquadParams_biquad_lowshelf},
    { "biquad_highshelf", _wrap_BiquadParams_biquad_highshelf},
    { "biquad_bandpass", _wrap_BiquadParams_biquad_bandpass},
    { "add_notch", _wrap_BiquadParams_add_notch},
    { "add_lowpass", _wrap_BiquadParams_add_lowpass},
    { "add_highpass", _wrap_BiquadParams_add_highpass},
    { "add_peak", _wrap_BiquadParams_add_peak},
    { "add_lowshelf", _wrap_BiquadParams_add_lowshelf},
    { "add_highself", _wrap_BiquadParams_add_highself},
    { "add_bandpass", _wrap_BiquadParams_add_bandpass},
    {0,0}
};
static swig_lua_method swig_BiquadParams_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadParams_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadParams_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadParams_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadParams_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadParams_Sf_SwigStatic = {
    "BiquadParams",
    swig_BiquadParams_Sf_SwigStatic_methods,
    swig_BiquadParams_Sf_SwigStatic_attributes,
    swig_BiquadParams_Sf_SwigStatic_constants,
    swig_BiquadParams_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadParams_bases[] = {0};
static const char *swig_BiquadParams_base_names[] = {0};
static swig_lua_class _wrap_class_BiquadParams = { "BiquadParams", "BiquadParams", &SWIGTYPE_p_DSP__BiQuadParamsT_double_t,_proxy__wrap_new_BiquadParams, swig_delete_BiquadParams, swig_BiquadParams_methods, swig_BiquadParams_attributes, &swig_BiquadParams_Sf_SwigStatic, swig_BiquadParams_meta, swig_BiquadParams_bases, swig_BiquadParams_base_names };

static int _wrap_biquad_filter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::biquad< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::biquad< SampleType >",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::biquad< SampleType >",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("biquad_filter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("biquad_filter",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR biquad< SampleType >((DSP::BiQuadParams< double > const &)*arg1,*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_notch_params(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::notch_params< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::notch_params< SampleType >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::notch_params< SampleType >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR notch_params< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowpass_params(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::lowpass_params< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::lowpass_params< SampleType >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::lowpass_params< SampleType >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lowpass_params< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highpass_params(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::highpass_params< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::highpass_params< SampleType >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::highpass_params< SampleType >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR highpass_params< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_peak_params(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::peak_params< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::peak_params< SampleType >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::peak_params< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::peak_params< SampleType >",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR peak_params< SampleType >(arg1,arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowshelf_params(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::lowshelf_params< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::lowshelf_params< SampleType >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::lowshelf_params< SampleType >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lowshelf_params< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highshelf_params(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::highshelf_params< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::highshelf_params< SampleType >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::highshelf_params< SampleType >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR highshelf_params< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bandpass_params(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::bandpass_params< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bandpass_params< SampleType >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bandpass_params< SampleType >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bandpass_params< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NotchFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< SampleType > *arg1 = (DSP::NotchFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::filter",1,"DSP::NotchFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_double_t,0))){
    SWIG_fail_ptr("NotchFilter_filter_set",1,SWIGTYPE_p_DSP__NotchFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("NotchFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NotchFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< SampleType > *arg1 = (DSP::NotchFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::filter",1,"DSP::NotchFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_double_t,0))){
    SWIG_fail_ptr("NotchFilter_filter_get",1,SWIGTYPE_p_DSP__NotchFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NotchFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  DSP::NotchFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< SampleType >::NotchFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::NotchFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::NotchFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::NotchFilter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_NotchFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::NotchFilter< SampleType > *)new DSP::NotchFilter< SampleType >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__NotchFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NotchFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< SampleType > *arg1 = (DSP::NotchFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::apply",1,"DSP::NotchFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_double_t,0))){
    SWIG_fail_ptr("NotchFilter_apply",1,SWIGTYPE_p_DSP__NotchFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("NotchFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NotchFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< SampleType > *arg1 = (DSP::NotchFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::apply",1,"DSP::NotchFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_double_t,0))){
    SWIG_fail_ptr("NotchFilter_apply",1,SWIGTYPE_p_DSP__NotchFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("NotchFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("NotchFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NotchFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__NotchFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NotchFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__NotchFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NotchFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NotchFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::NotchFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::NotchFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_NotchFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< SampleType > *arg1 = (DSP::NotchFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::reset",1,"DSP::NotchFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_double_t,0))){
    SWIG_fail_ptr("NotchFilter_reset",1,SWIGTYPE_p_DSP__NotchFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NotchFilter(void *obj) {
DSP::NotchFilter< SampleType > *arg1 = (DSP::NotchFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_NotchFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NotchFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NotchFilter_attributes[] = {
    { "filter", _wrap_NotchFilter_filter_get, _wrap_NotchFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_NotchFilter_methods[]= {
    { "apply", _wrap_NotchFilter_apply},
    { "reset", _wrap_NotchFilter_reset},
    {0,0}
};
static swig_lua_method swig_NotchFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NotchFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NotchFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NotchFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NotchFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NotchFilter_Sf_SwigStatic = {
    "NotchFilter",
    swig_NotchFilter_Sf_SwigStatic_methods,
    swig_NotchFilter_Sf_SwigStatic_attributes,
    swig_NotchFilter_Sf_SwigStatic_constants,
    swig_NotchFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NotchFilter_bases[] = {0};
static const char *swig_NotchFilter_base_names[] = {0};
static swig_lua_class _wrap_class_NotchFilter = { "NotchFilter", "NotchFilter", &SWIGTYPE_p_DSP__NotchFilterT_double_t,_proxy__wrap_new_NotchFilter, swig_delete_NotchFilter, swig_NotchFilter_methods, swig_NotchFilter_attributes, &swig_NotchFilter_Sf_SwigStatic, swig_NotchFilter_meta, swig_NotchFilter_bases, swig_NotchFilter_base_names };

static int _wrap_LowpassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< SampleType > *arg1 = (DSP::LowPassFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::filter",1,"DSP::LowPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("LowpassFilter_filter_set",1,SWIGTYPE_p_DSP__LowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("LowpassFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowpassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< SampleType > *arg1 = (DSP::LowPassFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::filter",1,"DSP::LowPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("LowpassFilter_filter_get",1,SWIGTYPE_p_DSP__LowPassFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LowpassFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  DSP::LowPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< SampleType >::LowPassFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::LowPassFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::LowPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::LowPassFilter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_LowpassFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::LowPassFilter< SampleType > *)new DSP::LowPassFilter< SampleType >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__LowPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowpassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< SampleType > *arg1 = (DSP::LowPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::apply",1,"DSP::LowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("LowpassFilter_apply",1,SWIGTYPE_p_DSP__LowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("LowpassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowpassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< SampleType > *arg1 = (DSP::LowPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::apply",1,"DSP::LowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("LowpassFilter_apply",1,SWIGTYPE_p_DSP__LowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("LowpassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("LowpassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowpassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LowpassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LowpassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LowpassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::LowPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::LowPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LowpassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< SampleType > *arg1 = (DSP::LowPassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::reset",1,"DSP::LowPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("LowpassFilter_reset",1,SWIGTYPE_p_DSP__LowPassFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LowpassFilter(void *obj) {
DSP::LowPassFilter< SampleType > *arg1 = (DSP::LowPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_LowpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LowpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LowpassFilter_attributes[] = {
    { "filter", _wrap_LowpassFilter_filter_get, _wrap_LowpassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_LowpassFilter_methods[]= {
    { "apply", _wrap_LowpassFilter_apply},
    { "reset", _wrap_LowpassFilter_reset},
    {0,0}
};
static swig_lua_method swig_LowpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LowpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LowpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LowpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LowpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LowpassFilter_Sf_SwigStatic = {
    "LowpassFilter",
    swig_LowpassFilter_Sf_SwigStatic_methods,
    swig_LowpassFilter_Sf_SwigStatic_attributes,
    swig_LowpassFilter_Sf_SwigStatic_constants,
    swig_LowpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LowpassFilter_bases[] = {0};
static const char *swig_LowpassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_LowpassFilter = { "LowpassFilter", "LowpassFilter", &SWIGTYPE_p_DSP__LowPassFilterT_double_t,_proxy__wrap_new_LowpassFilter, swig_delete_LowpassFilter, swig_LowpassFilter_methods, swig_LowpassFilter_attributes, &swig_LowpassFilter_Sf_SwigStatic, swig_LowpassFilter_meta, swig_LowpassFilter_bases, swig_LowpassFilter_base_names };

static int _wrap_HighpassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< SampleType > *arg1 = (DSP::HighPassFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::filter",1,"DSP::HighPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("HighpassFilter_filter_set",1,SWIGTYPE_p_DSP__HighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("HighpassFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighpassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< SampleType > *arg1 = (DSP::HighPassFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::filter",1,"DSP::HighPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("HighpassFilter_filter_get",1,SWIGTYPE_p_DSP__HighPassFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_HighpassFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  DSP::HighPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< SampleType >::HighPassFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::HighPassFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::HighPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::HighPassFilter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_HighpassFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::HighPassFilter< SampleType > *)new DSP::HighPassFilter< SampleType >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__HighPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighpassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< SampleType > *arg1 = (DSP::HighPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::apply",1,"DSP::HighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("HighpassFilter_apply",1,SWIGTYPE_p_DSP__HighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("HighpassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighpassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< SampleType > *arg1 = (DSP::HighPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::apply",1,"DSP::HighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("HighpassFilter_apply",1,SWIGTYPE_p_DSP__HighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("HighpassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("HighpassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighpassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_HighpassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_HighpassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'HighpassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::HighPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::HighPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_HighpassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< SampleType > *arg1 = (DSP::HighPassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::reset",1,"DSP::HighPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("HighpassFilter_reset",1,SWIGTYPE_p_DSP__HighPassFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_HighpassFilter(void *obj) {
DSP::HighPassFilter< SampleType > *arg1 = (DSP::HighPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_HighpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_HighpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_HighpassFilter_attributes[] = {
    { "filter", _wrap_HighpassFilter_filter_get, _wrap_HighpassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_HighpassFilter_methods[]= {
    { "apply", _wrap_HighpassFilter_apply},
    { "reset", _wrap_HighpassFilter_reset},
    {0,0}
};
static swig_lua_method swig_HighpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_HighpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_HighpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_HighpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_HighpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_HighpassFilter_Sf_SwigStatic = {
    "HighpassFilter",
    swig_HighpassFilter_Sf_SwigStatic_methods,
    swig_HighpassFilter_Sf_SwigStatic_attributes,
    swig_HighpassFilter_Sf_SwigStatic_constants,
    swig_HighpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_HighpassFilter_bases[] = {0};
static const char *swig_HighpassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_HighpassFilter = { "HighpassFilter", "HighpassFilter", &SWIGTYPE_p_DSP__HighPassFilterT_double_t,_proxy__wrap_new_HighpassFilter, swig_delete_HighpassFilter, swig_HighpassFilter_methods, swig_HighpassFilter_attributes, &swig_HighpassFilter_Sf_SwigStatic, swig_HighpassFilter_meta, swig_HighpassFilter_bases, swig_HighpassFilter_base_names };

static int _wrap_BandpassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< SampleType > *arg1 = (DSP::BandPassFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::filter",1,"DSP::BandPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("BandpassFilter_filter_set",1,SWIGTYPE_p_DSP__BandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("BandpassFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandpassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< SampleType > *arg1 = (DSP::BandPassFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::filter",1,"DSP::BandPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("BandpassFilter_filter_get",1,SWIGTYPE_p_DSP__BandPassFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BandpassFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  DSP::BandPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< SampleType >::BandPassFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::BandPassFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::BandPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::BandPassFilter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_BandpassFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::BandPassFilter< SampleType > *)new DSP::BandPassFilter< SampleType >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BandPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandpassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< SampleType > *arg1 = (DSP::BandPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::apply",1,"DSP::BandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("BandpassFilter_apply",1,SWIGTYPE_p_DSP__BandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BandpassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandpassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< SampleType > *arg1 = (DSP::BandPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::apply",1,"DSP::BandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("BandpassFilter_apply",1,SWIGTYPE_p_DSP__BandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BandpassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BandpassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandpassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BandPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BandpassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BandPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BandpassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BandpassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BandPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::BandPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_BandpassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< SampleType > *arg1 = (DSP::BandPassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::reset",1,"DSP::BandPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("BandpassFilter_reset",1,SWIGTYPE_p_DSP__BandPassFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BandpassFilter(void *obj) {
DSP::BandPassFilter< SampleType > *arg1 = (DSP::BandPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BandpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BandpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BandpassFilter_attributes[] = {
    { "filter", _wrap_BandpassFilter_filter_get, _wrap_BandpassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_BandpassFilter_methods[]= {
    { "apply", _wrap_BandpassFilter_apply},
    { "reset", _wrap_BandpassFilter_reset},
    {0,0}
};
static swig_lua_method swig_BandpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BandpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BandpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BandpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BandpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BandpassFilter_Sf_SwigStatic = {
    "BandpassFilter",
    swig_BandpassFilter_Sf_SwigStatic_methods,
    swig_BandpassFilter_Sf_SwigStatic_attributes,
    swig_BandpassFilter_Sf_SwigStatic_constants,
    swig_BandpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BandpassFilter_bases[] = {0};
static const char *swig_BandpassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_BandpassFilter = { "BandpassFilter", "BandpassFilter", &SWIGTYPE_p_DSP__BandPassFilterT_double_t,_proxy__wrap_new_BandpassFilter, swig_delete_BandpassFilter, swig_BandpassFilter_methods, swig_BandpassFilter_attributes, &swig_BandpassFilter_Sf_SwigStatic, swig_BandpassFilter_meta, swig_BandpassFilter_bases, swig_BandpassFilter_base_names };

static int _wrap_PeakFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< SampleType > *arg1 = (DSP::PeakFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::filter",1,"DSP::PeakFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_double_t,0))){
    SWIG_fail_ptr("PeakFilter_filter_set",1,SWIGTYPE_p_DSP__PeakFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("PeakFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PeakFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< SampleType > *arg1 = (DSP::PeakFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::filter",1,"DSP::PeakFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_double_t,0))){
    SWIG_fail_ptr("PeakFilter_filter_get",1,SWIGTYPE_p_DSP__PeakFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PeakFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::PeakFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< SampleType >::PeakFilter",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::PeakFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::PeakFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::PeakFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::PeakFilter",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_PeakFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (DSP::PeakFilter< SampleType > *)new DSP::PeakFilter< SampleType >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__PeakFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PeakFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< SampleType > *arg1 = (DSP::PeakFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::apply",1,"DSP::PeakFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_double_t,0))){
    SWIG_fail_ptr("PeakFilter_apply",1,SWIGTYPE_p_DSP__PeakFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("PeakFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PeakFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< SampleType > *arg1 = (DSP::PeakFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::apply",1,"DSP::PeakFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_double_t,0))){
    SWIG_fail_ptr("PeakFilter_apply",1,SWIGTYPE_p_DSP__PeakFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("PeakFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("PeakFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PeakFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__PeakFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PeakFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__PeakFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PeakFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PeakFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::PeakFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::PeakFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_PeakFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< SampleType > *arg1 = (DSP::PeakFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::reset",1,"DSP::PeakFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_double_t,0))){
    SWIG_fail_ptr("PeakFilter_reset",1,SWIGTYPE_p_DSP__PeakFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PeakFilter(void *obj) {
DSP::PeakFilter< SampleType > *arg1 = (DSP::PeakFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_PeakFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PeakFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PeakFilter_attributes[] = {
    { "filter", _wrap_PeakFilter_filter_get, _wrap_PeakFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_PeakFilter_methods[]= {
    { "apply", _wrap_PeakFilter_apply},
    { "reset", _wrap_PeakFilter_reset},
    {0,0}
};
static swig_lua_method swig_PeakFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PeakFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PeakFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PeakFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PeakFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PeakFilter_Sf_SwigStatic = {
    "PeakFilter",
    swig_PeakFilter_Sf_SwigStatic_methods,
    swig_PeakFilter_Sf_SwigStatic_attributes,
    swig_PeakFilter_Sf_SwigStatic_constants,
    swig_PeakFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PeakFilter_bases[] = {0};
static const char *swig_PeakFilter_base_names[] = {0};
static swig_lua_class _wrap_class_PeakFilter = { "PeakFilter", "PeakFilter", &SWIGTYPE_p_DSP__PeakFilterT_double_t,_proxy__wrap_new_PeakFilter, swig_delete_PeakFilter, swig_PeakFilter_methods, swig_PeakFilter_attributes, &swig_PeakFilter_Sf_SwigStatic, swig_PeakFilter_meta, swig_PeakFilter_bases, swig_PeakFilter_base_names };

static int _wrap_LowShelfFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< SampleType > *arg1 = (DSP::LowShelfFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::filter",1,"DSP::LowShelfFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t,0))){
    SWIG_fail_ptr("LowShelfFilter_filter_set",1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("LowShelfFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowShelfFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< SampleType > *arg1 = (DSP::LowShelfFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::filter",1,"DSP::LowShelfFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t,0))){
    SWIG_fail_ptr("LowShelfFilter_filter_get",1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LowShelfFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  DSP::LowShelfFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< SampleType >::LowShelfFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::LowShelfFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::LowShelfFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::LowShelfFilter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_LowShelfFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::LowShelfFilter< SampleType > *)new DSP::LowShelfFilter< SampleType >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__LowShelfFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowShelfFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< SampleType > *arg1 = (DSP::LowShelfFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::apply",1,"DSP::LowShelfFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t,0))){
    SWIG_fail_ptr("LowShelfFilter_apply",1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("LowShelfFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowShelfFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< SampleType > *arg1 = (DSP::LowShelfFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::apply",1,"DSP::LowShelfFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t,0))){
    SWIG_fail_ptr("LowShelfFilter_apply",1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("LowShelfFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("LowShelfFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowShelfFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowShelfFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LowShelfFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowShelfFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LowShelfFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LowShelfFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::LowShelfFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::LowShelfFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_LowShelfFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< SampleType > *arg1 = (DSP::LowShelfFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::reset",1,"DSP::LowShelfFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t,0))){
    SWIG_fail_ptr("LowShelfFilter_reset",1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LowShelfFilter(void *obj) {
DSP::LowShelfFilter< SampleType > *arg1 = (DSP::LowShelfFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_LowShelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LowShelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LowShelfFilter_attributes[] = {
    { "filter", _wrap_LowShelfFilter_filter_get, _wrap_LowShelfFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_LowShelfFilter_methods[]= {
    { "apply", _wrap_LowShelfFilter_apply},
    { "reset", _wrap_LowShelfFilter_reset},
    {0,0}
};
static swig_lua_method swig_LowShelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LowShelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LowShelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LowShelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LowShelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LowShelfFilter_Sf_SwigStatic = {
    "LowShelfFilter",
    swig_LowShelfFilter_Sf_SwigStatic_methods,
    swig_LowShelfFilter_Sf_SwigStatic_attributes,
    swig_LowShelfFilter_Sf_SwigStatic_constants,
    swig_LowShelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LowShelfFilter_bases[] = {0};
static const char *swig_LowShelfFilter_base_names[] = {0};
static swig_lua_class _wrap_class_LowShelfFilter = { "LowShelfFilter", "LowShelfFilter", &SWIGTYPE_p_DSP__LowShelfFilterT_double_t,_proxy__wrap_new_LowShelfFilter, swig_delete_LowShelfFilter, swig_LowShelfFilter_methods, swig_LowShelfFilter_attributes, &swig_LowShelfFilter_Sf_SwigStatic, swig_LowShelfFilter_meta, swig_LowShelfFilter_bases, swig_LowShelfFilter_base_names };

static int _wrap_HighShelfFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< SampleType > *arg1 = (DSP::HighShelfFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::filter",1,"DSP::HighShelfFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t,0))){
    SWIG_fail_ptr("HighShelfFilter_filter_set",1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("HighShelfFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighShelfFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< SampleType > *arg1 = (DSP::HighShelfFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::filter",1,"DSP::HighShelfFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t,0))){
    SWIG_fail_ptr("HighShelfFilter_filter_get",1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_HighShelfFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  DSP::HighShelfFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< SampleType >::HighShelfFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::HighShelfFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::HighShelfFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::HighShelfFilter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_HighShelfFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::HighShelfFilter< SampleType > *)new DSP::HighShelfFilter< SampleType >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__HighShelfFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighShelfFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< SampleType > *arg1 = (DSP::HighShelfFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::apply",1,"DSP::HighShelfFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t,0))){
    SWIG_fail_ptr("HighShelfFilter_apply",1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("HighShelfFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighShelfFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< SampleType > *arg1 = (DSP::HighShelfFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::apply",1,"DSP::HighShelfFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t,0))){
    SWIG_fail_ptr("HighShelfFilter_apply",1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("HighShelfFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("HighShelfFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HighShelfFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighShelfFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_HighShelfFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighShelfFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_HighShelfFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'HighShelfFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::HighShelfFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::HighShelfFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_HighShelfFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< SampleType > *arg1 = (DSP::HighShelfFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::reset",1,"DSP::HighShelfFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t,0))){
    SWIG_fail_ptr("HighShelfFilter_reset",1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_HighShelfFilter(void *obj) {
DSP::HighShelfFilter< SampleType > *arg1 = (DSP::HighShelfFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_HighShelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_HighShelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_HighShelfFilter_attributes[] = {
    { "filter", _wrap_HighShelfFilter_filter_get, _wrap_HighShelfFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_HighShelfFilter_methods[]= {
    { "apply", _wrap_HighShelfFilter_apply},
    { "reset", _wrap_HighShelfFilter_reset},
    {0,0}
};
static swig_lua_method swig_HighShelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_HighShelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_HighShelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_HighShelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_HighShelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_HighShelfFilter_Sf_SwigStatic = {
    "HighShelfFilter",
    swig_HighShelfFilter_Sf_SwigStatic_methods,
    swig_HighShelfFilter_Sf_SwigStatic_attributes,
    swig_HighShelfFilter_Sf_SwigStatic_constants,
    swig_HighShelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_HighShelfFilter_bases[] = {0};
static const char *swig_HighShelfFilter_base_names[] = {0};
static swig_lua_class _wrap_class_HighShelfFilter = { "HighShelfFilter", "HighShelfFilter", &SWIGTYPE_p_DSP__HighShelfFilterT_double_t,_proxy__wrap_new_HighShelfFilter, swig_delete_HighShelfFilter, swig_HighShelfFilter_methods, swig_HighShelfFilter_attributes, &swig_HighShelfFilter_Sf_SwigStatic, swig_HighShelfFilter_meta, swig_HighShelfFilter_bases, swig_HighShelfFilter_base_names };

static int _wrap_normalize_frequency(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("DSP::normalize_frequency< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::normalize_frequency< SampleType >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::normalize_frequency< SampleType >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR normalize_frequency< SampleType >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspace__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  size_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::linspace< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::linspace< SampleType >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::linspace< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::linspace< SampleType >",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::linspace< SampleType >",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::linspace< SampleType >",5,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR linspace< SampleType >(arg1,arg2,arg3,arg4,arg5);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspace__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  size_t arg3 ;
  bool arg4 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::linspace< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::linspace< SampleType >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::linspace< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::linspace< SampleType >",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::linspace< SampleType >",4,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR linspace< SampleType >(arg1,arg2,arg3,arg4);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspace__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  size_t arg3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::linspace< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::linspace< SampleType >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::linspace< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::linspace< SampleType >",3,"size_t");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR linspace< SampleType >(arg1,arg2,arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspace(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_linspace__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_linspace__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_linspace__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'linspace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::linspace< SampleType >(double,double,size_t,bool,bool)\n"
    "    DSP::linspace< SampleType >(double,double,size_t,bool)\n"
    "    DSP::linspace< SampleType >(double,double,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_pad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::pad< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pad< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::pad< SampleType >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("pad",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pad< SampleType >((DSP::SampleVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pad__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::pad< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pad< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("pad",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pad< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pad(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_pad__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_pad__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'pad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::pad< SampleType >(DSP::SampleVector< double > const &,double const &)\n"
    "    DSP::pad< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::slice< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::slice< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::slice< SampleType >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::slice< SampleType >",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("slice",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR slice< SampleType >((DSP::SampleVector< double > const &)*arg1,arg2,arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_slice__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t arg2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::slice< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::slice< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::slice< SampleType >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("slice",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR slice< SampleType >((DSP::SampleVector< double > const &)*arg1,arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_slice(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_slice__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_slice__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::slice< SampleType >(DSP::SampleVector< double > const &,size_t,size_t)\n"
    "    DSP::slice< SampleType >(DSP::SampleVector< double > const &,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_truncate(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t arg2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::truncate< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::truncate< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::truncate< SampleType >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("truncate",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR truncate< SampleType >((DSP::SampleVector< double > const &)*arg1,arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reverse(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::reverse< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::reverse< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("reverse",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR reverse< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ringbuf_read(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t *arg2 = 0 ;
  double *arg3 = 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::ringbuf_read< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ringbuf_read< SampleType >",1,"DSP::SampleVector< double > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ringbuf_read< SampleType >",2,"size_t &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ringbuf_read< SampleType >",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ringbuf_read",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("ringbuf_read",2,SWIGTYPE_p_size_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ringbuf_read",3,SWIGTYPE_p_double);
  }
  
  result = (double *) &DSP::SWIGTEMPLATEDISAMBIGUATOR ringbuf_read< SampleType >(*arg1,*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ringbuf_write(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t *arg2 = 0 ;
  double *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ringbuf_write< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ringbuf_write< SampleType >",1,"DSP::SampleVector< double > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ringbuf_write< SampleType >",2,"size_t &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ringbuf_write< SampleType >",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ringbuf_write",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("ringbuf_write",2,SWIGTYPE_p_size_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ringbuf_write",3,SWIGTYPE_p_double);
  }
  
  DSP::SWIGTEMPLATEDISAMBIGUATOR ringbuf_write< SampleType >(*arg1,*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::abs< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::abs< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("abs",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR abs< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::abs< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::abs< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("abs",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR abs< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'abs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::abs< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::abs< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::add< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::add< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::add< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("add",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("add",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR add< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::add< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::add< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::add< SampleType >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("add",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR add< SampleType >((DSP::SampleVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_add__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::add< SampleType >(DSP::SampleVector< double > const &,DSP::SampleVector< double > const &)\n"
    "    DSP::add< SampleType >(DSP::SampleVector< double > const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_absmax__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::absmax< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmax< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::absmax< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("absmax",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("absmax",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR absmax< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmax__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::absmax< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmax< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::absmax< SampleType >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("absmax",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR absmax< SampleType >((DSP::SampleVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmax(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_absmax__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_absmax__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'absmax'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::absmax< SampleType >(DSP::SampleVector< double > const &,DSP::SampleVector< double > const &)\n"
    "    DSP::absmax< SampleType >(DSP::SampleVector< double > const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_absmin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::absmin< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmin< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::absmin< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("absmin",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("absmin",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR absmin< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmin__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::absmin< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmin< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::absmin< SampleType >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("absmin",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR absmin< SampleType >((DSP::SampleVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmin(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_absmin__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_absmin__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'absmin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::absmin< SampleType >(DSP::SampleVector< double > const &,DSP::SampleVector< double > const &)\n"
    "    DSP::absmin< SampleType >(DSP::SampleVector< double > const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_clamp__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::clamp< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::clamp< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::clamp< SampleType >",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::clamp< SampleType >",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("clamp",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("clamp",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("clamp",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR clamp< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2,(DSP::SampleVector< double > const &)*arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clamp__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp2 ;
  double temp3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::clamp< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::clamp< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::clamp< SampleType >",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::clamp< SampleType >",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("clamp",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR clamp< SampleType >((DSP::SampleVector< double > const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clamp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_clamp__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_clamp__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'clamp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::clamp< SampleType >(DSP::SampleVector< double > const &,DSP::SampleVector< double > const &,DSP::SampleVector< double > const &)\n"
    "    DSP::clamp< SampleType >(DSP::SampleVector< double > const &,double const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cube__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::cube< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cube< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("cube",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cube< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cube__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::cube< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cube< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("cube",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cube< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cube(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cube__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cube__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cube'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::cube< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::cube< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_div(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::div< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::div< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::div< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("div",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("div",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR div< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmadd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::fmadd< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmadd< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmadd< SampleType >",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fmadd< SampleType >",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fmadd",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fmadd",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fmadd",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmadd< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2,(DSP::SampleVector< double > const &)*arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmsub(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::fmsub< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmsub< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmsub< SampleType >",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fmsub< SampleType >",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fmsub",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fmsub",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fmsub",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmsub< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2,(DSP::SampleVector< double > const &)*arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::max< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::max< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::max< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("max",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("max",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR max< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::max< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::max< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::max< SampleType >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("max",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR max< SampleType >((DSP::SampleVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_max__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_max__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::max< SampleType >(DSP::SampleVector< double > const &,DSP::SampleVector< double > const &)\n"
    "    DSP::max< SampleType >(DSP::SampleVector< double > const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_min__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::min< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::min< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::min< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("min",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("min",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR min< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_min__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::min< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::min< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::min< SampleType >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("min",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR min< SampleType >((DSP::SampleVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_min(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_min__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_min__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::min< SampleType >(DSP::SampleVector< double > const &,DSP::SampleVector< double > const &)\n"
    "    DSP::min< SampleType >(DSP::SampleVector< double > const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_mix(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::mix< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mix< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::mix< SampleType >",2,"double const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::mix< SampleType >",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("mix",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("mix",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR mix< SampleType >((DSP::SampleVector< double > const &)*arg1,(double const &)*arg2,(DSP::SampleVector< double > const &)*arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mixs(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::mixs< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mixs< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::mixs< SampleType >",2,"double const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::mixs< SampleType >",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("mixs",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("mixs",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR mixs< SampleType >((DSP::SampleVector< double > const &)*arg1,(double const &)*arg2,(DSP::SampleVector< double > const &)*arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::mul< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mul< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::mul< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("mul",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("mul",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR mul< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::mul< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mul< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::mul< SampleType >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("mul",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR mul< SampleType >((DSP::SampleVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_mul__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::mul< SampleType >(DSP::SampleVector< double > const &,DSP::SampleVector< double > const &)\n"
    "    DSP::mul< SampleType >(DSP::SampleVector< double > const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_neg(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::neg< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::neg< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("neg",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR neg< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqr(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::sqr< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sqr< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("sqr",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sqr< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrt__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::sqrt< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sqrt< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("sqrt",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sqrt< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrt__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::sqrt< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sqrt< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("sqrt",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sqrt< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrt(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrt__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrt__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sqrt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sqrt< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::sqrt< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_exp__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::exp< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("exp",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::exp< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("exp",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'exp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::exp< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::exp< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_exp10(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::exp10< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp10< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("exp10",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp10< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::exp2< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp2< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("exp2",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp2< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::exp2< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp2< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("exp2",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp2< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp2__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp2__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'exp2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::exp2< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::exp2< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_exp_fmadd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::exp_fmadd< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp_fmadd< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::exp_fmadd< SampleType >",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::exp_fmadd< SampleType >",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("exp_fmadd",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("exp_fmadd",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("exp_fmadd",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp_fmadd< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2,(DSP::SampleVector< double > const &)*arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::log< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("log",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::log< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("log",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::log< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::log< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log10__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::log10< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log10< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("log10",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log10< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::log10< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log10< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("log10",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log10< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log10'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::log10< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::log10< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::log2< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log2< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("log2",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log2< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::log2< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log2< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("log2",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log2< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log2__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log2__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::log2< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::log2< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log_fmadd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::log_fmadd< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log_fmadd< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::log_fmadd< SampleType >",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::log_fmadd< SampleType >",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("log_fmadd",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("log_fmadd",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("log_fmadd",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log_fmadd< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2,(DSP::SampleVector< double > const &)*arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logb__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::logb< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::logb< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("logb",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR logb< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logb__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::logb< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::logb< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("logb",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR logb< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logb(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logb__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logb__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'logb'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::logb< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::logb< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_logm(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::logm< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::logm< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::logm< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("logm",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("logm",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR logm< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logn(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::logn< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::logn< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::logn< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("logn",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("logn",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR logn< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::pow< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pow< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::pow< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("pow",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pow< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::pow< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pow< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::pow< SampleType >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pow< SampleType >((DSP::SampleVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::pow< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pow< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::pow< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("pow",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pow< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pow__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pow__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_pow__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::pow< SampleType >(DSP::Scalar< double > const &,DSP::Scalar< double > const &)\n"
    "    DSP::pow< SampleType >(DSP::SampleVector< double > const &,double const &)\n"
    "    DSP::pow< SampleType >(DSP::SampleVector< double > const &,DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_root(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::root< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::root< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::root< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("root",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("root",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR root< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::floor< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::floor< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("floor",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR floor< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floor__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::floor< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::floor< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("floor",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR floor< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floor(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floor__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floor__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'floor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::floor< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::floor< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_acos__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::acos< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::acos< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("acos",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR acos< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acos__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::acos< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::acos< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("acos",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR acos< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acos(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acos__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acos__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'acos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::acos< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::acos< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_asin(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::asin< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::asin< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("asin",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR asin< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::atan< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("atan",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::atan< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("atan",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atan__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atan__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atan'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::atan< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::atan< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_atan2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::atan2< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::atan2< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("atan2",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("atan2",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::atan2< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::atan2< SampleType >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("atan2",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2< SampleType >((DSP::SampleVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::atan2< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::atan2< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("atan2",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("atan2",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_atan2__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atan2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::atan2< SampleType >(DSP::Scalar< double > const &,DSP::Scalar< double > const &)\n"
    "    DSP::atan2< SampleType >(DSP::SampleVector< double > const &,double const &)\n"
    "    DSP::atan2< SampleType >(DSP::SampleVector< double > const &,DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cos__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::cos< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cos< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("cos",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cos< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::cos< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cos< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("cos",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cos< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cos__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cos__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::cos< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::cos< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::sin< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sin< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("sin",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sin< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::sin< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sin< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("sin",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sin< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sin__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sin__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sin< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::sin< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_tan__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::tan< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tan< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("tan",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tan< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tan__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::tan< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tan< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("tan",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tan< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tan(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tan__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tan__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'tan'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::tan< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::tan< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cosh__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::cosh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cosh< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("cosh",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cosh< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosh__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::cosh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cosh< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("cosh",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cosh< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosh(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosh__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosh__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cosh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::cosh< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::cosh< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_coth(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::coth< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::coth< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("coth",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR coth< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinh__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::sinh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sinh< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("sinh",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinh< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinh__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::sinh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sinh< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("sinh",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinh< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinh(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinh__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinh__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sinh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sinh< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::sinh< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_tanh__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::tanh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tanh< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("tanh",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tanh< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanh__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::tanh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tanh< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("tanh",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tanh< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanh(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanh__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanh__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'tanh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::tanh< SampleType >(DSP::Scalar< double > const &)\n"
    "    DSP::tanh< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_atan2deg__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::atan2deg< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2deg< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::atan2deg< SampleType >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("atan2deg",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2deg< SampleType >((DSP::SampleVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2deg__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::atan2deg< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2deg< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::atan2deg< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("atan2deg",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("atan2deg",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2deg< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2deg(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2deg__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_atan2deg__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atan2deg'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::atan2deg< SampleType >(DSP::SampleVector< double > const &,double const &)\n"
    "    DSP::atan2deg< SampleType >(DSP::SampleVector< double > const &,DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cosdeg(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::cosdeg< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cosdeg< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("cosdeg",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cosdeg< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sindeg(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::sindeg< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sindeg< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("sindeg",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sindeg< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinc(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::sinc< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sinc< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("sinc",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinc< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gamma(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::gamma< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::gamma< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("gamma",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR gamma< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmaxof(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::absmaxof< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmaxof< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("absmaxof",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR absmaxof< SampleType >((DSP::SampleVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dot(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::dot< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::dot< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::dot< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("dot",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("dot",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR dot< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_maxof(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::maxof< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::maxof< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("maxof",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR maxof< SampleType >((DSP::SampleVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minof(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::minof< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::minof< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("minof",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR minof< SampleType >((DSP::SampleVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mean(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::mean< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mean< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("mean",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR mean< SampleType >((DSP::SampleVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_product(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::product< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::product< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("product",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR product< SampleType >((DSP::SampleVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rms(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::rms< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::rms< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("rms",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR rms< SampleType >((DSP::SampleVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sum(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::sum< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sum< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("sum",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR sum< SampleType >((DSP::SampleVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sumsqr(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::sumsqr< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sumsqr< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("sumsqr",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR sumsqr< SampleType >((DSP::SampleVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipow(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  int arg2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::ipow< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ipow< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ipow< SampleType >",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ipow",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR ipow< SampleType >((DSP::SampleVector< double > const &)*arg1,arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos2x(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("DSP::kcos2x< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::kcos2x< SampleType >",1,"double const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::kcos2x< SampleType >",2,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR kcos2x< SampleType >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin2x(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("DSP::ksin2x< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ksin2x< SampleType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ksin2x< SampleType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR ksin2x< SampleType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos3x(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("DSP::kcos3x< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::kcos3x< SampleType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::kcos3x< SampleType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR kcos3x< SampleType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin3x(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("DSP::ksin3x< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ksin3x< SampleType >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ksin3x< SampleType >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR ksin3x< SampleType >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reciprocal(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("DSP::kreciprocal< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::kreciprocal< SampleType >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR kreciprocal< SampleType >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosh(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::acosh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::acosh< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("acosh",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR acosh< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinh(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::asinh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::asinh< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("asinh",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR asinh< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanh(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::atanh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atanh< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("atanh",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atanh< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrt(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::cbrt< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cbrt< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("cbrt",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cbrt< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceil(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::ceil< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ceil< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("ceil",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR ceil< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysign(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::copysign< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::copysign< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::copysign< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("copysign",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("copysign",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR copysign< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::erf< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::erf< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("erf",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR erf< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfc(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::erfc< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::erfc< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("erfc",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR erfc< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::expm1< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::expm1< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("expm1",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR expm1< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdim(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::fdim< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fdim< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fdim< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fdim",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fdim",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fdim< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fma(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  DSP::Scalar< double > *arg3 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::fma< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fma< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fma< SampleType >",2,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fma< SampleType >",3,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fma",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fma",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fma",3,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fma< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2,(DSP::Scalar< double > const &)*arg3);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmax(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::fmax< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmax< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmax< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmax",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmax",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmax< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmin(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::fmin< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmin< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmin< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmin",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmin",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmin< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmod(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::fmod< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmod< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmod< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmod",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmod",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmod< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassify(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  int result;
  
  SWIG_check_num_args("DSP::fpclassify< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fpclassify< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fpclassify",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (int)DSP::SWIGTEMPLATEDISAMBIGUATOR fpclassify< SampleType >((DSP::Scalar< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypot(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::hypot< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::hypot< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::hypot< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("hypot",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("hypot",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR hypot< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogb(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  int result;
  
  SWIG_check_num_args("DSP::ilogb< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ilogb< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("ilogb",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (int)DSP::SWIGTEMPLATEDISAMBIGUATOR ilogb< SampleType >((DSP::Scalar< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinite(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isfinite< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isfinite< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isfinite",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isfinite< SampleType >((DSP::Scalar< double > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreater(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isgreater< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isgreater< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::isgreater< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isgreater",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isgreater",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isgreater< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequal(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isgreaterequal< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isgreaterequal< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::isgreaterequal< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isgreaterequal",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isgreaterequal",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isgreaterequal< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isinf< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isinf< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isinf",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isinf< SampleType >((DSP::Scalar< double > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isless(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isless< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isless< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::isless< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isless",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isless",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isless< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequal(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::islessequal< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::islessequal< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::islessequal< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("islessequal",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("islessequal",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR islessequal< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnan(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isnan< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isnan< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isnan",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isnan< SampleType >((DSP::Scalar< double > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormal(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isnormal< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isnormal< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isnormal",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isnormal< SampleType >((DSP::Scalar< double > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunordered(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isunordered< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isunordered< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::isunordered< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isunordered",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isunordered",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isunordered< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexp(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  int arg2 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::ldexp< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ldexp< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ldexp< SampleType >",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("ldexp",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR ldexp< SampleType >((DSP::Scalar< double > const &)*arg1,arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgamma(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::lgamma< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::lgamma< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("lgamma",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lgamma< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrint(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::llrint< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::llrint< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("llrint",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR llrint< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llround(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::llround< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::llround< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("llround",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR llround< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1p(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::log1p< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log1p< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("log1p",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log1p< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrint(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::lrint< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::lrint< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("lrint",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lrint< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lround(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::lround< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::lround< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("lround",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lround< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nan(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::nan< SampleType >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::nan< SampleType >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nan< SampleType >((char const *)arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::nanf< SampleType >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::nanf< SampleType >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nanf< SampleType >((char const *)arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanl(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::nanl< SampleType >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::nanl< SampleType >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nanl< SampleType >((char const *)arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyint(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::nearbyint< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::nearbyint< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("nearbyint",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nearbyint< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::nextafter< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::nextafter< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::nextafter< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("nextafter",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("nextafter",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nextafter< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttoward(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::nexttoward< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::nexttoward< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::nexttoward< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("nexttoward",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("nexttoward",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nexttoward< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainder(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::remainder< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::remainder< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::remainder< SampleType >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("remainder",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("remainder",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR remainder< SampleType >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rint(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::rint< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::rint< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("rint",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR rint< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_round(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::round< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::round< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("round",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR round< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbln(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  long arg2 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::scalbln< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::scalbln< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::scalbln< SampleType >",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("scalbln",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR scalbln< SampleType >((DSP::Scalar< double > const &)*arg1,arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbn(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  int arg2 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::scalbn< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::scalbn< SampleType >",1,"DSP::Scalar< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::scalbn< SampleType >",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("scalbn",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR scalbn< SampleType >((DSP::Scalar< double > const &)*arg1,arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::square< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::square< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("square",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR square< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgamma(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::tgamma< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tgamma< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("tgamma",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tgamma< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_trunc(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::trunc< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::trunc< SampleType >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("trunc",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR trunc< SampleType >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  SwigValueWrapper< DSP::Complex< double > > result;
  
  SWIG_check_num_args("DSP::make_complex< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_complex< SampleType >",1,"double const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_complex< SampleType >",2,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_complex< SampleType >(arg1,arg2);
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Complex< double > > result;
  
  SWIG_check_num_args("DSP::make_complex< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::make_complex< SampleType >",1,"kfr::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("make_complex",1,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_complex< SampleType >((kfr::complex< double > const &)*arg1);
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_make_complex__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_make_complex__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'make_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_complex< SampleType >(double const,double const)\n"
    "    DSP::make_complex< SampleType >(kfr::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_make_univector(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_univec< SampleType >",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::make_univec< SampleType >",1,"double const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_univec< SampleType >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("make_univector",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_univec< SampleType >((double const *)arg1,arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_hann(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_hann< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hann< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hann< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_hamming(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_hamming< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hamming< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hamming< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  window_symmetry arg3 ;
  window_symmetry *argp3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_blackman< SampleType >",2,"double const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::make_window_blackman< SampleType >",3,"window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_window_symmetry,0))){
    SWIG_fail_ptr("window_blackman",3,SWIGTYPE_p_window_symmetry);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman< SampleType >(arg1,arg2,arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_blackman< SampleType >",2,"double const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman< SampleType >(arg1,arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_blackman__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_window_symmetry, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_window_blackman__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman< SampleType >(size_t,double const,window_symmetry)\n"
    "    DSP::make_window_blackman< SampleType >(size_t,double const)\n"
    "    DSP::make_window_blackman< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_blackman_harris__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  window_symmetry arg2 ;
  window_symmetry *argp2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_blackman_harris< SampleType >",2,"window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_window_symmetry,0))){
    SWIG_fail_ptr("window_blackman_harris",2,SWIGTYPE_p_window_symmetry);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris< SampleType >(arg1,arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harris__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harris(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman_harris__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_window_symmetry, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_blackman_harris__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman_harris'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman_harris< SampleType >(size_t,window_symmetry)\n"
    "    DSP::make_window_blackman_harris< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_gaussian__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_gaussian< SampleType >",2,"double const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian< SampleType >(arg1,arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussian__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussian(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_gaussian__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_gaussian__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_gaussian'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_gaussian< SampleType >(size_t,double const)\n"
    "    DSP::make_window_gaussian< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_triangular(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_triangular< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_triangular< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_triangular< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_cosine(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_cosine< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_cosine< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_cosine< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett_hann(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett_hann< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett_hann< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett_hann< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bohman(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_bohman< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bohman< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bohman< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_lanczos(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_lanczos< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_lanczos< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_lanczos< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_flattop(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_flattop< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_flattop< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_flattop< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_kaiser< SampleType >",2,"double const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser< SampleType >(arg1,arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_kaiser__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_kaiser__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_kaiser'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_kaiser< SampleType >(size_t,double const)\n"
    "    DSP::make_window_kaiser< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_hann_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_hann_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hann_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hann_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_hamming_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_hamming_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hamming_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hamming_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  window_symmetry arg3 ;
  window_symmetry *argp3 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_ptr< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_ptr< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_blackman_ptr< SampleType >",2,"double const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::make_window_blackman_ptr< SampleType >",3,"window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_window_symmetry,0))){
    SWIG_fail_ptr("window_blackman_ptr",3,SWIGTYPE_p_window_symmetry);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_ptr< SampleType >(arg1,arg2,arg3);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_ptr< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_ptr< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_blackman_ptr< SampleType >",2,"double const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_ptr< SampleType >(arg1,arg2);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptr__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptr(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman_ptr__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_blackman_ptr__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_window_symmetry, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_window_blackman_ptr__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman_ptr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman_ptr< SampleType >(size_t,double const,window_symmetry)\n"
    "    DSP::make_window_blackman_ptr< SampleType >(size_t,double const)\n"
    "    DSP::make_window_blackman_ptr< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_blackman_harris_ptr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  window_symmetry arg2 ;
  window_symmetry *argp2 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris_ptr< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris_ptr< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_blackman_harris_ptr< SampleType >",2,"window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_window_symmetry,0))){
    SWIG_fail_ptr("window_blackman_harris_ptr",2,SWIGTYPE_p_window_symmetry);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris_ptr< SampleType >(arg1,arg2);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harris_ptr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harris_ptr(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman_harris_ptr__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_window_symmetry, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_blackman_harris_ptr__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman_harris_ptr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman_harris_ptr< SampleType >(size_t,window_symmetry)\n"
    "    DSP::make_window_blackman_harris_ptr< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_gaussian_ptr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian_ptr< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian_ptr< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_gaussian_ptr< SampleType >",2,"double const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian_ptr< SampleType >(arg1,arg2);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussian_ptr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussian_ptr(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_gaussian_ptr__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_gaussian_ptr__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_gaussian_ptr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_gaussian_ptr< SampleType >(size_t,double const)\n"
    "    DSP::make_window_gaussian_ptr< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_triangular_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_triangular_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_triangular_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_triangular_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_cosine_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_cosine_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_cosine_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_cosine_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett_hann_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett_hann_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett_hann_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett_hann_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bohman_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_bohman_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bohman_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bohman_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_lanczos_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_lanczos_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_lanczos_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_lanczos_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_flattop_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_flattop_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_flattop_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_flattop_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser_ptr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser_ptr< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser_ptr< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_kaiser_ptr< SampleType >",2,"double const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser_ptr< SampleType >(arg1,arg2);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser_ptr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser_ptr(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_kaiser_ptr__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_kaiser_ptr__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_kaiser_ptr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_kaiser_ptr< SampleType >(size_t,double const)\n"
    "    DSP::make_window_kaiser_ptr< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_dftf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< kfr::complex< double > > *arg1 = 0 ;
  SwigValueWrapper< DSP::SampleVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::run_dft< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_dft< SampleType >",1,"DSP::SampleVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("dftf",1,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_dft< SampleType >((DSP::SampleVector< kfr::complex< double > > const &)*arg1);
  {
    DSP::SampleVector< kfr::complex< double > > * resultptr = new DSP::SampleVector< kfr::complex< double > >((const DSP::SampleVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_realdftf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::SampleVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::run_realdft< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_realdft< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("realdftf",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_realdft< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< kfr::complex< double > > * resultptr = new DSP::SampleVector< kfr::complex< double > >((const DSP::SampleVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_idftf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< kfr::complex< double > > *arg1 = 0 ;
  SwigValueWrapper< DSP::SampleVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::run_idft< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_idft< SampleType >",1,"DSP::SampleVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("idftf",1,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_idft< SampleType >((DSP::SampleVector< kfr::complex< double > > const &)*arg1);
  {
    DSP::SampleVector< kfr::complex< double > > * resultptr = new DSP::SampleVector< kfr::complex< double > >((const DSP::SampleVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_irealdftf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< kfr::complex< double > > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::run_irealdft< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_irealdft< SampleType >",1,"DSP::SampleVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("irealdftf",1,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_irealdft< SampleType >((DSP::SampleVector< kfr::complex< double > > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dftd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< kfr::complex< double > > *arg1 = 0 ;
  SwigValueWrapper< DSP::SampleVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::run_dft< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_dft< f64 >",1,"DSP::SampleVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("dftd",1,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_dft< f64 >((DSP::SampleVector< kfr::complex< double > > const &)*arg1);
  {
    DSP::SampleVector< kfr::complex< double > > * resultptr = new DSP::SampleVector< kfr::complex< double > >((const DSP::SampleVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_realdftd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::SampleVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::run_realdft< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_realdft< f64 >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("realdftd",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_realdft< f64 >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< kfr::complex< double > > * resultptr = new DSP::SampleVector< kfr::complex< double > >((const DSP::SampleVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_idftd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< kfr::complex< double > > *arg1 = 0 ;
  SwigValueWrapper< DSP::SampleVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::run_idft< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_idft< f64 >",1,"DSP::SampleVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("idftd",1,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_idft< f64 >((DSP::SampleVector< kfr::complex< double > > const &)*arg1);
  {
    DSP::SampleVector< kfr::complex< double > > * resultptr = new DSP::SampleVector< kfr::complex< double > >((const DSP::SampleVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_irealdftd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< kfr::complex< double > > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::run_irealdft< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_irealdft< f64 >",1,"DSP::SampleVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("irealdftd",1,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_irealdft< f64 >((DSP::SampleVector< kfr::complex< double > > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_energy_to_loudness(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("DSP::energy_to_loudness< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::energy_to_loudness< SampleType >",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR energy_to_loudness< SampleType >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_loudness_to_energy(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("DSP::loudness_to_energy< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::loudness_to_energy< SampleType >",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR loudness_to_energy< SampleType >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dcremove(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  double arg2 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::dcremove< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::dcremove< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::dcremove< SampleType >",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("dcremove",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR dcremove< SampleType >((DSP::SampleVector< double > const &)*arg1,arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WavReader(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::WavReader< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::WavReader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::WavReader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (DSP::WavReader< SampleType > *)new DSP::WavReader< SampleType >((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__WavReaderT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavReader_read(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::read",1,"DSP::WavReader< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::WavReader< SampleType >::read",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_double_t,0))){
    SWIG_fail_ptr("WavReader_read",1,SWIGTYPE_p_DSP__WavReaderT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("WavReader_read",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (arg1)->read(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavReader_tell(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::tell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::tell",1,"DSP::WavReader< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_double_t,0))){
    SWIG_fail_ptr("WavReader_tell",1,SWIGTYPE_p_DSP__WavReaderT_double_t);
  }
  
  result = ((DSP::WavReader< SampleType > const *)arg1)->tell();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavReader_seek(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) 0 ;
  size_t arg2 ;
  DSP::seek_origin arg3 ;
  DSP::seek_origin *argp3 ;
  bool result;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::seek",1,"DSP::WavReader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::WavReader< SampleType >::seek",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::WavReader< SampleType >::seek",3,"DSP::seek_origin");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_double_t,0))){
    SWIG_fail_ptr("WavReader_seek",1,SWIGTYPE_p_DSP__WavReaderT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__seek_origin,0))){
    SWIG_fail_ptr("WavReader_seek",3,SWIGTYPE_p_kfr__seek_origin);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->seek(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavReader_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::format",1,"DSP::WavReader< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_double_t,0))){
    SWIG_fail_ptr("WavReader_format",1,SWIGTYPE_p_DSP__WavReaderT_double_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WavReader(void *obj) {
DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_WavReader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WavReader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WavReader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WavReader_methods[]= {
    { "read", _wrap_WavReader_read},
    { "tell", _wrap_WavReader_tell},
    { "seek", _wrap_WavReader_seek},
    { "format", _wrap_WavReader_format},
    {0,0}
};
static swig_lua_method swig_WavReader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WavReader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WavReader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WavReader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WavReader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WavReader_Sf_SwigStatic = {
    "WavReader",
    swig_WavReader_Sf_SwigStatic_methods,
    swig_WavReader_Sf_SwigStatic_attributes,
    swig_WavReader_Sf_SwigStatic_constants,
    swig_WavReader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WavReader_bases[] = {0};
static const char *swig_WavReader_base_names[] = {0};
static swig_lua_class _wrap_class_WavReader = { "WavReader", "WavReader", &SWIGTYPE_p_DSP__WavReaderT_double_t,_proxy__wrap_new_WavReader, swig_delete_WavReader, swig_WavReader_methods, swig_WavReader_attributes, &swig_WavReader_Sf_SwigStatic, swig_WavReader_meta, swig_WavReader_bases, swig_WavReader_base_names };

static int _wrap_WavWriter_writer_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< SampleType > *arg1 = (DSP::WavWriter< SampleType > *) 0 ;
  kfr::audio_writer_wav< double > *arg2 = (kfr::audio_writer_wav< double > *) 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< SampleType >::writer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< SampleType >::writer",1,"DSP::WavWriter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::WavWriter< SampleType >::writer",2,"kfr::audio_writer_wav< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_double_t,0))){
    SWIG_fail_ptr("WavWriter_writer_set",1,SWIGTYPE_p_DSP__WavWriterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_writer_wavT_double_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("WavWriter_writer_set",2,SWIGTYPE_p_kfr__audio_writer_wavT_double_t);
  }
  
  if (arg1) (arg1)->writer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavWriter_writer_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< SampleType > *arg1 = (DSP::WavWriter< SampleType > *) 0 ;
  kfr::audio_writer_wav< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< SampleType >::writer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< SampleType >::writer",1,"DSP::WavWriter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_double_t,0))){
    SWIG_fail_ptr("WavWriter_writer_get",1,SWIGTYPE_p_DSP__WavWriterT_double_t);
  }
  
  result = (kfr::audio_writer_wav< double > *) ((arg1)->writer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_writer_wavT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WavWriter(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::audio_format *arg2 = 0 ;
  DSP::WavWriter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< SampleType >::WavWriter",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::WavWriter< SampleType >::WavWriter",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::WavWriter< SampleType >::WavWriter",2,"DSP::audio_format const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_format_and_length,0))){
    SWIG_fail_ptr("new_WavWriter",2,SWIGTYPE_p_kfr__audio_format_and_length);
  }
  
  result = (DSP::WavWriter< SampleType > *)new DSP::WavWriter< SampleType >((char const *)arg1,(DSP::audio_format const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__WavWriterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavWriter_write(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< SampleType > *arg1 = (DSP::WavWriter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< SampleType >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< SampleType >::write",1,"DSP::WavWriter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::WavWriter< SampleType >::write",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_double_t,0))){
    SWIG_fail_ptr("WavWriter_write",1,SWIGTYPE_p_DSP__WavWriterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("WavWriter_write",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->write(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WavWriter_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< SampleType > *arg1 = (DSP::WavWriter< SampleType > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< SampleType >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< SampleType >::format",1,"DSP::WavWriter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_double_t,0))){
    SWIG_fail_ptr("WavWriter_format",1,SWIGTYPE_p_DSP__WavWriterT_double_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WavWriter(void *obj) {
DSP::WavWriter< SampleType > *arg1 = (DSP::WavWriter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_WavWriter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WavWriter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WavWriter_attributes[] = {
    { "writer", _wrap_WavWriter_writer_get, _wrap_WavWriter_writer_set },
    {0,0,0}
};
static swig_lua_method swig_WavWriter_methods[]= {
    { "write", _wrap_WavWriter_write},
    { "format", _wrap_WavWriter_format},
    {0,0}
};
static swig_lua_method swig_WavWriter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WavWriter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WavWriter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WavWriter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WavWriter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WavWriter_Sf_SwigStatic = {
    "WavWriter",
    swig_WavWriter_Sf_SwigStatic_methods,
    swig_WavWriter_Sf_SwigStatic_attributes,
    swig_WavWriter_Sf_SwigStatic_constants,
    swig_WavWriter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WavWriter_bases[] = {0};
static const char *swig_WavWriter_base_names[] = {0};
static swig_lua_class _wrap_class_WavWriter = { "WavWriter", "WavWriter", &SWIGTYPE_p_DSP__WavWriterT_double_t,_proxy__wrap_new_WavWriter, swig_delete_WavWriter, swig_WavWriter_methods, swig_WavWriter_attributes, &swig_WavWriter_Sf_SwigStatic, swig_WavWriter_meta, swig_WavWriter_bases, swig_WavWriter_base_names };

static int _wrap_Mp3Reader_reader_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  kfr::audio_reader_mp3< double > *arg2 = (kfr::audio_reader_mp3< double > *) 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::reader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::reader",1,"DSP::MP3Reader< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::reader",2,"kfr::audio_reader_mp3< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_double_t,0))){
    SWIG_fail_ptr("Mp3Reader_reader_set",1,SWIGTYPE_p_DSP__MP3ReaderT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_reader_mp3T_double_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Mp3Reader_reader_set",2,SWIGTYPE_p_kfr__audio_reader_mp3T_double_t);
  }
  
  if (arg1) (arg1)->reader = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mp3Reader_reader_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  kfr::audio_reader_mp3< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::reader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::reader",1,"DSP::MP3Reader< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_double_t,0))){
    SWIG_fail_ptr("Mp3Reader_reader_get",1,SWIGTYPE_p_DSP__MP3ReaderT_double_t);
  }
  
  result = (kfr::audio_reader_mp3< double > *) ((arg1)->reader);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_reader_mp3T_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Mp3Reader(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::MP3Reader< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::MP3Reader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::MP3Reader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (DSP::MP3Reader< SampleType > *)new DSP::MP3Reader< SampleType >((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__MP3ReaderT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mp3Reader_read(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::read",1,"DSP::MP3Reader< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::read",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_double_t,0))){
    SWIG_fail_ptr("Mp3Reader_read",1,SWIGTYPE_p_DSP__MP3ReaderT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Mp3Reader_read",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (arg1)->read(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mp3Reader_tell(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::tell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::tell",1,"DSP::MP3Reader< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_double_t,0))){
    SWIG_fail_ptr("Mp3Reader_tell",1,SWIGTYPE_p_DSP__MP3ReaderT_double_t);
  }
  
  result = ((DSP::MP3Reader< SampleType > const *)arg1)->tell();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mp3Reader_seek(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  size_t arg2 ;
  DSP::seek_origin arg3 ;
  DSP::seek_origin *argp3 ;
  bool result;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::seek",1,"DSP::MP3Reader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::seek",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::seek",3,"DSP::seek_origin");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_double_t,0))){
    SWIG_fail_ptr("Mp3Reader_seek",1,SWIGTYPE_p_DSP__MP3ReaderT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__seek_origin,0))){
    SWIG_fail_ptr("Mp3Reader_seek",3,SWIGTYPE_p_kfr__seek_origin);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->seek(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mp3Reader_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::format",1,"DSP::MP3Reader< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_double_t,0))){
    SWIG_fail_ptr("Mp3Reader_format",1,SWIGTYPE_p_DSP__MP3ReaderT_double_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Mp3Reader(void *obj) {
DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Mp3Reader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Mp3Reader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Mp3Reader_attributes[] = {
    { "reader", _wrap_Mp3Reader_reader_get, _wrap_Mp3Reader_reader_set },
    {0,0,0}
};
static swig_lua_method swig_Mp3Reader_methods[]= {
    { "read", _wrap_Mp3Reader_read},
    { "tell", _wrap_Mp3Reader_tell},
    { "seek", _wrap_Mp3Reader_seek},
    { "format", _wrap_Mp3Reader_format},
    {0,0}
};
static swig_lua_method swig_Mp3Reader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Mp3Reader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Mp3Reader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Mp3Reader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Mp3Reader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Mp3Reader_Sf_SwigStatic = {
    "Mp3Reader",
    swig_Mp3Reader_Sf_SwigStatic_methods,
    swig_Mp3Reader_Sf_SwigStatic_attributes,
    swig_Mp3Reader_Sf_SwigStatic_constants,
    swig_Mp3Reader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Mp3Reader_bases[] = {0};
static const char *swig_Mp3Reader_base_names[] = {0};
static swig_lua_class _wrap_class_Mp3Reader = { "Mp3Reader", "Mp3Reader", &SWIGTYPE_p_DSP__MP3ReaderT_double_t,_proxy__wrap_new_Mp3Reader, swig_delete_Mp3Reader, swig_Mp3Reader_methods, swig_Mp3Reader_attributes, &swig_Mp3Reader_Sf_SwigStatic, swig_Mp3Reader_meta, swig_Mp3Reader_bases, swig_Mp3Reader_base_names };

static int _wrap_FlacReader_reader_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  kfr::audio_reader_flac< double > *arg2 = (kfr::audio_reader_flac< double > *) 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::reader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::reader",1,"DSP::FlacReader< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FlacReader< SampleType >::reader",2,"kfr::audio_reader_flac< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_double_t,0))){
    SWIG_fail_ptr("FlacReader_reader_set",1,SWIGTYPE_p_DSP__FlacReaderT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_reader_flacT_double_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FlacReader_reader_set",2,SWIGTYPE_p_kfr__audio_reader_flacT_double_t);
  }
  
  if (arg1) (arg1)->reader = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FlacReader_reader_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  kfr::audio_reader_flac< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::reader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::reader",1,"DSP::FlacReader< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_double_t,0))){
    SWIG_fail_ptr("FlacReader_reader_get",1,SWIGTYPE_p_DSP__FlacReaderT_double_t);
  }
  
  result = (kfr::audio_reader_flac< double > *) ((arg1)->reader);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_reader_flacT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FlacReader(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::FlacReader< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::FlacReader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::FlacReader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (DSP::FlacReader< SampleType > *)new DSP::FlacReader< SampleType >((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FlacReaderT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FlacReader_read(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::read",1,"DSP::FlacReader< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FlacReader< SampleType >::read",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_double_t,0))){
    SWIG_fail_ptr("FlacReader_read",1,SWIGTYPE_p_DSP__FlacReaderT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FlacReader_read",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (arg1)->read(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FlacReader_tell(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::tell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::tell",1,"DSP::FlacReader< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_double_t,0))){
    SWIG_fail_ptr("FlacReader_tell",1,SWIGTYPE_p_DSP__FlacReaderT_double_t);
  }
  
  result = ((DSP::FlacReader< SampleType > const *)arg1)->tell();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FlacReader_seek(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  size_t arg2 ;
  DSP::seek_origin arg3 ;
  DSP::seek_origin *argp3 ;
  bool result;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::seek",1,"DSP::FlacReader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FlacReader< SampleType >::seek",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FlacReader< SampleType >::seek",3,"DSP::seek_origin");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_double_t,0))){
    SWIG_fail_ptr("FlacReader_seek",1,SWIGTYPE_p_DSP__FlacReaderT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__seek_origin,0))){
    SWIG_fail_ptr("FlacReader_seek",3,SWIGTYPE_p_kfr__seek_origin);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->seek(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FlacReader_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::format",1,"DSP::FlacReader< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_double_t,0))){
    SWIG_fail_ptr("FlacReader_format",1,SWIGTYPE_p_DSP__FlacReaderT_double_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FlacReader(void *obj) {
DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FlacReader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FlacReader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FlacReader_attributes[] = {
    { "reader", _wrap_FlacReader_reader_get, _wrap_FlacReader_reader_set },
    {0,0,0}
};
static swig_lua_method swig_FlacReader_methods[]= {
    { "read", _wrap_FlacReader_read},
    { "tell", _wrap_FlacReader_tell},
    { "seek", _wrap_FlacReader_seek},
    { "format", _wrap_FlacReader_format},
    {0,0}
};
static swig_lua_method swig_FlacReader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FlacReader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FlacReader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FlacReader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FlacReader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FlacReader_Sf_SwigStatic = {
    "FlacReader",
    swig_FlacReader_Sf_SwigStatic_methods,
    swig_FlacReader_Sf_SwigStatic_attributes,
    swig_FlacReader_Sf_SwigStatic_constants,
    swig_FlacReader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FlacReader_bases[] = {0};
static const char *swig_FlacReader_base_names[] = {0};
static swig_lua_class _wrap_class_FlacReader = { "FlacReader", "FlacReader", &SWIGTYPE_p_DSP__FlacReaderT_double_t,_proxy__wrap_new_FlacReader, swig_delete_FlacReader, swig_FlacReader_methods, swig_FlacReader_attributes, &swig_FlacReader_Sf_SwigStatic, swig_FlacReader_meta, swig_FlacReader_bases, swig_FlacReader_base_names };

static int _wrap_random__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::random< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::random< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR random< SampleType >(arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::random< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::random< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::random< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::random< SampleType >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR random< SampleType >(arg1,arg2,arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_random__SWIG_2(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_random__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::random< SampleType >(size_t)\n"
    "    DSP::random< SampleType >(size_t,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_plot_save__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::plot_save< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_save< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::plot_save< SampleType >",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::plot_save< SampleType >",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("plot_save",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("plot_save",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("plot_save",3,SWIGTYPE_p_std__string);
  }
  
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_save< SampleType >((DSP::SampleVector< double > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_save__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::plot_save< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_save< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::plot_save< SampleType >",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("plot_save",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("plot_save",2,SWIGTYPE_p_std__string);
  }
  
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_save< SampleType >((DSP::SampleVector< double > const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_save__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  
  SWIG_check_num_args("DSP::plot_save< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_save< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("plot_save",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_save< SampleType >((DSP::SampleVector< double > const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_save(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_plot_save__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_plot_save__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_plot_save__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'plot_save'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::plot_save< SampleType >(DSP::SampleVector< double > const &,std::string const &,std::string const &)\n"
    "    DSP::plot_save< SampleType >(DSP::SampleVector< double > const &,std::string const &)\n"
    "    DSP::plot_save< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_plot_show__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::plot_show< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_show< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::plot_show< SampleType >",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::plot_show< SampleType >",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("plot_show",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("plot_show",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("plot_show",3,SWIGTYPE_p_std__string);
  }
  
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_show< SampleType >((DSP::SampleVector< double > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_show__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::plot_show< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_show< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::plot_show< SampleType >",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("plot_show",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("plot_show",2,SWIGTYPE_p_std__string);
  }
  
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_show< SampleType >((DSP::SampleVector< double > const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_show__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  
  SWIG_check_num_args("DSP::plot_show< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_show< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("plot_show",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_show< SampleType >((DSP::SampleVector< double > const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_show(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_plot_show__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_plot_show__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_plot_show__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'plot_show'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::plot_show< SampleType >(DSP::SampleVector< double > const &,std::string const &,std::string const &)\n"
    "    DSP::plot_show< SampleType >(DSP::SampleVector< double > const &,std::string const &)\n"
    "    DSP::plot_show< SampleType >(DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sinewave__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::sinewave< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sinewave< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::sinewave< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::sinewave< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::sinewave< SampleType >",4,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinewave< SampleType >(arg1,arg2,arg3,arg4);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinewave__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::sinewave< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sinewave< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::sinewave< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::sinewave< SampleType >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinewave< SampleType >(arg1,arg2,arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinewave(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sinewave__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_sinewave__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sinewave'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sinewave< SampleType >(size_t,double,double,double)\n"
    "    DSP::sinewave< SampleType >(size_t,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_squarewave__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::squarewave< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::squarewave< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::squarewave< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::squarewave< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::squarewave< SampleType >",4,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR squarewave< SampleType >(arg1,arg2,arg3,arg4);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squarewave__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::squarewave< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::squarewave< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::squarewave< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::squarewave< SampleType >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR squarewave< SampleType >(arg1,arg2,arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squarewave(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_squarewave__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_squarewave__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'squarewave'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::squarewave< SampleType >(size_t,double,double,double)\n"
    "    DSP::squarewave< SampleType >(size_t,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_trianglewave__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::trianglewave< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::trianglewave< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::trianglewave< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::trianglewave< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::trianglewave< SampleType >",4,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR trianglewave< SampleType >(arg1,arg2,arg3,arg4);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_trianglewave__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::trianglewave< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::trianglewave< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::trianglewave< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::trianglewave< SampleType >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR trianglewave< SampleType >(arg1,arg2,arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_trianglewave(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_trianglewave__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_trianglewave__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'trianglewave'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::trianglewave< SampleType >(size_t,double,double,double)\n"
    "    DSP::trianglewave< SampleType >(size_t,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_sawtoothwave__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::sawtoothwave< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",4,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sawtoothwave< SampleType >(arg1,arg2,arg3,arg4);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sawtoothwave__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::sawtoothwave< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sawtoothwave< SampleType >(arg1,arg2,arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sawtoothwave(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sawtoothwave__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_sawtoothwave__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sawtoothwave'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sawtoothwave< SampleType >(size_t,double,double,double)\n"
    "    DSP::sawtoothwave< SampleType >(size_t,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_generate_sine(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::generate_sin< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_sin< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_sin< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_sin< SampleType >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_sin< SampleType >(arg1,arg2,arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_linear(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::generate_linear< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_linear< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_linear< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_linear< SampleType >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_linear< SampleType >(arg1,arg2,arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_exp(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::generate_exp< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_exp< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_exp< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_exp< SampleType >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_exp< SampleType >(arg1,arg2,arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_exp2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::generate_exp2< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_exp2< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_exp2< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_exp2< SampleType >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_exp2< SampleType >(arg1,arg2,arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_cossin(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::generate_cossin< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_cossin< SampleType >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_cossin< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_cossin< SampleType >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_cossin< SampleType >(arg1,arg2,arg3);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_autocorrelate(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::autocorrelate< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::autocorrelate< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("autocorrelate",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR autocorrelate< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_correlate(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::correlate< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::correlate< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::correlate< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("correlate",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("correlate",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR correlate< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DCTPlan(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::DCTPlan< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::DCTPlan< SampleType >::DCTPlan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::DCTPlan",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::DCTPlan< SampleType > *)new DSP::DCTPlan< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__DCTPlanT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCTPlan_execute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DCTPlan< SampleType > *arg1 = (DSP::DCTPlan< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("DSP::DCTPlan< SampleType >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",1,"DSP::DCTPlan< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",2,"DSP::SampleVector< double > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",3,"DSP::SampleVector< double > const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DCTPlanT_double_t,0))){
    SWIG_fail_ptr("DCTPlan_execute",1,SWIGTYPE_p_DSP__DCTPlanT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("DCTPlan_execute",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("DCTPlan_execute",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->execute(*arg2,(DSP::SampleVector< double > const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCTPlan_execute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DCTPlan< SampleType > *arg1 = (DSP::DCTPlan< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::DCTPlan< SampleType >::execute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",1,"DSP::DCTPlan< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",2,"DSP::SampleVector< double > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DCTPlanT_double_t,0))){
    SWIG_fail_ptr("DCTPlan_execute",1,SWIGTYPE_p_DSP__DCTPlanT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("DCTPlan_execute",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("DCTPlan_execute",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->execute(*arg2,(DSP::SampleVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCTPlan_execute(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__DCTPlanT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DCTPlan_execute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__DCTPlanT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_DCTPlan_execute__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DCTPlan_execute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::DCTPlan< SampleType >::execute(DSP::SampleVector< double > &,DSP::SampleVector< double > const &,bool)\n"
    "    DSP::DCTPlan< SampleType >::execute(DSP::SampleVector< double > &,DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_DCTPlan(void *obj) {
DSP::DCTPlan< SampleType > *arg1 = (DSP::DCTPlan< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DCTPlan(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DCTPlan);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DCTPlan_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DCTPlan_methods[]= {
    { "execute", _wrap_DCTPlan_execute},
    {0,0}
};
static swig_lua_method swig_DCTPlan_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DCTPlan_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DCTPlan_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DCTPlan_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DCTPlan_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DCTPlan_Sf_SwigStatic = {
    "DCTPlan",
    swig_DCTPlan_Sf_SwigStatic_methods,
    swig_DCTPlan_Sf_SwigStatic_attributes,
    swig_DCTPlan_Sf_SwigStatic_constants,
    swig_DCTPlan_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DCTPlan_bases[] = {0};
static const char *swig_DCTPlan_base_names[] = {0};
static swig_lua_class _wrap_class_DCTPlan = { "DCTPlan", "DCTPlan", &SWIGTYPE_p_DSP__DCTPlanT_double_t,_proxy__wrap_new_DCTPlan, swig_delete_DCTPlan, swig_DCTPlan_methods, swig_DCTPlan_attributes, &swig_DCTPlan_Sf_SwigStatic, swig_DCTPlan_meta, swig_DCTPlan_bases, swig_DCTPlan_base_names };

static int _wrap_new_DFTPlan(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::DFTPlan< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::DFTPlan< SampleType >::DFTPlan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::DFTPlan",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::DFTPlan< SampleType > *)new DSP::DFTPlan< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__DFTPlanT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTPlan_dump(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTPlan< SampleType > *arg1 = (DSP::DFTPlan< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::DFTPlan< SampleType >::dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::dump",1,"DSP::DFTPlan< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTPlanT_double_t,0))){
    SWIG_fail_ptr("DFTPlan_dump",1,SWIGTYPE_p_DSP__DFTPlanT_double_t);
  }
  
  ((DSP::DFTPlan< SampleType > const *)arg1)->dump();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTPlan_execute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTPlan< SampleType > *arg1 = (DSP::DFTPlan< SampleType > *) 0 ;
  DSP::SampleVector< kfr::complex< double > > *arg2 = 0 ;
  DSP::SampleVector< kfr::complex< double > > *arg3 = 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("DSP::DFTPlan< SampleType >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",1,"DSP::DFTPlan< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",2,"DSP::SampleVector< kfr::complex< double > > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",3,"DSP::SampleVector< kfr::complex< double > > const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTPlanT_double_t,0))){
    SWIG_fail_ptr("DFTPlan_execute",1,SWIGTYPE_p_DSP__DFTPlanT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DFTPlan_execute",2,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DFTPlan_execute",3,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->execute(*arg2,(DSP::SampleVector< kfr::complex< double > > const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTPlan_execute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTPlan< SampleType > *arg1 = (DSP::DFTPlan< SampleType > *) 0 ;
  DSP::SampleVector< kfr::complex< double > > *arg2 = 0 ;
  DSP::SampleVector< kfr::complex< double > > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::DFTPlan< SampleType >::execute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",1,"DSP::DFTPlan< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",2,"DSP::SampleVector< kfr::complex< double > > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",3,"DSP::SampleVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTPlanT_double_t,0))){
    SWIG_fail_ptr("DFTPlan_execute",1,SWIGTYPE_p_DSP__DFTPlanT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DFTPlan_execute",2,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DFTPlan_execute",3,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t);
  }
  
  (arg1)->execute(*arg2,(DSP::SampleVector< kfr::complex< double > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTPlan_execute(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__DFTPlanT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DFTPlan_execute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__DFTPlanT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_DFTPlan_execute__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DFTPlan_execute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::DFTPlan< SampleType >::execute(DSP::SampleVector< kfr::complex< double > > &,DSP::SampleVector< kfr::complex< double > > const &,bool)\n"
    "    DSP::DFTPlan< SampleType >::execute(DSP::SampleVector< kfr::complex< double > > &,DSP::SampleVector< kfr::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_DFTPlan(void *obj) {
DSP::DFTPlan< SampleType > *arg1 = (DSP::DFTPlan< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DFTPlan(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DFTPlan);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DFTPlan_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DFTPlan_methods[]= {
    { "dump", _wrap_DFTPlan_dump},
    { "execute", _wrap_DFTPlan_execute},
    {0,0}
};
static swig_lua_method swig_DFTPlan_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DFTPlan_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DFTPlan_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DFTPlan_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DFTPlan_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DFTPlan_Sf_SwigStatic = {
    "DFTPlan",
    swig_DFTPlan_Sf_SwigStatic_methods,
    swig_DFTPlan_Sf_SwigStatic_attributes,
    swig_DFTPlan_Sf_SwigStatic_constants,
    swig_DFTPlan_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DFTPlan_bases[] = {0};
static const char *swig_DFTPlan_base_names[] = {0};
static swig_lua_class _wrap_class_DFTPlan = { "DFTPlan", "DFTPlan", &SWIGTYPE_p_DSP__DFTPlanT_double_t,_proxy__wrap_new_DFTPlan, swig_delete_DFTPlan, swig_DFTPlan_methods, swig_DFTPlan_attributes, &swig_DFTPlan_Sf_SwigStatic, swig_DFTPlan_meta, swig_DFTPlan_bases, swig_DFTPlan_base_names };

static int _wrap_new_DFTRealPlan(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::DFTRealPlan< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::DFTRealPlan< SampleType >::DFTRealPlan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::DFTRealPlan",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::DFTRealPlan< SampleType > *)new DSP::DFTRealPlan< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__DFTRealPlanT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTRealPlan_dump(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTRealPlan< SampleType > *arg1 = (DSP::DFTRealPlan< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::DFTRealPlan< SampleType >::dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::dump",1,"DSP::DFTRealPlan< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTRealPlanT_double_t,0))){
    SWIG_fail_ptr("DFTRealPlan_dump",1,SWIGTYPE_p_DSP__DFTRealPlanT_double_t);
  }
  
  ((DSP::DFTRealPlan< SampleType > const *)arg1)->dump();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTRealPlan_execute_forward(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTRealPlan< SampleType > *arg1 = (DSP::DFTRealPlan< SampleType > *) 0 ;
  DSP::SampleVector< kfr::complex< double > > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::DFTRealPlan< SampleType >::execute_forward",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::execute_forward",1,"DSP::DFTRealPlan< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::execute_forward",2,"DSP::SampleVector< kfr::complex< double > > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::execute_forward",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTRealPlanT_double_t,0))){
    SWIG_fail_ptr("DFTRealPlan_execute_forward",1,SWIGTYPE_p_DSP__DFTRealPlanT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DFTRealPlan_execute_forward",2,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("DFTRealPlan_execute_forward",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->execute_forward(*arg2,(DSP::SampleVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTRealPlan_execute_reverse(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTRealPlan< SampleType > *arg1 = (DSP::DFTRealPlan< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< kfr::complex< double > > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::DFTRealPlan< SampleType >::execute_reverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::execute_reverse",1,"DSP::DFTRealPlan< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::execute_reverse",2,"DSP::SampleVector< double > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::execute_reverse",3,"DSP::SampleVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTRealPlanT_double_t,0))){
    SWIG_fail_ptr("DFTRealPlan_execute_reverse",1,SWIGTYPE_p_DSP__DFTRealPlanT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("DFTRealPlan_execute_reverse",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DFTRealPlan_execute_reverse",3,SWIGTYPE_p_DSP__SampleVectorT_kfr__complexT_double_t_t);
  }
  
  (arg1)->execute_reverse(*arg2,(DSP::SampleVector< kfr::complex< double > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DFTRealPlan(void *obj) {
DSP::DFTRealPlan< SampleType > *arg1 = (DSP::DFTRealPlan< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DFTRealPlan(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DFTRealPlan);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DFTRealPlan_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DFTRealPlan_methods[]= {
    { "dump", _wrap_DFTRealPlan_dump},
    { "execute_forward", _wrap_DFTRealPlan_execute_forward},
    { "execute_reverse", _wrap_DFTRealPlan_execute_reverse},
    {0,0}
};
static swig_lua_method swig_DFTRealPlan_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DFTRealPlan_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DFTRealPlan_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DFTRealPlan_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DFTRealPlan_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DFTRealPlan_Sf_SwigStatic = {
    "DFTRealPlan",
    swig_DFTRealPlan_Sf_SwigStatic_methods,
    swig_DFTRealPlan_Sf_SwigStatic_attributes,
    swig_DFTRealPlan_Sf_SwigStatic_constants,
    swig_DFTRealPlan_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DFTRealPlan_bases[] = {0};
static const char *swig_DFTRealPlan_base_names[] = {0};
static swig_lua_class _wrap_class_DFTRealPlan = { "DFTRealPlan", "DFTRealPlan", &SWIGTYPE_p_DSP__DFTRealPlanT_double_t,_proxy__wrap_new_DFTRealPlan, swig_delete_DFTRealPlan, swig_DFTRealPlan_methods, swig_DFTRealPlan_attributes, &swig_DFTRealPlan_Sf_SwigStatic, swig_DFTRealPlan_meta, swig_DFTRealPlan_bases, swig_DFTRealPlan_base_names };

static int _wrap_resample(lua_State* L) {
  int SWIG_arg = 0;
  sample_rate_conversion_quality arg1 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  sample_rate_conversion_quality *argp1 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::resample< SampleType >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::resample< SampleType >",1,"sample_rate_conversion_quality");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::resample< SampleType >",2,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::resample< SampleType >",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::resample< SampleType >",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_sample_rate_conversion_quality,0))){
    SWIG_fail_ptr("resample",1,SWIGTYPE_p_sample_rate_conversion_quality);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("resample",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR resample< SampleType >(arg1,(DSP::SampleVector< double > const &)*arg2,arg3,arg4);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convert_sample(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::convert_sample< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::convert_sample< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("convert_sample",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR convert_sample< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_amp_to_dB(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::amp_to_dB< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::amp_to_dB< SampleType >",1,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("amp_to_dB",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR amp_to_dB< SampleType >((DSP::SampleVector< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FIRFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::FIRFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::FIRFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::FIRFilter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::FIRFilter< SampleType > *)new DSP::FIRFilter< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilter_bandpass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::expression_pointer< double > *arg4 = 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::bandpass",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",4,"kfr::expression_pointer< double > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_bandpass",1,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_bandpass",4,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->bandpass(arg2,arg3,*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilter_bandpass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::expression_pointer< double > *arg4 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",4,"kfr::expression_pointer< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_bandpass",1,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_bandpass",4,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  (arg1)->bandpass(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilter_bandpass(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FIRFilter_bandpass__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FIRFilter_bandpass__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FIRFilter_bandpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< SampleType >::bandpass(double,double,kfr::expression_pointer< double > &,bool)\n"
    "    DSP::FIRFilter< SampleType >::bandpass(double,double,kfr::expression_pointer< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FIRFilter_bandstop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::expression_pointer< double > *arg4 = 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::bandstop",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",4,"kfr::expression_pointer< double > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_bandstop",1,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_bandstop",4,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->bandstop(arg2,arg3,*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilter_bandstop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::expression_pointer< double > *arg4 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",4,"kfr::expression_pointer< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_bandstop",1,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_bandstop",4,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  (arg1)->bandstop(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilter_bandstop(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FIRFilter_bandstop__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FIRFilter_bandstop__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FIRFilter_bandstop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< SampleType >::bandstop(double,double,kfr::expression_pointer< double > &,bool)\n"
    "    DSP::FIRFilter< SampleType >::bandstop(double,double,kfr::expression_pointer< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FIRFilter_highpass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  double arg2 ;
  kfr::expression_pointer< double > *arg3 = 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::highpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",3,"kfr::expression_pointer< double > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_highpass",1,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_highpass",3,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->highpass(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilter_highpass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  double arg2 ;
  kfr::expression_pointer< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",3,"kfr::expression_pointer< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_highpass",1,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_highpass",3,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  (arg1)->highpass(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilter_highpass(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FIRFilter_highpass__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FIRFilter_highpass__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FIRFilter_highpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< SampleType >::highpass(double,kfr::expression_pointer< double > &,bool)\n"
    "    DSP::FIRFilter< SampleType >::highpass(double,kfr::expression_pointer< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FIRFilter_lowpass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  double arg2 ;
  kfr::expression_pointer< double > *arg3 = 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::lowpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",3,"kfr::expression_pointer< double > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_lowpass",1,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_lowpass",3,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->lowpass(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilter_lowpass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  double arg2 ;
  kfr::expression_pointer< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",3,"kfr::expression_pointer< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_lowpass",1,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_lowpass",3,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  (arg1)->lowpass(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilter_lowpass(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FIRFilter_lowpass__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FIRFilter_lowpass__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FIRFilter_lowpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< SampleType >::lowpass(double,kfr::expression_pointer< double > &,bool)\n"
    "    DSP::FIRFilter< SampleType >::lowpass(double,kfr::expression_pointer< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FIRFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::apply",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_apply",1,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::apply",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::apply",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_apply",1,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2,(DSP::SampleVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FIRFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FIRFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FIRFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::FIRFilter< SampleType >::apply(DSP::SampleVector< double > &,DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FIRFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::reset",1,"DSP::FIRFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_double_t,0))){
    SWIG_fail_ptr("FIRFilter_reset",1,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FIRFilter(void *obj) {
DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FIRFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FIRFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FIRFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FIRFilter_methods[]= {
    { "bandpass", _wrap_FIRFilter_bandpass},
    { "bandstop", _wrap_FIRFilter_bandstop},
    { "highpass", _wrap_FIRFilter_highpass},
    { "lowpass", _wrap_FIRFilter_lowpass},
    { "apply", _wrap_FIRFilter_apply},
    { "reset", _wrap_FIRFilter_reset},
    {0,0}
};
static swig_lua_method swig_FIRFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FIRFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FIRFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FIRFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FIRFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FIRFilter_Sf_SwigStatic = {
    "FIRFilter",
    swig_FIRFilter_Sf_SwigStatic_methods,
    swig_FIRFilter_Sf_SwigStatic_attributes,
    swig_FIRFilter_Sf_SwigStatic_constants,
    swig_FIRFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FIRFilter_bases[] = {0};
static const char *swig_FIRFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FIRFilter = { "FIRFilter", "FIRFilter", &SWIGTYPE_p_DSP__FIRFilterT_double_t,_proxy__wrap_new_FIRFilter, swig_delete_FIRFilter, swig_FIRFilter_methods, swig_FIRFilter_attributes, &swig_FIRFilter_Sf_SwigStatic, swig_FIRFilter_meta, swig_FIRFilter_bases, swig_FIRFilter_base_names };

static int _wrap_FIRBandpassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< SampleType > *arg1 = (DSP::FIRBandpassFilter< SampleType > *) 0 ;
  DSP::FIRFilter< double > *arg2 = (DSP::FIRFilter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::filter",1,"DSP::FIRBandpassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::filter",2,"DSP::FIRFilter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRBandpassFilter_filter_set",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__FIRFilterT_double_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FIRBandpassFilter_filter_set",2,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRBandpassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< SampleType > *arg1 = (DSP::FIRBandpassFilter< SampleType > *) 0 ;
  DSP::FIRFilter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::filter",1,"DSP::FIRBandpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRBandpassFilter_filter_get",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t);
  }
  
  result = (DSP::FIRFilter< double > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FIRBandpassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  kfr::expression_pointer< double > *arg4 = 0 ;
  bool arg5 ;
  DSP::FIRBandpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",4,"kfr::expression_pointer< double > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",5,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("new_FIRBandpassFilter",4,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (DSP::FIRBandpassFilter< SampleType > *)new DSP::FIRBandpassFilter< SampleType >(arg1,arg2,arg3,*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FIRBandpassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  kfr::expression_pointer< double > *arg4 = 0 ;
  DSP::FIRBandpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",4,"kfr::expression_pointer< double > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("new_FIRBandpassFilter",4,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  result = (DSP::FIRBandpassFilter< SampleType > *)new DSP::FIRBandpassFilter< SampleType >(arg1,arg2,arg3,*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FIRBandpassFilter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_FIRBandpassFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FIRBandpassFilter__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FIRBandpassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter(size_t,double,double,kfr::expression_pointer< double > &,bool)\n"
    "    DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter(size_t,double,double,kfr::expression_pointer< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FIRBandpassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< SampleType > *arg1 = (DSP::FIRBandpassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::apply",1,"DSP::FIRBandpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRBandpassFilter_apply",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRBandpassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRBandpassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< SampleType > *arg1 = (DSP::FIRBandpassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::apply",1,"DSP::FIRBandpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::apply",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRBandpassFilter_apply",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRBandpassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRBandpassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2,(DSP::SampleVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRBandpassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FIRBandpassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FIRBandpassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FIRBandpassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRBandpassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::FIRBandpassFilter< SampleType >::apply(DSP::SampleVector< double > &,DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FIRBandpassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< SampleType > *arg1 = (DSP::FIRBandpassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::reset",1,"DSP::FIRBandpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRBandpassFilter_reset",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FIRBandpassFilter(void *obj) {
DSP::FIRBandpassFilter< SampleType > *arg1 = (DSP::FIRBandpassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FIRBandpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FIRBandpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FIRBandpassFilter_attributes[] = {
    { "filter", _wrap_FIRBandpassFilter_filter_get, _wrap_FIRBandpassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FIRBandpassFilter_methods[]= {
    { "apply", _wrap_FIRBandpassFilter_apply},
    { "reset", _wrap_FIRBandpassFilter_reset},
    {0,0}
};
static swig_lua_method swig_FIRBandpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FIRBandpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FIRBandpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FIRBandpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FIRBandpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FIRBandpassFilter_Sf_SwigStatic = {
    "FIRBandpassFilter",
    swig_FIRBandpassFilter_Sf_SwigStatic_methods,
    swig_FIRBandpassFilter_Sf_SwigStatic_attributes,
    swig_FIRBandpassFilter_Sf_SwigStatic_constants,
    swig_FIRBandpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FIRBandpassFilter_bases[] = {0};
static const char *swig_FIRBandpassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FIRBandpassFilter = { "FIRBandpassFilter", "FIRBandpassFilter", &SWIGTYPE_p_DSP__FIRBandpassFilterT_double_t,_proxy__wrap_new_FIRBandpassFilter, swig_delete_FIRBandpassFilter, swig_FIRBandpassFilter_methods, swig_FIRBandpassFilter_attributes, &swig_FIRBandpassFilter_Sf_SwigStatic, swig_FIRBandpassFilter_meta, swig_FIRBandpassFilter_bases, swig_FIRBandpassFilter_base_names };

static int _wrap_FIRLowpassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< SampleType > *arg1 = (DSP::FIRLowpassFilter< SampleType > *) 0 ;
  DSP::FIRFilter< double > *arg2 = (DSP::FIRFilter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::filter",1,"DSP::FIRLowpassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::filter",2,"DSP::FIRFilter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRLowpassFilter_filter_set",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__FIRFilterT_double_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FIRLowpassFilter_filter_set",2,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRLowpassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< SampleType > *arg1 = (DSP::FIRLowpassFilter< SampleType > *) 0 ;
  DSP::FIRFilter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::filter",1,"DSP::FIRLowpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRLowpassFilter_filter_get",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t);
  }
  
  result = (DSP::FIRFilter< double > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FIRLowpassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  kfr::expression_pointer< double > *arg3 = 0 ;
  bool arg4 ;
  DSP::FIRLowpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",3,"kfr::expression_pointer< double > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",4,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("new_FIRLowpassFilter",3,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (DSP::FIRLowpassFilter< SampleType > *)new DSP::FIRLowpassFilter< SampleType >(arg1,arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FIRLowpassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  kfr::expression_pointer< double > *arg3 = 0 ;
  DSP::FIRLowpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",3,"kfr::expression_pointer< double > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("new_FIRLowpassFilter",3,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  result = (DSP::FIRLowpassFilter< SampleType > *)new DSP::FIRLowpassFilter< SampleType >(arg1,arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FIRLowpassFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_FIRLowpassFilter__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FIRLowpassFilter__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FIRLowpassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter(size_t,double,kfr::expression_pointer< double > &,bool)\n"
    "    DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter(size_t,double,kfr::expression_pointer< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FIRLowpassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< SampleType > *arg1 = (DSP::FIRLowpassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::apply",1,"DSP::FIRLowpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRLowpassFilter_apply",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRLowpassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRLowpassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< SampleType > *arg1 = (DSP::FIRLowpassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::apply",1,"DSP::FIRLowpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::apply",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRLowpassFilter_apply",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRLowpassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRLowpassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2,(DSP::SampleVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRLowpassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FIRLowpassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FIRLowpassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FIRLowpassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRLowpassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::FIRLowpassFilter< SampleType >::apply(DSP::SampleVector< double > &,DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FIRLowpassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< SampleType > *arg1 = (DSP::FIRLowpassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::reset",1,"DSP::FIRLowpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRLowpassFilter_reset",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FIRLowpassFilter(void *obj) {
DSP::FIRLowpassFilter< SampleType > *arg1 = (DSP::FIRLowpassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FIRLowpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FIRLowpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FIRLowpassFilter_attributes[] = {
    { "filter", _wrap_FIRLowpassFilter_filter_get, _wrap_FIRLowpassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FIRLowpassFilter_methods[]= {
    { "apply", _wrap_FIRLowpassFilter_apply},
    { "reset", _wrap_FIRLowpassFilter_reset},
    {0,0}
};
static swig_lua_method swig_FIRLowpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FIRLowpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FIRLowpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FIRLowpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FIRLowpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FIRLowpassFilter_Sf_SwigStatic = {
    "FIRLowpassFilter",
    swig_FIRLowpassFilter_Sf_SwigStatic_methods,
    swig_FIRLowpassFilter_Sf_SwigStatic_attributes,
    swig_FIRLowpassFilter_Sf_SwigStatic_constants,
    swig_FIRLowpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FIRLowpassFilter_bases[] = {0};
static const char *swig_FIRLowpassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FIRLowpassFilter = { "FIRLowpassFilter", "FIRLowpassFilter", &SWIGTYPE_p_DSP__FIRLowpassFilterT_double_t,_proxy__wrap_new_FIRLowpassFilter, swig_delete_FIRLowpassFilter, swig_FIRLowpassFilter_methods, swig_FIRLowpassFilter_attributes, &swig_FIRLowpassFilter_Sf_SwigStatic, swig_FIRLowpassFilter_meta, swig_FIRLowpassFilter_bases, swig_FIRLowpassFilter_base_names };

static int _wrap_FIRHighpassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< SampleType > *arg1 = (DSP::FIRHighpassFilter< SampleType > *) 0 ;
  DSP::FIRFilter< double > *arg2 = (DSP::FIRFilter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::filter",1,"DSP::FIRHighpassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::filter",2,"DSP::FIRFilter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRHighpassFilter_filter_set",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__FIRFilterT_double_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FIRHighpassFilter_filter_set",2,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRHighpassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< SampleType > *arg1 = (DSP::FIRHighpassFilter< SampleType > *) 0 ;
  DSP::FIRFilter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::filter",1,"DSP::FIRHighpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRHighpassFilter_filter_get",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t);
  }
  
  result = (DSP::FIRFilter< double > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FIRHighpassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  kfr::expression_pointer< double > *arg3 = 0 ;
  bool arg4 ;
  DSP::FIRHighpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",3,"kfr::expression_pointer< double > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",4,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("new_FIRHighpassFilter",3,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (DSP::FIRHighpassFilter< SampleType > *)new DSP::FIRHighpassFilter< SampleType >(arg1,arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FIRHighpassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  kfr::expression_pointer< double > *arg3 = 0 ;
  DSP::FIRHighpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",3,"kfr::expression_pointer< double > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("new_FIRHighpassFilter",3,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  result = (DSP::FIRHighpassFilter< SampleType > *)new DSP::FIRHighpassFilter< SampleType >(arg1,arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FIRHighpassFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_FIRHighpassFilter__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FIRHighpassFilter__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FIRHighpassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter(size_t,double,kfr::expression_pointer< double > &,bool)\n"
    "    DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter(size_t,double,kfr::expression_pointer< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FIRHighpassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< SampleType > *arg1 = (DSP::FIRHighpassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::apply",1,"DSP::FIRHighpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRHighpassFilter_apply",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRHighpassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRHighpassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< SampleType > *arg1 = (DSP::FIRHighpassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::apply",1,"DSP::FIRHighpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::apply",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRHighpassFilter_apply",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRHighpassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRHighpassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2,(DSP::SampleVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRHighpassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FIRHighpassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FIRHighpassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FIRHighpassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRHighpassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::FIRHighpassFilter< SampleType >::apply(DSP::SampleVector< double > &,DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FIRHighpassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< SampleType > *arg1 = (DSP::FIRHighpassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::reset",1,"DSP::FIRHighpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t,0))){
    SWIG_fail_ptr("FIRHighpassFilter_reset",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FIRHighpassFilter(void *obj) {
DSP::FIRHighpassFilter< SampleType > *arg1 = (DSP::FIRHighpassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FIRHighpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FIRHighpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FIRHighpassFilter_attributes[] = {
    { "filter", _wrap_FIRHighpassFilter_filter_get, _wrap_FIRHighpassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FIRHighpassFilter_methods[]= {
    { "apply", _wrap_FIRHighpassFilter_apply},
    { "reset", _wrap_FIRHighpassFilter_reset},
    {0,0}
};
static swig_lua_method swig_FIRHighpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FIRHighpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FIRHighpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FIRHighpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FIRHighpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FIRHighpassFilter_Sf_SwigStatic = {
    "FIRHighpassFilter",
    swig_FIRHighpassFilter_Sf_SwigStatic_methods,
    swig_FIRHighpassFilter_Sf_SwigStatic_attributes,
    swig_FIRHighpassFilter_Sf_SwigStatic_constants,
    swig_FIRHighpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FIRHighpassFilter_bases[] = {0};
static const char *swig_FIRHighpassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FIRHighpassFilter = { "FIRHighpassFilter", "FIRHighpassFilter", &SWIGTYPE_p_DSP__FIRHighpassFilterT_double_t,_proxy__wrap_new_FIRHighpassFilter, swig_delete_FIRHighpassFilter, swig_FIRHighpassFilter_methods, swig_FIRHighpassFilter_attributes, &swig_FIRHighpassFilter_Sf_SwigStatic, swig_FIRHighpassFilter_meta, swig_FIRHighpassFilter_bases, swig_FIRHighpassFilter_base_names };

static int _wrap_FIRBandstopFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< SampleType > *arg1 = (DSP::FIRBandstopFilter< SampleType > *) 0 ;
  DSP::FIRFilter< double > *arg2 = (DSP::FIRFilter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::filter",1,"DSP::FIRBandstopFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::filter",2,"DSP::FIRFilter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t,0))){
    SWIG_fail_ptr("FIRBandstopFilter_filter_set",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__FIRFilterT_double_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FIRBandstopFilter_filter_set",2,SWIGTYPE_p_DSP__FIRFilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRBandstopFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< SampleType > *arg1 = (DSP::FIRBandstopFilter< SampleType > *) 0 ;
  DSP::FIRFilter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::filter",1,"DSP::FIRBandstopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t,0))){
    SWIG_fail_ptr("FIRBandstopFilter_filter_get",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t);
  }
  
  result = (DSP::FIRFilter< double > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FIRBandstopFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  kfr::expression_pointer< double > *arg4 = 0 ;
  bool arg5 ;
  DSP::FIRBandstopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",4,"kfr::expression_pointer< double > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",5,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("new_FIRBandstopFilter",4,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (DSP::FIRBandstopFilter< SampleType > *)new DSP::FIRBandstopFilter< SampleType >(arg1,arg2,arg3,*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FIRBandstopFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  kfr::expression_pointer< double > *arg4 = 0 ;
  DSP::FIRBandstopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",4,"kfr::expression_pointer< double > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("new_FIRBandstopFilter",4,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  result = (DSP::FIRBandstopFilter< SampleType > *)new DSP::FIRBandstopFilter< SampleType >(arg1,arg2,arg3,*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FIRBandstopFilter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_FIRBandstopFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FIRBandstopFilter__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FIRBandstopFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter(size_t,double,double,kfr::expression_pointer< double > &,bool)\n"
    "    DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter(size_t,double,double,kfr::expression_pointer< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FIRBandstopFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< SampleType > *arg1 = (DSP::FIRBandstopFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::apply",1,"DSP::FIRBandstopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t,0))){
    SWIG_fail_ptr("FIRBandstopFilter_apply",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRBandstopFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRBandstopFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< SampleType > *arg1 = (DSP::FIRBandstopFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::apply",1,"DSP::FIRBandstopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::apply",3,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t,0))){
    SWIG_fail_ptr("FIRBandstopFilter_apply",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRBandstopFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("FIRBandstopFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2,(DSP::SampleVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRBandstopFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FIRBandstopFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FIRBandstopFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FIRBandstopFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRBandstopFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::FIRBandstopFilter< SampleType >::apply(DSP::SampleVector< double > &,DSP::SampleVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FIRBandstopFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< SampleType > *arg1 = (DSP::FIRBandstopFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::reset",1,"DSP::FIRBandstopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t,0))){
    SWIG_fail_ptr("FIRBandstopFilter_reset",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FIRBandstopFilter(void *obj) {
DSP::FIRBandstopFilter< SampleType > *arg1 = (DSP::FIRBandstopFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FIRBandstopFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FIRBandstopFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FIRBandstopFilter_attributes[] = {
    { "filter", _wrap_FIRBandstopFilter_filter_get, _wrap_FIRBandstopFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FIRBandstopFilter_methods[]= {
    { "apply", _wrap_FIRBandstopFilter_apply},
    { "reset", _wrap_FIRBandstopFilter_reset},
    {0,0}
};
static swig_lua_method swig_FIRBandstopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FIRBandstopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FIRBandstopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FIRBandstopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FIRBandstopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FIRBandstopFilter_Sf_SwigStatic = {
    "FIRBandstopFilter",
    swig_FIRBandstopFilter_Sf_SwigStatic_methods,
    swig_FIRBandstopFilter_Sf_SwigStatic_attributes,
    swig_FIRBandstopFilter_Sf_SwigStatic_constants,
    swig_FIRBandstopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FIRBandstopFilter_bases[] = {0};
static const char *swig_FIRBandstopFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FIRBandstopFilter = { "FIRBandstopFilter", "FIRBandstopFilter", &SWIGTYPE_p_DSP__FIRBandstopFilterT_double_t,_proxy__wrap_new_FIRBandstopFilter, swig_delete_FIRBandstopFilter, swig_FIRBandstopFilter_methods, swig_FIRBandstopFilter_attributes, &swig_FIRBandstopFilter_Sf_SwigStatic, swig_FIRBandstopFilter_meta, swig_FIRBandstopFilter_bases, swig_FIRBandstopFilter_base_names };

static int _wrap_fir_lowpass__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  kfr::expression_pointer< double > *arg4 = 0 ;
  bool arg5 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::fir_lowpass< SampleType >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",4,"kfr::expression_pointer< double > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fir_lowpass",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("fir_lowpass",4,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_lowpass< SampleType >((DSP::SampleVector< double > const &)*arg1,arg2,arg3,*arg4,arg5);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_lowpass__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  kfr::expression_pointer< double > *arg4 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::fir_lowpass< SampleType >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",4,"kfr::expression_pointer< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fir_lowpass",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("fir_lowpass",4,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_lowpass< SampleType >((DSP::SampleVector< double > const &)*arg1,arg2,arg3,*arg4);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_lowpass(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_fir_lowpass__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_fir_lowpass__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_lowpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::fir_lowpass< SampleType >(DSP::SampleVector< double > const &,size_t,double,kfr::expression_pointer< double > &,bool)\n"
    "    DSP::fir_lowpass< SampleType >(DSP::SampleVector< double > const &,size_t,double,kfr::expression_pointer< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_highpass__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  kfr::expression_pointer< double > *arg4 = 0 ;
  bool arg5 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::fir_highpass< SampleType >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",4,"kfr::expression_pointer< double > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fir_highpass",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("fir_highpass",4,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_highpass< SampleType >((DSP::SampleVector< double > const &)*arg1,arg2,arg3,*arg4,arg5);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_highpass__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  kfr::expression_pointer< double > *arg4 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::fir_highpass< SampleType >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",4,"kfr::expression_pointer< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fir_highpass",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("fir_highpass",4,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_highpass< SampleType >((DSP::SampleVector< double > const &)*arg1,arg2,arg3,*arg4);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_highpass(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_fir_highpass__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_fir_highpass__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_highpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::fir_highpass< SampleType >(DSP::SampleVector< double > const &,size_t,double,kfr::expression_pointer< double > &,bool)\n"
    "    DSP::fir_highpass< SampleType >(DSP::SampleVector< double > const &,size_t,double,kfr::expression_pointer< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_bandpass__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  double arg4 ;
  kfr::expression_pointer< double > *arg5 = 0 ;
  bool arg6 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::fir_bandpass< SampleType >",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",5,"kfr::expression_pointer< double > &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fir_bandpass",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("fir_bandpass",5,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_bandpass< SampleType >((DSP::SampleVector< double > const &)*arg1,arg2,arg3,arg4,*arg5,arg6);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandpass__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  double arg4 ;
  kfr::expression_pointer< double > *arg5 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::fir_bandpass< SampleType >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",5,"kfr::expression_pointer< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fir_bandpass",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("fir_bandpass",5,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_bandpass< SampleType >((DSP::SampleVector< double > const &)*arg1,arg2,arg3,arg4,*arg5);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandpass(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_fir_bandpass__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_fir_bandpass__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_bandpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::fir_bandpass< SampleType >(DSP::SampleVector< double > const &,size_t,double,double,kfr::expression_pointer< double > &,bool)\n"
    "    DSP::fir_bandpass< SampleType >(DSP::SampleVector< double > const &,size_t,double,double,kfr::expression_pointer< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_bandstop__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  double arg4 ;
  kfr::expression_pointer< double > *arg5 = 0 ;
  bool arg6 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::fir_bandstop< SampleType >",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",5,"kfr::expression_pointer< double > &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fir_bandstop",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("fir_bandstop",5,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_bandstop< SampleType >((DSP::SampleVector< double > const &)*arg1,arg2,arg3,arg4,*arg5,arg6);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandstop__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  double arg4 ;
  kfr::expression_pointer< double > *arg5 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::fir_bandstop< SampleType >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",5,"kfr::expression_pointer< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("fir_bandstop",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__expression_pointerT_double_t,0))){
    SWIG_fail_ptr("fir_bandstop",5,SWIGTYPE_p_kfr__expression_pointerT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_bandstop< SampleType >((DSP::SampleVector< double > const &)*arg1,arg2,arg3,arg4,*arg5);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandstop(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_fir_bandstop__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_double_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_fir_bandstop__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_bandstop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::fir_bandstop< SampleType >(DSP::SampleVector< double > const &,size_t,double,double,kfr::expression_pointer< double > &,bool)\n"
    "    DSP::fir_bandstop< SampleType >(DSP::SampleVector< double > const &,size_t,double,double,kfr::expression_pointer< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_BesselFilter_bqs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< double > > *arg2 = (std::vector< kfr::biquad_params< double > > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::bqs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bqs",1,"DSP::BesselFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bqs",2,"std::vector< kfr::biquad_params< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_bqs_set",1,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0))){
    SWIG_fail_ptr("BesselFilter_bqs_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t);
  }
  
  if (arg1) (arg1)->bqs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_bqs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< double > > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::bqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bqs",1,"DSP::BesselFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_bqs_get",1,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  result = (std::vector< kfr::biquad_params< double > > *)& ((arg1)->bqs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::filter",1,"DSP::BesselFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_filter_set",1,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::filter",1,"DSP::BesselFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_filter_get",1,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::order",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_order_set",1,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::order",1,"DSP::BesselFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_order_get",1,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BesselFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::BesselFilter",0,0)
  result = (DSP::BesselFilter< SampleType > *)new DSP::BesselFilter< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BesselFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DSP::BesselFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::BesselFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::BesselFilter",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (DSP::BesselFilter< SampleType > *)new DSP::BesselFilter< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BesselFilter(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BesselFilter__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BesselFilter__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BesselFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselFilter< SampleType >::BesselFilter()\n"
    "    DSP::BesselFilter< SampleType >::BesselFilter(int)\n");
  lua_error(L);return 0;
}


static int _wrap_BesselFilter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::lowpass",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_lowpass",1,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::highpass",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_highpass",1,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandpass",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandpass",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandpass",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_bandpass",1,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandstop",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandstop",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandstop",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandstop",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_bandstop",1,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::apply",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_apply",1,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::apply",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_apply",1,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BesselFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::BesselFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BesselFilter(void *obj) {
DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BesselFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BesselFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BesselFilter_attributes[] = {
    { "bqs", _wrap_BesselFilter_bqs_get, _wrap_BesselFilter_bqs_set },
    { "filter", _wrap_BesselFilter_filter_get, _wrap_BesselFilter_filter_set },
    { "order", _wrap_BesselFilter_order_get, _wrap_BesselFilter_order_set },
    {0,0,0}
};
static swig_lua_method swig_BesselFilter_methods[]= {
    { "lowpass", _wrap_BesselFilter_lowpass},
    { "highpass", _wrap_BesselFilter_highpass},
    { "bandpass", _wrap_BesselFilter_bandpass},
    { "bandstop", _wrap_BesselFilter_bandstop},
    { "apply", _wrap_BesselFilter_apply},
    {0,0}
};
static swig_lua_method swig_BesselFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselFilter_Sf_SwigStatic_constants[]= {
    { SWIG_LUA_CONSTTAB_POINTER("maxorder",&DSP::BesselFilter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselFilter_Sf_SwigStatic = {
    "BesselFilter",
    swig_BesselFilter_Sf_SwigStatic_methods,
    swig_BesselFilter_Sf_SwigStatic_attributes,
    swig_BesselFilter_Sf_SwigStatic_constants,
    swig_BesselFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselFilter_bases[] = {0};
static const char *swig_BesselFilter_base_names[] = {0};
static swig_lua_class _wrap_class_BesselFilter = { "BesselFilter", "BesselFilter", &SWIGTYPE_p_DSP__BesselFilterT_double_t,_proxy__wrap_new_BesselFilter, swig_delete_BesselFilter, swig_BesselFilter_methods, swig_BesselFilter_attributes, &swig_BesselFilter_Sf_SwigStatic, swig_BesselFilter_meta, swig_BesselFilter_bases, swig_BesselFilter_base_names };

static int _wrap_BesselLowPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselLowPassFilter< SampleType > *arg1 = (DSP::BesselLowPassFilter< SampleType > *) 0 ;
  DSP::BesselFilter< double > *arg2 = (DSP::BesselFilter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::filter",1,"DSP::BesselLowPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::filter",2,"DSP::BesselFilter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselLowPassFilterT_double_t,0))){
    SWIG_fail_ptr("BesselLowPassFilter_filter_set",1,SWIGTYPE_p_DSP__BesselLowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselLowPassFilter_filter_set",2,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselLowPassFilter< SampleType > *arg1 = (DSP::BesselLowPassFilter< SampleType > *) 0 ;
  DSP::BesselFilter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::filter",1,"DSP::BesselLowPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselLowPassFilterT_double_t,0))){
    SWIG_fail_ptr("BesselLowPassFilter_filter_get",1,SWIGTYPE_p_DSP__BesselLowPassFilterT_double_t);
  }
  
  result = (DSP::BesselFilter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BesselLowPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::BesselLowPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< SampleType >::BesselLowPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::BesselLowPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::BesselLowPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::BesselLowPassFilter",3,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::BesselLowPassFilter< SampleType > *)new DSP::BesselLowPassFilter< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselLowPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselLowPassFilter< SampleType > *arg1 = (DSP::BesselLowPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::apply",1,"DSP::BesselLowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselLowPassFilterT_double_t,0))){
    SWIG_fail_ptr("BesselLowPassFilter_apply",1,SWIGTYPE_p_DSP__BesselLowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselLowPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselLowPassFilter< SampleType > *arg1 = (DSP::BesselLowPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::apply",1,"DSP::BesselLowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselLowPassFilterT_double_t,0))){
    SWIG_fail_ptr("BesselLowPassFilter_apply",1,SWIGTYPE_p_DSP__BesselLowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselLowPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselLowPassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselLowPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselLowPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BesselLowPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselLowPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselLowPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselLowPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselLowPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::BesselLowPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BesselLowPassFilter(void *obj) {
DSP::BesselLowPassFilter< SampleType > *arg1 = (DSP::BesselLowPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BesselLowPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BesselLowPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BesselLowPassFilter_attributes[] = {
    { "filter", _wrap_BesselLowPassFilter_filter_get, _wrap_BesselLowPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_BesselLowPassFilter_methods[]= {
    { "apply", _wrap_BesselLowPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_BesselLowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselLowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselLowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselLowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselLowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselLowPassFilter_Sf_SwigStatic = {
    "BesselLowPassFilter",
    swig_BesselLowPassFilter_Sf_SwigStatic_methods,
    swig_BesselLowPassFilter_Sf_SwigStatic_attributes,
    swig_BesselLowPassFilter_Sf_SwigStatic_constants,
    swig_BesselLowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselLowPassFilter_bases[] = {0};
static const char *swig_BesselLowPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_BesselLowPassFilter = { "BesselLowPassFilter", "BesselLowPassFilter", &SWIGTYPE_p_DSP__BesselLowPassFilterT_double_t,_proxy__wrap_new_BesselLowPassFilter, swig_delete_BesselLowPassFilter, swig_BesselLowPassFilter_methods, swig_BesselLowPassFilter_attributes, &swig_BesselLowPassFilter_Sf_SwigStatic, swig_BesselLowPassFilter_meta, swig_BesselLowPassFilter_bases, swig_BesselLowPassFilter_base_names };

static int _wrap_BesselHighPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselHighPassFilter< SampleType > *arg1 = (DSP::BesselHighPassFilter< SampleType > *) 0 ;
  DSP::BesselFilter< double > *arg2 = (DSP::BesselFilter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::filter",1,"DSP::BesselHighPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::filter",2,"DSP::BesselFilter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselHighPassFilterT_double_t,0))){
    SWIG_fail_ptr("BesselHighPassFilter_filter_set",1,SWIGTYPE_p_DSP__BesselHighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselHighPassFilter_filter_set",2,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselHighPassFilter< SampleType > *arg1 = (DSP::BesselHighPassFilter< SampleType > *) 0 ;
  DSP::BesselFilter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::filter",1,"DSP::BesselHighPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselHighPassFilterT_double_t,0))){
    SWIG_fail_ptr("BesselHighPassFilter_filter_get",1,SWIGTYPE_p_DSP__BesselHighPassFilterT_double_t);
  }
  
  result = (DSP::BesselFilter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BesselHighPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::BesselHighPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< SampleType >::BesselHighPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::BesselHighPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::BesselHighPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::BesselHighPassFilter",3,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::BesselHighPassFilter< SampleType > *)new DSP::BesselHighPassFilter< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselHighPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselHighPassFilter< SampleType > *arg1 = (DSP::BesselHighPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::apply",1,"DSP::BesselHighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselHighPassFilterT_double_t,0))){
    SWIG_fail_ptr("BesselHighPassFilter_apply",1,SWIGTYPE_p_DSP__BesselHighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselHighPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselHighPassFilter< SampleType > *arg1 = (DSP::BesselHighPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::apply",1,"DSP::BesselHighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselHighPassFilterT_double_t,0))){
    SWIG_fail_ptr("BesselHighPassFilter_apply",1,SWIGTYPE_p_DSP__BesselHighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselHighPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselHighPassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselHighPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselHighPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BesselHighPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselHighPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselHighPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselHighPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselHighPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::BesselHighPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BesselHighPassFilter(void *obj) {
DSP::BesselHighPassFilter< SampleType > *arg1 = (DSP::BesselHighPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BesselHighPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BesselHighPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BesselHighPassFilter_attributes[] = {
    { "filter", _wrap_BesselHighPassFilter_filter_get, _wrap_BesselHighPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_BesselHighPassFilter_methods[]= {
    { "apply", _wrap_BesselHighPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_BesselHighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselHighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselHighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselHighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselHighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselHighPassFilter_Sf_SwigStatic = {
    "BesselHighPassFilter",
    swig_BesselHighPassFilter_Sf_SwigStatic_methods,
    swig_BesselHighPassFilter_Sf_SwigStatic_attributes,
    swig_BesselHighPassFilter_Sf_SwigStatic_constants,
    swig_BesselHighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselHighPassFilter_bases[] = {0};
static const char *swig_BesselHighPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_BesselHighPassFilter = { "BesselHighPassFilter", "BesselHighPassFilter", &SWIGTYPE_p_DSP__BesselHighPassFilterT_double_t,_proxy__wrap_new_BesselHighPassFilter, swig_delete_BesselHighPassFilter, swig_BesselHighPassFilter_methods, swig_BesselHighPassFilter_attributes, &swig_BesselHighPassFilter_Sf_SwigStatic, swig_BesselHighPassFilter_meta, swig_BesselHighPassFilter_bases, swig_BesselHighPassFilter_base_names };

static int _wrap_BesselBandPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandPassFilter< SampleType > *arg1 = (DSP::BesselBandPassFilter< SampleType > *) 0 ;
  DSP::BesselFilter< double > *arg2 = (DSP::BesselFilter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::filter",1,"DSP::BesselBandPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::filter",2,"DSP::BesselFilter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandPassFilterT_double_t,0))){
    SWIG_fail_ptr("BesselBandPassFilter_filter_set",1,SWIGTYPE_p_DSP__BesselBandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselBandPassFilter_filter_set",2,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandPassFilter< SampleType > *arg1 = (DSP::BesselBandPassFilter< SampleType > *) 0 ;
  DSP::BesselFilter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::filter",1,"DSP::BesselBandPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandPassFilterT_double_t,0))){
    SWIG_fail_ptr("BesselBandPassFilter_filter_get",1,SWIGTYPE_p_DSP__BesselBandPassFilterT_double_t);
  }
  
  result = (DSP::BesselFilter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BesselBandPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::BesselBandPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< SampleType >::BesselBandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::BesselBandPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::BesselBandPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::BesselBandPassFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::BesselBandPassFilter",4,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (DSP::BesselBandPassFilter< SampleType > *)new DSP::BesselBandPassFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselBandPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandPassFilter< SampleType > *arg1 = (DSP::BesselBandPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::apply",1,"DSP::BesselBandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandPassFilterT_double_t,0))){
    SWIG_fail_ptr("BesselBandPassFilter_apply",1,SWIGTYPE_p_DSP__BesselBandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselBandPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandPassFilter< SampleType > *arg1 = (DSP::BesselBandPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::apply",1,"DSP::BesselBandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandPassFilterT_double_t,0))){
    SWIG_fail_ptr("BesselBandPassFilter_apply",1,SWIGTYPE_p_DSP__BesselBandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselBandPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselBandPassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselBandPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BesselBandPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselBandPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselBandPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselBandPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselBandPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::BesselBandPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BesselBandPassFilter(void *obj) {
DSP::BesselBandPassFilter< SampleType > *arg1 = (DSP::BesselBandPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BesselBandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BesselBandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BesselBandPassFilter_attributes[] = {
    { "filter", _wrap_BesselBandPassFilter_filter_get, _wrap_BesselBandPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_BesselBandPassFilter_methods[]= {
    { "apply", _wrap_BesselBandPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_BesselBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselBandPassFilter_Sf_SwigStatic = {
    "BesselBandPassFilter",
    swig_BesselBandPassFilter_Sf_SwigStatic_methods,
    swig_BesselBandPassFilter_Sf_SwigStatic_attributes,
    swig_BesselBandPassFilter_Sf_SwigStatic_constants,
    swig_BesselBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselBandPassFilter_bases[] = {0};
static const char *swig_BesselBandPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_BesselBandPassFilter = { "BesselBandPassFilter", "BesselBandPassFilter", &SWIGTYPE_p_DSP__BesselBandPassFilterT_double_t,_proxy__wrap_new_BesselBandPassFilter, swig_delete_BesselBandPassFilter, swig_BesselBandPassFilter_methods, swig_BesselBandPassFilter_attributes, &swig_BesselBandPassFilter_Sf_SwigStatic, swig_BesselBandPassFilter_meta, swig_BesselBandPassFilter_bases, swig_BesselBandPassFilter_base_names };

static int _wrap_BesselBandStopFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandStopFilter< SampleType > *arg1 = (DSP::BesselBandStopFilter< SampleType > *) 0 ;
  DSP::BesselFilter< double > *arg2 = (DSP::BesselFilter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::filter",1,"DSP::BesselBandStopFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::filter",2,"DSP::BesselFilter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandStopFilterT_double_t,0))){
    SWIG_fail_ptr("BesselBandStopFilter_filter_set",1,SWIGTYPE_p_DSP__BesselBandStopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BesselFilterT_double_t,0))){
    SWIG_fail_ptr("BesselBandStopFilter_filter_set",2,SWIGTYPE_p_DSP__BesselFilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStopFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandStopFilter< SampleType > *arg1 = (DSP::BesselBandStopFilter< SampleType > *) 0 ;
  DSP::BesselFilter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::filter",1,"DSP::BesselBandStopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandStopFilterT_double_t,0))){
    SWIG_fail_ptr("BesselBandStopFilter_filter_get",1,SWIGTYPE_p_DSP__BesselBandStopFilterT_double_t);
  }
  
  result = (DSP::BesselFilter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BesselBandStopFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::BesselBandStopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< SampleType >::BesselBandStopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::BesselBandStopFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::BesselBandStopFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::BesselBandStopFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::BesselBandStopFilter",4,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (DSP::BesselBandStopFilter< SampleType > *)new DSP::BesselBandStopFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselBandStopFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStopFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandStopFilter< SampleType > *arg1 = (DSP::BesselBandStopFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::apply",1,"DSP::BesselBandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandStopFilterT_double_t,0))){
    SWIG_fail_ptr("BesselBandStopFilter_apply",1,SWIGTYPE_p_DSP__BesselBandStopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselBandStopFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStopFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandStopFilter< SampleType > *arg1 = (DSP::BesselBandStopFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::apply",1,"DSP::BesselBandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandStopFilterT_double_t,0))){
    SWIG_fail_ptr("BesselBandStopFilter_apply",1,SWIGTYPE_p_DSP__BesselBandStopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselBandStopFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("BesselBandStopFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselBandStopFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselBandStopFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BesselBandStopFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselBandStopFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BesselBandStopFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselBandStopFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselBandStopFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::BesselBandStopFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BesselBandStopFilter(void *obj) {
DSP::BesselBandStopFilter< SampleType > *arg1 = (DSP::BesselBandStopFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BesselBandStopFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BesselBandStopFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BesselBandStopFilter_attributes[] = {
    { "filter", _wrap_BesselBandStopFilter_filter_get, _wrap_BesselBandStopFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_BesselBandStopFilter_methods[]= {
    { "apply", _wrap_BesselBandStopFilter_apply},
    {0,0}
};
static swig_lua_method swig_BesselBandStopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselBandStopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselBandStopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselBandStopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselBandStopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselBandStopFilter_Sf_SwigStatic = {
    "BesselBandStopFilter",
    swig_BesselBandStopFilter_Sf_SwigStatic_methods,
    swig_BesselBandStopFilter_Sf_SwigStatic_attributes,
    swig_BesselBandStopFilter_Sf_SwigStatic_constants,
    swig_BesselBandStopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselBandStopFilter_bases[] = {0};
static const char *swig_BesselBandStopFilter_base_names[] = {0};
static swig_lua_class _wrap_class_BesselBandStopFilter = { "BesselBandStopFilter", "BesselBandStopFilter", &SWIGTYPE_p_DSP__BesselBandStopFilterT_double_t,_proxy__wrap_new_BesselBandStopFilter, swig_delete_BesselBandStopFilter, swig_BesselBandStopFilter_methods, swig_BesselBandStopFilter_attributes, &swig_BesselBandStopFilter_Sf_SwigStatic, swig_BesselBandStopFilter_meta, swig_BesselBandStopFilter_bases, swig_BesselBandStopFilter_base_names };

static int _wrap_ButterworthFilter_bqs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< double > > *arg2 = (std::vector< kfr::biquad_params< double > > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::bqs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bqs",1,"DSP::ButterworthFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bqs",2,"std::vector< kfr::biquad_params< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_bqs_set",1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0))){
    SWIG_fail_ptr("ButterworthFilter_bqs_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t);
  }
  
  if (arg1) (arg1)->bqs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_bqs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< double > > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::bqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bqs",1,"DSP::ButterworthFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_bqs_get",1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  result = (std::vector< kfr::biquad_params< double > > *)& ((arg1)->bqs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::filter",1,"DSP::ButterworthFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_filter_set",1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::filter",1,"DSP::ButterworthFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_filter_get",1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::order",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_order_set",1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::order",1,"DSP::ButterworthFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_order_get",1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DSP::ButterworthFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::ButterworthFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::ButterworthFilter",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (DSP::ButterworthFilter< SampleType > *)new DSP::ButterworthFilter< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::lowpass",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_lowpass",1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::highpass",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_highpass",1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandpass",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandpass",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandpass",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_bandpass",1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandstop",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandstop",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandstop",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandstop",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_bandstop",1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::apply",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_apply",1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::apply",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_apply",1,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ButterworthFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::ButterworthFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_ButterworthFilter(void *obj) {
DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthFilter_attributes[] = {
    { "bqs", _wrap_ButterworthFilter_bqs_get, _wrap_ButterworthFilter_bqs_set },
    { "filter", _wrap_ButterworthFilter_filter_get, _wrap_ButterworthFilter_filter_set },
    { "order", _wrap_ButterworthFilter_order_get, _wrap_ButterworthFilter_order_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthFilter_methods[]= {
    { "lowpass", _wrap_ButterworthFilter_lowpass},
    { "highpass", _wrap_ButterworthFilter_highpass},
    { "bandpass", _wrap_ButterworthFilter_bandpass},
    { "bandstop", _wrap_ButterworthFilter_bandstop},
    { "apply", _wrap_ButterworthFilter_apply},
    {0,0}
};
static swig_lua_method swig_ButterworthFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthFilter_Sf_SwigStatic_constants[]= {
    { SWIG_LUA_CONSTTAB_POINTER("maxorder",&DSP::ButterworthFilter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthFilter_Sf_SwigStatic = {
    "ButterworthFilter",
    swig_ButterworthFilter_Sf_SwigStatic_methods,
    swig_ButterworthFilter_Sf_SwigStatic_attributes,
    swig_ButterworthFilter_Sf_SwigStatic_constants,
    swig_ButterworthFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthFilter_bases[] = {0};
static const char *swig_ButterworthFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthFilter = { "ButterworthFilter", "ButterworthFilter", &SWIGTYPE_p_DSP__ButterworthFilterT_double_t,_proxy__wrap_new_ButterworthFilter, swig_delete_ButterworthFilter, swig_ButterworthFilter_methods, swig_ButterworthFilter_attributes, &swig_ButterworthFilter_Sf_SwigStatic, swig_ButterworthFilter_meta, swig_ButterworthFilter_bases, swig_ButterworthFilter_base_names };

static int _wrap_ButterworthLowPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthLowPassFilter< SampleType > *arg1 = (DSP::ButterworthLowPassFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< double > *arg2 = (DSP::ButterworthFilter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::filter",1,"DSP::ButterworthLowPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::filter",2,"DSP::ButterworthFilter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter_filter_set",1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter_filter_set",2,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthLowPassFilter< SampleType > *arg1 = (DSP::ButterworthLowPassFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::filter",1,"DSP::ButterworthLowPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter_filter_get",1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_double_t);
  }
  
  result = (DSP::ButterworthFilter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthLowPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::ButterworthLowPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< SampleType >::ButterworthLowPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::ButterworthLowPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::ButterworthLowPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::ButterworthLowPassFilter",3,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::ButterworthLowPassFilter< SampleType > *)new DSP::ButterworthLowPassFilter< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthLowPassFilter< SampleType > *arg1 = (DSP::ButterworthLowPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::apply",1,"DSP::ButterworthLowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter_apply",1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthLowPassFilter< SampleType > *arg1 = (DSP::ButterworthLowPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::apply",1,"DSP::ButterworthLowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter_apply",1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthLowPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthLowPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ButterworthLowPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthLowPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthLowPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthLowPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthLowPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::ButterworthLowPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_ButterworthLowPassFilter(void *obj) {
DSP::ButterworthLowPassFilter< SampleType > *arg1 = (DSP::ButterworthLowPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthLowPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthLowPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthLowPassFilter_attributes[] = {
    { "filter", _wrap_ButterworthLowPassFilter_filter_get, _wrap_ButterworthLowPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthLowPassFilter_methods[]= {
    { "apply", _wrap_ButterworthLowPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_ButterworthLowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthLowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthLowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthLowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthLowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthLowPassFilter_Sf_SwigStatic = {
    "ButterworthLowPassFilter",
    swig_ButterworthLowPassFilter_Sf_SwigStatic_methods,
    swig_ButterworthLowPassFilter_Sf_SwigStatic_attributes,
    swig_ButterworthLowPassFilter_Sf_SwigStatic_constants,
    swig_ButterworthLowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthLowPassFilter_bases[] = {0};
static const char *swig_ButterworthLowPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthLowPassFilter = { "ButterworthLowPassFilter", "ButterworthLowPassFilter", &SWIGTYPE_p_DSP__ButterworthLowPassFilterT_double_t,_proxy__wrap_new_ButterworthLowPassFilter, swig_delete_ButterworthLowPassFilter, swig_ButterworthLowPassFilter_methods, swig_ButterworthLowPassFilter_attributes, &swig_ButterworthLowPassFilter_Sf_SwigStatic, swig_ButterworthLowPassFilter_meta, swig_ButterworthLowPassFilter_bases, swig_ButterworthLowPassFilter_base_names };

static int _wrap_ButterworthHighPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthHighPassFilter< SampleType > *arg1 = (DSP::ButterworthHighPassFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< double > *arg2 = (DSP::ButterworthFilter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::filter",1,"DSP::ButterworthHighPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::filter",2,"DSP::ButterworthFilter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter_filter_set",1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter_filter_set",2,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthHighPassFilter< SampleType > *arg1 = (DSP::ButterworthHighPassFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::filter",1,"DSP::ButterworthHighPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter_filter_get",1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_double_t);
  }
  
  result = (DSP::ButterworthFilter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthHighPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::ButterworthHighPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< SampleType >::ButterworthHighPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::ButterworthHighPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::ButterworthHighPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::ButterworthHighPassFilter",3,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::ButterworthHighPassFilter< SampleType > *)new DSP::ButterworthHighPassFilter< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthHighPassFilter< SampleType > *arg1 = (DSP::ButterworthHighPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::apply",1,"DSP::ButterworthHighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter_apply",1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthHighPassFilter< SampleType > *arg1 = (DSP::ButterworthHighPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::apply",1,"DSP::ButterworthHighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter_apply",1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthHighPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthHighPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ButterworthHighPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthHighPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthHighPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthHighPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthHighPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::ButterworthHighPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_ButterworthHighPassFilter(void *obj) {
DSP::ButterworthHighPassFilter< SampleType > *arg1 = (DSP::ButterworthHighPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthHighPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthHighPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthHighPassFilter_attributes[] = {
    { "filter", _wrap_ButterworthHighPassFilter_filter_get, _wrap_ButterworthHighPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthHighPassFilter_methods[]= {
    { "apply", _wrap_ButterworthHighPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_ButterworthHighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthHighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthHighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthHighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthHighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthHighPassFilter_Sf_SwigStatic = {
    "ButterworthHighPassFilter",
    swig_ButterworthHighPassFilter_Sf_SwigStatic_methods,
    swig_ButterworthHighPassFilter_Sf_SwigStatic_attributes,
    swig_ButterworthHighPassFilter_Sf_SwigStatic_constants,
    swig_ButterworthHighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthHighPassFilter_bases[] = {0};
static const char *swig_ButterworthHighPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthHighPassFilter = { "ButterworthHighPassFilter", "ButterworthHighPassFilter", &SWIGTYPE_p_DSP__ButterworthHighPassFilterT_double_t,_proxy__wrap_new_ButterworthHighPassFilter, swig_delete_ButterworthHighPassFilter, swig_ButterworthHighPassFilter_methods, swig_ButterworthHighPassFilter_attributes, &swig_ButterworthHighPassFilter_Sf_SwigStatic, swig_ButterworthHighPassFilter_meta, swig_ButterworthHighPassFilter_bases, swig_ButterworthHighPassFilter_base_names };

static int _wrap_ButterworthBandPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandPassFilter< SampleType > *arg1 = (DSP::ButterworthBandPassFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< double > *arg2 = (DSP::ButterworthFilter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::filter",1,"DSP::ButterworthBandPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::filter",2,"DSP::ButterworthFilter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter_filter_set",1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter_filter_set",2,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandPassFilter< SampleType > *arg1 = (DSP::ButterworthBandPassFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::filter",1,"DSP::ButterworthBandPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter_filter_get",1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_double_t);
  }
  
  result = (DSP::ButterworthFilter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthBandPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::ButterworthBandPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< SampleType >::ButterworthBandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::ButterworthBandPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::ButterworthBandPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::ButterworthBandPassFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::ButterworthBandPassFilter",4,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (DSP::ButterworthBandPassFilter< SampleType > *)new DSP::ButterworthBandPassFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandPassFilter< SampleType > *arg1 = (DSP::ButterworthBandPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::apply",1,"DSP::ButterworthBandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter_apply",1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandPassFilter< SampleType > *arg1 = (DSP::ButterworthBandPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::apply",1,"DSP::ButterworthBandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter_apply",1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthBandPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ButterworthBandPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthBandPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthBandPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthBandPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthBandPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::ButterworthBandPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_ButterworthBandPassFilter(void *obj) {
DSP::ButterworthBandPassFilter< SampleType > *arg1 = (DSP::ButterworthBandPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthBandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthBandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthBandPassFilter_attributes[] = {
    { "filter", _wrap_ButterworthBandPassFilter_filter_get, _wrap_ButterworthBandPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthBandPassFilter_methods[]= {
    { "apply", _wrap_ButterworthBandPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_ButterworthBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthBandPassFilter_Sf_SwigStatic = {
    "ButterworthBandPassFilter",
    swig_ButterworthBandPassFilter_Sf_SwigStatic_methods,
    swig_ButterworthBandPassFilter_Sf_SwigStatic_attributes,
    swig_ButterworthBandPassFilter_Sf_SwigStatic_constants,
    swig_ButterworthBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthBandPassFilter_bases[] = {0};
static const char *swig_ButterworthBandPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthBandPassFilter = { "ButterworthBandPassFilter", "ButterworthBandPassFilter", &SWIGTYPE_p_DSP__ButterworthBandPassFilterT_double_t,_proxy__wrap_new_ButterworthBandPassFilter, swig_delete_ButterworthBandPassFilter, swig_ButterworthBandPassFilter_methods, swig_ButterworthBandPassFilter_attributes, &swig_ButterworthBandPassFilter_Sf_SwigStatic, swig_ButterworthBandPassFilter_meta, swig_ButterworthBandPassFilter_bases, swig_ButterworthBandPassFilter_base_names };

static int _wrap_ButterworthBandStopFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandStopFilter< SampleType > *arg1 = (DSP::ButterworthBandStopFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< double > *arg2 = (DSP::ButterworthFilter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::filter",1,"DSP::ButterworthBandStopFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::filter",2,"DSP::ButterworthFilter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter_filter_set",1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter_filter_set",2,SWIGTYPE_p_DSP__ButterworthFilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandStopFilter< SampleType > *arg1 = (DSP::ButterworthBandStopFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::filter",1,"DSP::ButterworthBandStopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter_filter_get",1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_double_t);
  }
  
  result = (DSP::ButterworthFilter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthBandStopFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::ButterworthBandStopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< SampleType >::ButterworthBandStopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::ButterworthBandStopFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::ButterworthBandStopFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::ButterworthBandStopFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::ButterworthBandStopFilter",4,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (DSP::ButterworthBandStopFilter< SampleType > *)new DSP::ButterworthBandStopFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandStopFilter< SampleType > *arg1 = (DSP::ButterworthBandStopFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::apply",1,"DSP::ButterworthBandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter_apply",1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandStopFilter< SampleType > *arg1 = (DSP::ButterworthBandStopFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::apply",1,"DSP::ButterworthBandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter_apply",1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthBandStopFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthBandStopFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ButterworthBandStopFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthBandStopFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ButterworthBandStopFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthBandStopFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthBandStopFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::ButterworthBandStopFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_ButterworthBandStopFilter(void *obj) {
DSP::ButterworthBandStopFilter< SampleType > *arg1 = (DSP::ButterworthBandStopFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthBandStopFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthBandStopFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthBandStopFilter_attributes[] = {
    { "filter", _wrap_ButterworthBandStopFilter_filter_get, _wrap_ButterworthBandStopFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthBandStopFilter_methods[]= {
    { "apply", _wrap_ButterworthBandStopFilter_apply},
    {0,0}
};
static swig_lua_method swig_ButterworthBandStopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthBandStopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthBandStopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthBandStopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthBandStopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthBandStopFilter_Sf_SwigStatic = {
    "ButterworthBandStopFilter",
    swig_ButterworthBandStopFilter_Sf_SwigStatic_methods,
    swig_ButterworthBandStopFilter_Sf_SwigStatic_attributes,
    swig_ButterworthBandStopFilter_Sf_SwigStatic_constants,
    swig_ButterworthBandStopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthBandStopFilter_bases[] = {0};
static const char *swig_ButterworthBandStopFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthBandStopFilter = { "ButterworthBandStopFilter", "ButterworthBandStopFilter", &SWIGTYPE_p_DSP__ButterworthBandStopFilterT_double_t,_proxy__wrap_new_ButterworthBandStopFilter, swig_delete_ButterworthBandStopFilter, swig_ButterworthBandStopFilter_methods, swig_ButterworthBandStopFilter_attributes, &swig_ButterworthBandStopFilter_Sf_SwigStatic, swig_ButterworthBandStopFilter_meta, swig_ButterworthBandStopFilter_bases, swig_ButterworthBandStopFilter_base_names };

static int _wrap_Chevyshev1Filter_bqs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< double > > *arg2 = (std::vector< kfr::biquad_params< double > > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::bqs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bqs",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bqs",2,"std::vector< kfr::biquad_params< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_bqs_set",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_bqs_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t);
  }
  
  if (arg1) (arg1)->bqs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1Filter_bqs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< double > > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::bqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bqs",1,"DSP::Chebyshev1Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_bqs_get",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  result = (std::vector< kfr::biquad_params< double > > *)& ((arg1)->bqs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1Filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::filter",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1Filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::filter",1,"DSP::Chebyshev1Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1Filter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::order",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_order_set",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1Filter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::order",1,"DSP::Chebyshev1Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_order_get",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1Filter_rp_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::rp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::rp",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::rp",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_rp_set",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->rp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1Filter_rp_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  double result;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::rp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::rp",1,"DSP::Chebyshev1Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_rp_get",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  result = (double) ((arg1)->rp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev1Filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::Chebyshev1Filter",0,0)
  result = (DSP::Chebyshev1Filter< SampleType > *)new DSP::Chebyshev1Filter< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev1Filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  DSP::Chebyshev1Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::Chebyshev1Filter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::Chebyshev1Filter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::Chebyshev1Filter",2,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (DSP::Chebyshev1Filter< SampleType > *)new DSP::Chebyshev1Filter< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev1Filter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Chevyshev1Filter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Chevyshev1Filter__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Chevyshev1Filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1Filter< SampleType >::Chebyshev1Filter()\n"
    "    DSP::Chebyshev1Filter< SampleType >::Chebyshev1Filter(int,double)\n");
  lua_error(L);return 0;
}


static int _wrap_Chevyshev1Filter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::lowpass",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_lowpass",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1Filter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::highpass",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_highpass",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1Filter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandpass",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandpass",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandpass",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_bandpass",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1Filter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandstop",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandstop",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandstop",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandstop",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_bandstop",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1Filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::apply",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1Filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::apply",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1Filter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1Filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Chevyshev1Filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Chevyshev1Filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chevyshev1Filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1Filter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::Chebyshev1Filter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chevyshev1Filter(void *obj) {
DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chevyshev1Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chevyshev1Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chevyshev1Filter_attributes[] = {
    { "bqs", _wrap_Chevyshev1Filter_bqs_get, _wrap_Chevyshev1Filter_bqs_set },
    { "filter", _wrap_Chevyshev1Filter_filter_get, _wrap_Chevyshev1Filter_filter_set },
    { "order", _wrap_Chevyshev1Filter_order_get, _wrap_Chevyshev1Filter_order_set },
    { "rp", _wrap_Chevyshev1Filter_rp_get, _wrap_Chevyshev1Filter_rp_set },
    {0,0,0}
};
static swig_lua_method swig_Chevyshev1Filter_methods[]= {
    { "lowpass", _wrap_Chevyshev1Filter_lowpass},
    { "highpass", _wrap_Chevyshev1Filter_highpass},
    { "bandpass", _wrap_Chevyshev1Filter_bandpass},
    { "bandstop", _wrap_Chevyshev1Filter_bandstop},
    { "apply", _wrap_Chevyshev1Filter_apply},
    {0,0}
};
static swig_lua_method swig_Chevyshev1Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chevyshev1Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chevyshev1Filter_Sf_SwigStatic_constants[]= {
    { SWIG_LUA_CONSTTAB_POINTER("maxorder",&DSP::Chebyshev1Filter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chevyshev1Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chevyshev1Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chevyshev1Filter_Sf_SwigStatic = {
    "Chevyshev1Filter",
    swig_Chevyshev1Filter_Sf_SwigStatic_methods,
    swig_Chevyshev1Filter_Sf_SwigStatic_attributes,
    swig_Chevyshev1Filter_Sf_SwigStatic_constants,
    swig_Chevyshev1Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chevyshev1Filter_bases[] = {0};
static const char *swig_Chevyshev1Filter_base_names[] = {0};
static swig_lua_class _wrap_class_Chevyshev1Filter = { "Chevyshev1Filter", "Chevyshev1Filter", &SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,_proxy__wrap_new_Chevyshev1Filter, swig_delete_Chevyshev1Filter, swig_Chevyshev1Filter_methods, swig_Chevyshev1Filter_attributes, &swig_Chevyshev1Filter_Sf_SwigStatic, swig_Chevyshev1Filter_meta, swig_Chevyshev1Filter_bases, swig_Chevyshev1Filter_base_names };

static int _wrap_Chevyshev1LowPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev1LowPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< double > *arg2 = (DSP::Chebyshev1Filter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::filter",1,"DSP::Chebyshev1LowPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::filter",2,"DSP::Chebyshev1Filter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1LowPassFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1LowPassFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1LowPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev1LowPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::filter",1,"DSP::Chebyshev1LowPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1LowPassFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_double_t);
  }
  
  result = (DSP::Chebyshev1Filter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev1LowPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::Chebyshev1LowPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< SampleType >::Chebyshev1LowPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::Chebyshev1LowPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::Chebyshev1LowPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::Chebyshev1LowPassFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::Chebyshev1LowPassFilter",4,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (DSP::Chebyshev1LowPassFilter< SampleType > *)new DSP::Chebyshev1LowPassFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1LowPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev1LowPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::apply",1,"DSP::Chebyshev1LowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1LowPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1LowPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1LowPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev1LowPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::apply",1,"DSP::Chebyshev1LowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1LowPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1LowPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1LowPassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1LowPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Chevyshev1LowPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Chevyshev1LowPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chevyshev1LowPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1LowPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::Chebyshev1LowPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chevyshev1LowPassFilter(void *obj) {
DSP::Chebyshev1LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev1LowPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chevyshev1LowPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chevyshev1LowPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chevyshev1LowPassFilter_attributes[] = {
    { "filter", _wrap_Chevyshev1LowPassFilter_filter_get, _wrap_Chevyshev1LowPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_Chevyshev1LowPassFilter_methods[]= {
    { "apply", _wrap_Chevyshev1LowPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_Chevyshev1LowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chevyshev1LowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chevyshev1LowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chevyshev1LowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chevyshev1LowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chevyshev1LowPassFilter_Sf_SwigStatic = {
    "Chevyshev1LowPassFilter",
    swig_Chevyshev1LowPassFilter_Sf_SwigStatic_methods,
    swig_Chevyshev1LowPassFilter_Sf_SwigStatic_attributes,
    swig_Chevyshev1LowPassFilter_Sf_SwigStatic_constants,
    swig_Chevyshev1LowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chevyshev1LowPassFilter_bases[] = {0};
static const char *swig_Chevyshev1LowPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_Chevyshev1LowPassFilter = { "Chevyshev1LowPassFilter", "Chevyshev1LowPassFilter", &SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_double_t,_proxy__wrap_new_Chevyshev1LowPassFilter, swig_delete_Chevyshev1LowPassFilter, swig_Chevyshev1LowPassFilter_methods, swig_Chevyshev1LowPassFilter_attributes, &swig_Chevyshev1LowPassFilter_Sf_SwigStatic, swig_Chevyshev1LowPassFilter_meta, swig_Chevyshev1LowPassFilter_bases, swig_Chevyshev1LowPassFilter_base_names };

static int _wrap_Chevyshev1HighPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev1HighPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< double > *arg2 = (DSP::Chebyshev1Filter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::filter",1,"DSP::Chebyshev1HighPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::filter",2,"DSP::Chebyshev1Filter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1HighPassFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1HighPassFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1HighPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev1HighPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::filter",1,"DSP::Chebyshev1HighPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1HighPassFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_double_t);
  }
  
  result = (DSP::Chebyshev1Filter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev1HighPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::Chebyshev1HighPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< SampleType >::Chebyshev1HighPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::Chebyshev1HighPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::Chebyshev1HighPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::Chebyshev1HighPassFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::Chebyshev1HighPassFilter",4,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (DSP::Chebyshev1HighPassFilter< SampleType > *)new DSP::Chebyshev1HighPassFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1HighPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev1HighPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::apply",1,"DSP::Chebyshev1HighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1HighPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1HighPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1HighPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev1HighPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::apply",1,"DSP::Chebyshev1HighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1HighPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1HighPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1HighPassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1HighPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Chevyshev1HighPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Chevyshev1HighPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chevyshev1HighPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1HighPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::Chebyshev1HighPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chevyshev1HighPassFilter(void *obj) {
DSP::Chebyshev1HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev1HighPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chevyshev1HighPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chevyshev1HighPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chevyshev1HighPassFilter_attributes[] = {
    { "filter", _wrap_Chevyshev1HighPassFilter_filter_get, _wrap_Chevyshev1HighPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_Chevyshev1HighPassFilter_methods[]= {
    { "apply", _wrap_Chevyshev1HighPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_Chevyshev1HighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chevyshev1HighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chevyshev1HighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chevyshev1HighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chevyshev1HighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chevyshev1HighPassFilter_Sf_SwigStatic = {
    "Chevyshev1HighPassFilter",
    swig_Chevyshev1HighPassFilter_Sf_SwigStatic_methods,
    swig_Chevyshev1HighPassFilter_Sf_SwigStatic_attributes,
    swig_Chevyshev1HighPassFilter_Sf_SwigStatic_constants,
    swig_Chevyshev1HighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chevyshev1HighPassFilter_bases[] = {0};
static const char *swig_Chevyshev1HighPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_Chevyshev1HighPassFilter = { "Chevyshev1HighPassFilter", "Chevyshev1HighPassFilter", &SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_double_t,_proxy__wrap_new_Chevyshev1HighPassFilter, swig_delete_Chevyshev1HighPassFilter, swig_Chevyshev1HighPassFilter_methods, swig_Chevyshev1HighPassFilter_attributes, &swig_Chevyshev1HighPassFilter_Sf_SwigStatic, swig_Chevyshev1HighPassFilter_meta, swig_Chevyshev1HighPassFilter_bases, swig_Chevyshev1HighPassFilter_base_names };

static int _wrap_Chevyshev1BandPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev1BandPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< double > *arg2 = (DSP::Chebyshev1Filter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::filter",1,"DSP::Chebyshev1BandPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::filter",2,"DSP::Chebyshev1Filter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandPassFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandPassFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1BandPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev1BandPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::filter",1,"DSP::Chebyshev1BandPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandPassFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_double_t);
  }
  
  result = (DSP::Chebyshev1Filter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev1BandPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  DSP::Chebyshev1BandPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< SampleType >::Chebyshev1BandPassFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::Chebyshev1BandPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::Chebyshev1BandPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::Chebyshev1BandPassFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::Chebyshev1BandPassFilter",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::Chebyshev1BandPassFilter",5,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (DSP::Chebyshev1BandPassFilter< SampleType > *)new DSP::Chebyshev1BandPassFilter< SampleType >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1BandPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev1BandPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::apply",1,"DSP::Chebyshev1BandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1BandPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev1BandPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::apply",1,"DSP::Chebyshev1BandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandPassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1BandPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Chevyshev1BandPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Chevyshev1BandPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chevyshev1BandPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1BandPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::Chebyshev1BandPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chevyshev1BandPassFilter(void *obj) {
DSP::Chebyshev1BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev1BandPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chevyshev1BandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chevyshev1BandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chevyshev1BandPassFilter_attributes[] = {
    { "filter", _wrap_Chevyshev1BandPassFilter_filter_get, _wrap_Chevyshev1BandPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_Chevyshev1BandPassFilter_methods[]= {
    { "apply", _wrap_Chevyshev1BandPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_Chevyshev1BandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chevyshev1BandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chevyshev1BandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chevyshev1BandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chevyshev1BandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chevyshev1BandPassFilter_Sf_SwigStatic = {
    "Chevyshev1BandPassFilter",
    swig_Chevyshev1BandPassFilter_Sf_SwigStatic_methods,
    swig_Chevyshev1BandPassFilter_Sf_SwigStatic_attributes,
    swig_Chevyshev1BandPassFilter_Sf_SwigStatic_constants,
    swig_Chevyshev1BandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chevyshev1BandPassFilter_bases[] = {0};
static const char *swig_Chevyshev1BandPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_Chevyshev1BandPassFilter = { "Chevyshev1BandPassFilter", "Chevyshev1BandPassFilter", &SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_double_t,_proxy__wrap_new_Chevyshev1BandPassFilter, swig_delete_Chevyshev1BandPassFilter, swig_Chevyshev1BandPassFilter_methods, swig_Chevyshev1BandPassFilter_attributes, &swig_Chevyshev1BandPassFilter_Sf_SwigStatic, swig_Chevyshev1BandPassFilter_meta, swig_Chevyshev1BandPassFilter_bases, swig_Chevyshev1BandPassFilter_base_names };

static int _wrap_Chevyshev1BandStopFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev1BandStopFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< double > *arg2 = (DSP::Chebyshev1Filter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::filter",1,"DSP::Chebyshev1BandStopFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::filter",2,"DSP::Chebyshev1Filter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandStopFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandStopFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1BandStopFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev1BandStopFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::filter",1,"DSP::Chebyshev1BandStopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandStopFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_double_t);
  }
  
  result = (DSP::Chebyshev1Filter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev1BandStopFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  DSP::Chebyshev1BandStopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< SampleType >::Chebyshev1BandStopFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::Chebyshev1BandStopFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::Chebyshev1BandStopFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::Chebyshev1BandStopFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::Chebyshev1BandStopFilter",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::Chebyshev1BandStopFilter",5,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (DSP::Chebyshev1BandStopFilter< SampleType > *)new DSP::Chebyshev1BandStopFilter< SampleType >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1BandStopFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev1BandStopFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::apply",1,"DSP::Chebyshev1BandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandStopFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandStopFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1BandStopFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev1BandStopFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::apply",1,"DSP::Chebyshev1BandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandStopFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandStopFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev1BandStopFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev1BandStopFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Chevyshev1BandStopFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Chevyshev1BandStopFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chevyshev1BandStopFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1BandStopFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::Chebyshev1BandStopFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chevyshev1BandStopFilter(void *obj) {
DSP::Chebyshev1BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev1BandStopFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chevyshev1BandStopFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chevyshev1BandStopFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chevyshev1BandStopFilter_attributes[] = {
    { "filter", _wrap_Chevyshev1BandStopFilter_filter_get, _wrap_Chevyshev1BandStopFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_Chevyshev1BandStopFilter_methods[]= {
    { "apply", _wrap_Chevyshev1BandStopFilter_apply},
    {0,0}
};
static swig_lua_method swig_Chevyshev1BandStopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chevyshev1BandStopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chevyshev1BandStopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chevyshev1BandStopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chevyshev1BandStopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chevyshev1BandStopFilter_Sf_SwigStatic = {
    "Chevyshev1BandStopFilter",
    swig_Chevyshev1BandStopFilter_Sf_SwigStatic_methods,
    swig_Chevyshev1BandStopFilter_Sf_SwigStatic_attributes,
    swig_Chevyshev1BandStopFilter_Sf_SwigStatic_constants,
    swig_Chevyshev1BandStopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chevyshev1BandStopFilter_bases[] = {0};
static const char *swig_Chevyshev1BandStopFilter_base_names[] = {0};
static swig_lua_class _wrap_class_Chevyshev1BandStopFilter = { "Chevyshev1BandStopFilter", "Chevyshev1BandStopFilter", &SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_double_t,_proxy__wrap_new_Chevyshev1BandStopFilter, swig_delete_Chevyshev1BandStopFilter, swig_Chevyshev1BandStopFilter_methods, swig_Chevyshev1BandStopFilter_attributes, &swig_Chevyshev1BandStopFilter_Sf_SwigStatic, swig_Chevyshev1BandStopFilter_meta, swig_Chevyshev1BandStopFilter_bases, swig_Chevyshev1BandStopFilter_base_names };

static int _wrap_Chevyshev2Filter_bqs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< double > > *arg2 = (std::vector< kfr::biquad_params< double > > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::bqs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bqs",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bqs",2,"std::vector< kfr::biquad_params< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_bqs_set",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_bqs_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t);
  }
  
  if (arg1) (arg1)->bqs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2Filter_bqs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< double > > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::bqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bqs",1,"DSP::Chebyshev2Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_bqs_get",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  result = (std::vector< kfr::biquad_params< double > > *)& ((arg1)->bqs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2Filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::filter",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2Filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::filter",1,"DSP::Chebyshev2Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2Filter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::order",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_order_set",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2Filter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::order",1,"DSP::Chebyshev2Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_order_get",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2Filter_rs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::rs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::rs",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::rs",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_rs_set",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->rs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2Filter_rs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  double result;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::rs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::rs",1,"DSP::Chebyshev2Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_rs_get",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  result = (double) ((arg1)->rs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev2Filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::Chebyshev2Filter",0,0)
  result = (DSP::Chebyshev2Filter< SampleType > *)new DSP::Chebyshev2Filter< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev2Filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  DSP::Chebyshev2Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::Chebyshev2Filter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::Chebyshev2Filter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::Chebyshev2Filter",2,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (DSP::Chebyshev2Filter< SampleType > *)new DSP::Chebyshev2Filter< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev2Filter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Chevyshev2Filter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Chevyshev2Filter__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Chevyshev2Filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2Filter< SampleType >::Chebyshev2Filter()\n"
    "    DSP::Chebyshev2Filter< SampleType >::Chebyshev2Filter(int,double)\n");
  lua_error(L);return 0;
}


static int _wrap_Chevyshev2Filter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::lowpass",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_lowpass",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2Filter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::highpass",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_highpass",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2Filter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandpass",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandpass",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandpass",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_bandpass",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2Filter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandstop",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandstop",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandstop",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandstop",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_bandstop",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2Filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::apply",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2Filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::apply",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2Filter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2Filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Chevyshev2Filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Chevyshev2Filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chevyshev2Filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2Filter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::Chebyshev2Filter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chevyshev2Filter(void *obj) {
DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chevyshev2Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chevyshev2Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chevyshev2Filter_attributes[] = {
    { "bqs", _wrap_Chevyshev2Filter_bqs_get, _wrap_Chevyshev2Filter_bqs_set },
    { "filter", _wrap_Chevyshev2Filter_filter_get, _wrap_Chevyshev2Filter_filter_set },
    { "order", _wrap_Chevyshev2Filter_order_get, _wrap_Chevyshev2Filter_order_set },
    { "rs", _wrap_Chevyshev2Filter_rs_get, _wrap_Chevyshev2Filter_rs_set },
    {0,0,0}
};
static swig_lua_method swig_Chevyshev2Filter_methods[]= {
    { "lowpass", _wrap_Chevyshev2Filter_lowpass},
    { "highpass", _wrap_Chevyshev2Filter_highpass},
    { "bandpass", _wrap_Chevyshev2Filter_bandpass},
    { "bandstop", _wrap_Chevyshev2Filter_bandstop},
    { "apply", _wrap_Chevyshev2Filter_apply},
    {0,0}
};
static swig_lua_method swig_Chevyshev2Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chevyshev2Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chevyshev2Filter_Sf_SwigStatic_constants[]= {
    { SWIG_LUA_CONSTTAB_POINTER("maxorder",&DSP::Chebyshev2Filter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chevyshev2Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chevyshev2Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chevyshev2Filter_Sf_SwigStatic = {
    "Chevyshev2Filter",
    swig_Chevyshev2Filter_Sf_SwigStatic_methods,
    swig_Chevyshev2Filter_Sf_SwigStatic_attributes,
    swig_Chevyshev2Filter_Sf_SwigStatic_constants,
    swig_Chevyshev2Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chevyshev2Filter_bases[] = {0};
static const char *swig_Chevyshev2Filter_base_names[] = {0};
static swig_lua_class _wrap_class_Chevyshev2Filter = { "Chevyshev2Filter", "Chevyshev2Filter", &SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,_proxy__wrap_new_Chevyshev2Filter, swig_delete_Chevyshev2Filter, swig_Chevyshev2Filter_methods, swig_Chevyshev2Filter_attributes, &swig_Chevyshev2Filter_Sf_SwigStatic, swig_Chevyshev2Filter_meta, swig_Chevyshev2Filter_bases, swig_Chevyshev2Filter_base_names };

static int _wrap_Chevyshev2LowPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev2LowPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< double > *arg2 = (DSP::Chebyshev2Filter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::filter",1,"DSP::Chebyshev2LowPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::filter",2,"DSP::Chebyshev2Filter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2LowPassFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2LowPassFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2LowPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev2LowPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::filter",1,"DSP::Chebyshev2LowPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2LowPassFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_double_t);
  }
  
  result = (DSP::Chebyshev2Filter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev2LowPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::Chebyshev2LowPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< SampleType >::Chebyshev2LowPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::Chebyshev2LowPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::Chebyshev2LowPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::Chebyshev2LowPassFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::Chebyshev2LowPassFilter",4,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (DSP::Chebyshev2LowPassFilter< SampleType > *)new DSP::Chebyshev2LowPassFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2LowPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev2LowPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::apply",1,"DSP::Chebyshev2LowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2LowPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2LowPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2LowPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev2LowPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::apply",1,"DSP::Chebyshev2LowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2LowPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2LowPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2LowPassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2LowPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Chevyshev2LowPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Chevyshev2LowPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chevyshev2LowPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2LowPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::Chebyshev2LowPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chevyshev2LowPassFilter(void *obj) {
DSP::Chebyshev2LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev2LowPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chevyshev2LowPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chevyshev2LowPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chevyshev2LowPassFilter_attributes[] = {
    { "filter", _wrap_Chevyshev2LowPassFilter_filter_get, _wrap_Chevyshev2LowPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_Chevyshev2LowPassFilter_methods[]= {
    { "apply", _wrap_Chevyshev2LowPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_Chevyshev2LowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chevyshev2LowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chevyshev2LowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chevyshev2LowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chevyshev2LowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chevyshev2LowPassFilter_Sf_SwigStatic = {
    "Chevyshev2LowPassFilter",
    swig_Chevyshev2LowPassFilter_Sf_SwigStatic_methods,
    swig_Chevyshev2LowPassFilter_Sf_SwigStatic_attributes,
    swig_Chevyshev2LowPassFilter_Sf_SwigStatic_constants,
    swig_Chevyshev2LowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chevyshev2LowPassFilter_bases[] = {0};
static const char *swig_Chevyshev2LowPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_Chevyshev2LowPassFilter = { "Chevyshev2LowPassFilter", "Chevyshev2LowPassFilter", &SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_double_t,_proxy__wrap_new_Chevyshev2LowPassFilter, swig_delete_Chevyshev2LowPassFilter, swig_Chevyshev2LowPassFilter_methods, swig_Chevyshev2LowPassFilter_attributes, &swig_Chevyshev2LowPassFilter_Sf_SwigStatic, swig_Chevyshev2LowPassFilter_meta, swig_Chevyshev2LowPassFilter_bases, swig_Chevyshev2LowPassFilter_base_names };

static int _wrap_Chevyshev2HighPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev2HighPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< double > *arg2 = (DSP::Chebyshev2Filter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::filter",1,"DSP::Chebyshev2HighPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::filter",2,"DSP::Chebyshev2Filter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2HighPassFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2HighPassFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2HighPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev2HighPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::filter",1,"DSP::Chebyshev2HighPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2HighPassFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_double_t);
  }
  
  result = (DSP::Chebyshev2Filter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev2HighPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::Chebyshev2HighPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< SampleType >::Chebyshev2HighPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::Chebyshev2HighPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::Chebyshev2HighPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::Chebyshev2HighPassFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::Chebyshev2HighPassFilter",4,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (DSP::Chebyshev2HighPassFilter< SampleType > *)new DSP::Chebyshev2HighPassFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2HighPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev2HighPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::apply",1,"DSP::Chebyshev2HighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2HighPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2HighPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2HighPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev2HighPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::apply",1,"DSP::Chebyshev2HighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2HighPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2HighPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2HighPassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2HighPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Chevyshev2HighPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Chevyshev2HighPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chevyshev2HighPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2HighPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::Chebyshev2HighPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chevyshev2HighPassFilter(void *obj) {
DSP::Chebyshev2HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev2HighPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chevyshev2HighPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chevyshev2HighPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chevyshev2HighPassFilter_attributes[] = {
    { "filter", _wrap_Chevyshev2HighPassFilter_filter_get, _wrap_Chevyshev2HighPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_Chevyshev2HighPassFilter_methods[]= {
    { "apply", _wrap_Chevyshev2HighPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_Chevyshev2HighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chevyshev2HighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chevyshev2HighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chevyshev2HighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chevyshev2HighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chevyshev2HighPassFilter_Sf_SwigStatic = {
    "Chevyshev2HighPassFilter",
    swig_Chevyshev2HighPassFilter_Sf_SwigStatic_methods,
    swig_Chevyshev2HighPassFilter_Sf_SwigStatic_attributes,
    swig_Chevyshev2HighPassFilter_Sf_SwigStatic_constants,
    swig_Chevyshev2HighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chevyshev2HighPassFilter_bases[] = {0};
static const char *swig_Chevyshev2HighPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_Chevyshev2HighPassFilter = { "Chevyshev2HighPassFilter", "Chevyshev2HighPassFilter", &SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_double_t,_proxy__wrap_new_Chevyshev2HighPassFilter, swig_delete_Chevyshev2HighPassFilter, swig_Chevyshev2HighPassFilter_methods, swig_Chevyshev2HighPassFilter_attributes, &swig_Chevyshev2HighPassFilter_Sf_SwigStatic, swig_Chevyshev2HighPassFilter_meta, swig_Chevyshev2HighPassFilter_bases, swig_Chevyshev2HighPassFilter_base_names };

static int _wrap_Chevyshev2BandPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev2BandPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< double > *arg2 = (DSP::Chebyshev2Filter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::filter",1,"DSP::Chebyshev2BandPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::filter",2,"DSP::Chebyshev2Filter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandPassFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandPassFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2BandPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev2BandPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::filter",1,"DSP::Chebyshev2BandPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandPassFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_double_t);
  }
  
  result = (DSP::Chebyshev2Filter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev2BandPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  DSP::Chebyshev2BandPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< SampleType >::Chebyshev2BandPassFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::Chebyshev2BandPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::Chebyshev2BandPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::Chebyshev2BandPassFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::Chebyshev2BandPassFilter",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::Chebyshev2BandPassFilter",5,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (DSP::Chebyshev2BandPassFilter< SampleType > *)new DSP::Chebyshev2BandPassFilter< SampleType >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2BandPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev2BandPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::apply",1,"DSP::Chebyshev2BandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2BandPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev2BandPassFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::apply",1,"DSP::Chebyshev2BandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandPassFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandPassFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2BandPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Chevyshev2BandPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Chevyshev2BandPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chevyshev2BandPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2BandPassFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::Chebyshev2BandPassFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chevyshev2BandPassFilter(void *obj) {
DSP::Chebyshev2BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev2BandPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chevyshev2BandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chevyshev2BandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chevyshev2BandPassFilter_attributes[] = {
    { "filter", _wrap_Chevyshev2BandPassFilter_filter_get, _wrap_Chevyshev2BandPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_Chevyshev2BandPassFilter_methods[]= {
    { "apply", _wrap_Chevyshev2BandPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_Chevyshev2BandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chevyshev2BandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chevyshev2BandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chevyshev2BandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chevyshev2BandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chevyshev2BandPassFilter_Sf_SwigStatic = {
    "Chevyshev2BandPassFilter",
    swig_Chevyshev2BandPassFilter_Sf_SwigStatic_methods,
    swig_Chevyshev2BandPassFilter_Sf_SwigStatic_attributes,
    swig_Chevyshev2BandPassFilter_Sf_SwigStatic_constants,
    swig_Chevyshev2BandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chevyshev2BandPassFilter_bases[] = {0};
static const char *swig_Chevyshev2BandPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_Chevyshev2BandPassFilter = { "Chevyshev2BandPassFilter", "Chevyshev2BandPassFilter", &SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_double_t,_proxy__wrap_new_Chevyshev2BandPassFilter, swig_delete_Chevyshev2BandPassFilter, swig_Chevyshev2BandPassFilter_methods, swig_Chevyshev2BandPassFilter_attributes, &swig_Chevyshev2BandPassFilter_Sf_SwigStatic, swig_Chevyshev2BandPassFilter_meta, swig_Chevyshev2BandPassFilter_bases, swig_Chevyshev2BandPassFilter_base_names };

static int _wrap_Chevyshev2BandStopFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev2BandStopFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< double > *arg2 = (DSP::Chebyshev2Filter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::filter",1,"DSP::Chebyshev2BandStopFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::filter",2,"DSP::Chebyshev2Filter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandStopFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandStopFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2BandStopFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev2BandStopFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::filter",1,"DSP::Chebyshev2BandStopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandStopFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_double_t);
  }
  
  result = (DSP::Chebyshev2Filter< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chevyshev2BandStopFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  DSP::Chebyshev2BandStopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< SampleType >::Chebyshev2BandStopFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::Chebyshev2BandStopFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::Chebyshev2BandStopFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::Chebyshev2BandStopFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::Chebyshev2BandStopFilter",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::Chebyshev2BandStopFilter",5,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (DSP::Chebyshev2BandStopFilter< SampleType > *)new DSP::Chebyshev2BandStopFilter< SampleType >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2BandStopFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev2BandStopFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::apply",1,"DSP::Chebyshev2BandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandStopFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandStopFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2BandStopFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev2BandStopFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::apply",1,"DSP::Chebyshev2BandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandStopFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandStopFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("Chevyshev2BandStopFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chevyshev2BandStopFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Chevyshev2BandStopFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Chevyshev2BandStopFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chevyshev2BandStopFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2BandStopFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::Chebyshev2BandStopFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chevyshev2BandStopFilter(void *obj) {
DSP::Chebyshev2BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev2BandStopFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chevyshev2BandStopFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chevyshev2BandStopFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chevyshev2BandStopFilter_attributes[] = {
    { "filter", _wrap_Chevyshev2BandStopFilter_filter_get, _wrap_Chevyshev2BandStopFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_Chevyshev2BandStopFilter_methods[]= {
    { "apply", _wrap_Chevyshev2BandStopFilter_apply},
    {0,0}
};
static swig_lua_method swig_Chevyshev2BandStopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chevyshev2BandStopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chevyshev2BandStopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chevyshev2BandStopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chevyshev2BandStopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chevyshev2BandStopFilter_Sf_SwigStatic = {
    "Chevyshev2BandStopFilter",
    swig_Chevyshev2BandStopFilter_Sf_SwigStatic_methods,
    swig_Chevyshev2BandStopFilter_Sf_SwigStatic_attributes,
    swig_Chevyshev2BandStopFilter_Sf_SwigStatic_constants,
    swig_Chevyshev2BandStopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chevyshev2BandStopFilter_bases[] = {0};
static const char *swig_Chevyshev2BandStopFilter_base_names[] = {0};
static swig_lua_class _wrap_class_Chevyshev2BandStopFilter = { "Chevyshev2BandStopFilter", "Chevyshev2BandStopFilter", &SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_double_t,_proxy__wrap_new_Chevyshev2BandStopFilter, swig_delete_Chevyshev2BandStopFilter, swig_Chevyshev2BandStopFilter_methods, swig_Chevyshev2BandStopFilter_attributes, &swig_Chevyshev2BandStopFilter_Sf_SwigStatic, swig_Chevyshev2BandStopFilter_meta, swig_Chevyshev2BandStopFilter_bases, swig_Chevyshev2BandStopFilter_base_names };

static int _wrap_interleave(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< double > *arg1 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::do_interleave< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::do_interleave< SampleType >",1,"DSP::SampleMatrix< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("interleave",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR do_interleave< SampleType >((DSP::SampleMatrix< double > const &)*arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deinterleave(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleMatrix< double > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  SWIG_check_num_args("DSP::do_deinterleave< SampleType >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::do_deinterleave< SampleType >",1,"DSP::SampleMatrix< double > &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::do_deinterleave< SampleType >",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::do_deinterleave< SampleType >",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::do_deinterleave< SampleType >",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleMatrixT_double_t,0))){
    SWIG_fail_ptr("deinterleave",1,SWIGTYPE_p_DSP__SampleMatrixT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("deinterleave",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  DSP::SWIGTEMPLATEDISAMBIGUATOR do_deinterleave< SampleType >(*arg1,(double const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > *arg4 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::bessel_lowpass< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_lowpass< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bessel_lowpass< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::bessel_lowpass< SampleType >",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::bessel_lowpass< SampleType >",4,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("bessel_lowpass",4,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_lowpass< SampleType >(arg1,arg2,arg3,(DSP::SampleVector< double > const &)*arg4);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_highpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > *arg4 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::bessel_highpass< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_highpass< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bessel_highpass< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::bessel_highpass< SampleType >",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::bessel_highpass< SampleType >",4,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("bessel_highpass",4,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_highpass< SampleType >(arg1,arg2,arg3,(DSP::SampleVector< double > const &)*arg4);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::SampleVector< double > *arg5 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::bessel_bandpass< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_bandpass< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bessel_bandpass< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::bessel_bandpass< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::bessel_bandpass< SampleType >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::bessel_bandpass< SampleType >",5,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("bessel_bandpass",5,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_bandpass< SampleType >(arg1,arg2,arg3,arg4,(DSP::SampleVector< double > const &)*arg5);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::SampleVector< double > *arg5 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::bessel_bandstop< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_bandstop< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bessel_bandstop< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::bessel_bandstop< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::bessel_bandstop< SampleType >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::bessel_bandstop< SampleType >",5,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("bessel_bandstop",5,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_bandstop< SampleType >(arg1,arg2,arg3,arg4,(DSP::SampleVector< double > const &)*arg5);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > *arg4 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::butterworth_lowpass< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_lowpass< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::butterworth_lowpass< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::butterworth_lowpass< SampleType >",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::butterworth_lowpass< SampleType >",4,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("butterworth_lowpass",4,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_lowpass< SampleType >(arg1,arg2,arg3,(DSP::SampleVector< double > const &)*arg4);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_highpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::SampleVector< double > *arg4 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::butterworth_highpass< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_highpass< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::butterworth_highpass< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::butterworth_highpass< SampleType >",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::butterworth_highpass< SampleType >",4,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("butterworth_highpass",4,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_highpass< SampleType >(arg1,arg2,arg3,(DSP::SampleVector< double > const &)*arg4);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::SampleVector< double > *arg5 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::butterworth_bandpass< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_bandpass< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::butterworth_bandpass< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::butterworth_bandpass< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::butterworth_bandpass< SampleType >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::butterworth_bandpass< SampleType >",5,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("butterworth_bandpass",5,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_bandpass< SampleType >(arg1,arg2,arg3,arg4,(DSP::SampleVector< double > const &)*arg5);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::SampleVector< double > *arg5 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::butterworth_bandstop< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_bandstop< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::butterworth_bandstop< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::butterworth_bandstop< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::butterworth_bandstop< SampleType >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::butterworth_bandstop< SampleType >",5,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("butterworth_bandstop",5,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_bandstop< SampleType >(arg1,arg2,arg3,arg4,(DSP::SampleVector< double > const &)*arg5);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::SampleVector< double > *arg5 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev1_lowpass< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_lowpass< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev1_lowpass< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev1_lowpass< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev1_lowpass< SampleType >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev1_lowpass< SampleType >",5,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev1_lowpass",5,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_lowpass< SampleType >(arg1,arg2,arg3,arg4,(DSP::SampleVector< double > const &)*arg5);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_highpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::SampleVector< double > *arg5 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev1_highpass< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_highpass< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev1_highpass< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev1_highpass< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev1_highpass< SampleType >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev1_highpass< SampleType >",5,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev1_highpass",5,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_highpass< SampleType >(arg1,arg2,arg3,arg4,(DSP::SampleVector< double > const &)*arg5);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  DSP::SampleVector< double > *arg6 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev1_bandpass< SampleType >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_bandpass< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev1_bandpass< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev1_bandpass< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev1_bandpass< SampleType >",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::chebyshev1_bandpass< SampleType >",5,"double");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev1_bandpass< SampleType >",6,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev1_bandpass",6,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_bandpass< SampleType >(arg1,arg2,arg3,arg4,arg5,(DSP::SampleVector< double > const &)*arg6);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  DSP::SampleVector< double > *arg6 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev1_bandstop< SampleType >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_bandstop< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev1_bandstop< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev1_bandstop< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev1_bandstop< SampleType >",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::chebyshev1_bandstop< SampleType >",5,"double");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev1_bandstop< SampleType >",6,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev1_bandstop",6,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_bandstop< SampleType >(arg1,arg2,arg3,arg4,arg5,(DSP::SampleVector< double > const &)*arg6);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::SampleVector< double > *arg5 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev2_lowpass< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_lowpass< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev2_lowpass< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev2_lowpass< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev2_lowpass< SampleType >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev2_lowpass< SampleType >",5,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev2_lowpass",5,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_lowpass< SampleType >(arg1,arg2,arg3,arg4,(DSP::SampleVector< double > const &)*arg5);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_highpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::SampleVector< double > *arg5 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev2_highpass< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_highpass< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev2_highpass< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev2_highpass< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev2_highpass< SampleType >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev2_highpass< SampleType >",5,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev2_highpass",5,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_highpass< SampleType >(arg1,arg2,arg3,arg4,(DSP::SampleVector< double > const &)*arg5);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  DSP::SampleVector< double > *arg6 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev2_bandpass< SampleType >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_bandpass< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev2_bandpass< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev2_bandpass< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev2_bandpass< SampleType >",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::chebyshev2_bandpass< SampleType >",5,"double");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev2_bandpass< SampleType >",6,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev2_bandpass",6,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_bandpass< SampleType >(arg1,arg2,arg3,arg4,arg5,(DSP::SampleVector< double > const &)*arg6);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  DSP::SampleVector< double > *arg6 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev2_bandstop< SampleType >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_bandstop< SampleType >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev2_bandstop< SampleType >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev2_bandstop< SampleType >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev2_bandstop< SampleType >",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::chebyshev2_bandstop< SampleType >",5,"double");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev2_bandstop< SampleType >",6,"DSP::SampleVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev2_bandstop",6,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_bandstop< SampleType >(arg1,arg2,arg3,arg4,arg5,(DSP::SampleVector< double > const &)*arg6);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convolve(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::convolve< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::convolve< SampleType >",1,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::convolve< SampleType >",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("convolve",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("convolve",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR convolve< SampleType >((DSP::SampleVector< double > const &)*arg1,(DSP::SampleVector< double > const &)*arg2);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConvolveFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  DSP::ConvolveFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< SampleType >::ConvolveFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::ConvolveFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::ConvolveFilter",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::ConvolveFilter< SampleType > *)new DSP::ConvolveFilter< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ConvolveFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConvolveFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::ConvolveFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< SampleType >::ConvolveFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::ConvolveFilter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::ConvolveFilter< SampleType > *)new DSP::ConvolveFilter< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ConvolveFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConvolveFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  size_t arg2 ;
  DSP::ConvolveFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< SampleType >::ConvolveFilter",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::ConvolveFilter",1,"DSP::SampleVector< double > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::ConvolveFilter",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("new_ConvolveFilter",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::ConvolveFilter< SampleType > *)new DSP::ConvolveFilter< SampleType >(*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ConvolveFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConvolveFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  DSP::ConvolveFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< SampleType >::ConvolveFilter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::ConvolveFilter",1,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("new_ConvolveFilter",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  result = (DSP::ConvolveFilter< SampleType > *)new DSP::ConvolveFilter< SampleType >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ConvolveFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConvolveFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ConvolveFilter__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ConvolveFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ConvolveFilter__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ConvolveFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ConvolveFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ConvolveFilter< SampleType >::ConvolveFilter(size_t,size_t)\n"
    "    DSP::ConvolveFilter< SampleType >::ConvolveFilter(size_t)\n"
    "    DSP::ConvolveFilter< SampleType >::ConvolveFilter(DSP::SampleVector< double > &,size_t)\n"
    "    DSP::ConvolveFilter< SampleType >::ConvolveFilter(DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_ConvolveFilter_set_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ConvolveFilter< SampleType > *arg1 = (DSP::ConvolveFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< SampleType >::set_data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::set_data",1,"DSP::ConvolveFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::set_data",2,"DSP::SampleVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ConvolveFilterT_double_t,0))){
    SWIG_fail_ptr("ConvolveFilter_set_data",1,SWIGTYPE_p_DSP__ConvolveFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ConvolveFilter_set_data",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->set_data((DSP::SampleVector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolveFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ConvolveFilter< SampleType > *arg1 = (DSP::ConvolveFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::reset",1,"DSP::ConvolveFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ConvolveFilterT_double_t,0))){
    SWIG_fail_ptr("ConvolveFilter_reset",1,SWIGTYPE_p_DSP__ConvolveFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolveFilter_input_block_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ConvolveFilter< SampleType > *arg1 = (DSP::ConvolveFilter< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::ConvolveFilter< SampleType >::input_block_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::input_block_size",1,"DSP::ConvolveFilter< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ConvolveFilterT_double_t,0))){
    SWIG_fail_ptr("ConvolveFilter_input_block_size",1,SWIGTYPE_p_DSP__ConvolveFilterT_double_t);
  }
  
  result = ((DSP::ConvolveFilter< SampleType > const *)arg1)->input_block_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolveFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ConvolveFilter< SampleType > *arg1 = (DSP::ConvolveFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::apply",1,"DSP::ConvolveFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::apply",2,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ConvolveFilterT_double_t,0))){
    SWIG_fail_ptr("ConvolveFilter_apply",1,SWIGTYPE_p_DSP__ConvolveFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ConvolveFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolveFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ConvolveFilter< SampleType > *arg1 = (DSP::ConvolveFilter< SampleType > *) 0 ;
  DSP::SampleVector< double > *arg2 = 0 ;
  DSP::SampleVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::apply",1,"DSP::ConvolveFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::apply",2,"DSP::SampleVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ConvolveFilter< SampleType >::apply",3,"DSP::SampleVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ConvolveFilterT_double_t,0))){
    SWIG_fail_ptr("ConvolveFilter_apply",1,SWIGTYPE_p_DSP__ConvolveFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ConvolveFilter_apply",2,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("ConvolveFilter_apply",3,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  (arg1)->apply((DSP::SampleVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolveFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ConvolveFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ConvolveFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ConvolveFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ConvolveFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ConvolveFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ConvolveFilter< SampleType >::apply(DSP::SampleVector< double > &)\n"
    "    DSP::ConvolveFilter< SampleType >::apply(DSP::SampleVector< double > const &,DSP::SampleVector< double > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_ConvolveFilter(void *obj) {
DSP::ConvolveFilter< SampleType > *arg1 = (DSP::ConvolveFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ConvolveFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ConvolveFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ConvolveFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ConvolveFilter_methods[]= {
    { "set_data", _wrap_ConvolveFilter_set_data},
    { "reset", _wrap_ConvolveFilter_reset},
    { "input_block_size", _wrap_ConvolveFilter_input_block_size},
    { "apply", _wrap_ConvolveFilter_apply},
    {0,0}
};
static swig_lua_method swig_ConvolveFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ConvolveFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ConvolveFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ConvolveFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ConvolveFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ConvolveFilter_Sf_SwigStatic = {
    "ConvolveFilter",
    swig_ConvolveFilter_Sf_SwigStatic_methods,
    swig_ConvolveFilter_Sf_SwigStatic_attributes,
    swig_ConvolveFilter_Sf_SwigStatic_constants,
    swig_ConvolveFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ConvolveFilter_bases[] = {0};
static const char *swig_ConvolveFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ConvolveFilter = { "ConvolveFilter", "ConvolveFilter", &SWIGTYPE_p_DSP__ConvolveFilterT_double_t,_proxy__wrap_new_ConvolveFilter, swig_delete_ConvolveFilter, swig_ConvolveFilter_methods, swig_ConvolveFilter_attributes, &swig_ConvolveFilter_Sf_SwigStatic, swig_ConvolveFilter_meta, swig_ConvolveFilter_bases, swig_ConvolveFilter_base_names };

static int _wrap_load_wav(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::load_wav< SampleType >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::load_wav< SampleType >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR load_wav< SampleType >((char const *)arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_save_wav__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int arg4 ;
  double arg5 ;
  bool arg6 ;
  
  SWIG_check_num_args("DSP::write_wav< SampleType >",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::write_wav< SampleType >",1,"DSP::SampleVector< double > &");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("DSP::write_wav< SampleType >",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::write_wav< SampleType >",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::write_wav< SampleType >",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::write_wav< SampleType >",5,"double");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("DSP::write_wav< SampleType >",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("save_wav",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  DSP::SWIGTEMPLATEDISAMBIGUATOR write_wav< SampleType >(*arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_save_wav__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::SampleVector< double > *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int arg4 ;
  double arg5 ;
  
  SWIG_check_num_args("DSP::write_wav< SampleType >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::write_wav< SampleType >",1,"DSP::SampleVector< double > &");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("DSP::write_wav< SampleType >",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::write_wav< SampleType >",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::write_wav< SampleType >",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::write_wav< SampleType >",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__SampleVectorT_double_t,0))){
    SWIG_fail_ptr("save_wav",1,SWIGTYPE_p_DSP__SampleVectorT_double_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  DSP::SWIGTEMPLATEDISAMBIGUATOR write_wav< SampleType >(*arg1,(char const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_save_wav(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_save_wav__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__SampleVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_save_wav__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'save_wav'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::write_wav< SampleType >(DSP::SampleVector< double > &,char const *,size_t,int,double,bool)\n"
    "    DSP::write_wav< SampleType >(DSP::SampleVector< double > &,char const *,size_t,int,double)\n");
  lua_error(L);return 0;
}


static int _wrap_load_mp3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::load_mp3< SampleType >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::load_mp3< SampleType >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR load_mp3< SampleType >((char const *)arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_load_flac(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::SampleVector< double > result;
  
  SWIG_check_num_args("DSP::load_flac< SampleType >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::load_flac< SampleType >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR load_flac< SampleType >((char const *)arg1);
  {
    DSP::SampleVector< double > * resultptr = new DSP::SampleVector< double >((const DSP::SampleVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__SampleVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("seek_current", kfr::seek_origin::current)},
    {SWIG_LUA_CONSTTAB_INT("seek_begin", kfr::seek_origin::begin)},
    {SWIG_LUA_CONSTTAB_INT("seek_end", kfr::seek_origin::end)},
    {SWIG_LUA_CONSTTAB_INT("sample_i8", kfr::audio_sample_type::i8)},
    {SWIG_LUA_CONSTTAB_INT("sample_i16", kfr::audio_sample_type::i16)},
    {SWIG_LUA_CONSTTAB_INT("sample_i24", kfr::audio_sample_type::i24)},
    {SWIG_LUA_CONSTTAB_INT("sample_i32", kfr::audio_sample_type::i32)},
    {SWIG_LUA_CONSTTAB_INT("sample_i64", kfr::audio_sample_type::i64)},
    {SWIG_LUA_CONSTTAB_INT("sample_f32", kfr::audio_sample_type::f32)},
    {SWIG_LUA_CONSTTAB_INT("sample_f64", kfr::audio_sample_type::f64)},
    { SWIG_LUA_CONSTTAB_POINTER("BesselFilter_maxorder",&DSP::BesselFilter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    { SWIG_LUA_CONSTTAB_POINTER("ButterworthFilter_maxorder",&DSP::ButterworthFilter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    { SWIG_LUA_CONSTTAB_POINTER("Chevyshev1Filter_maxorder",&DSP::Chebyshev1Filter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    { SWIG_LUA_CONSTTAB_POINTER("Chevyshev2Filter_maxorder",&DSP::Chebyshev2Filter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    {SWIG_LUA_CONSTTAB_INT("audio_sample_unknown", kfr::audio_sample_type::unknown)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_i8", kfr::audio_sample_type::i8)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_i16", kfr::audio_sample_type::i16)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_i24", kfr::audio_sample_type::i24)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_i32", kfr::audio_sample_type::i32)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_i64", kfr::audio_sample_type::i64)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_f32", kfr::audio_sample_type::f32)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_f64", kfr::audio_sample_type::f64)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "dB_to_string", _wrap_dB_to_string},
    { "dB_to_utf8string", _wrap_dB_to_utf8string},
    { "biquad_filter", _wrap_biquad_filter},
    { "notch_params", _wrap_notch_params},
    { "lowpass_params", _wrap_lowpass_params},
    { "highpass_params", _wrap_highpass_params},
    { "peak_params", _wrap_peak_params},
    { "lowshelf_params", _wrap_lowshelf_params},
    { "highshelf_params", _wrap_highshelf_params},
    { "bandpass_params", _wrap_bandpass_params},
    { "normalize_frequency", _wrap_normalize_frequency},
    { "linspace", _wrap_linspace},
    { "pad", _wrap_pad},
    { "slice", _wrap_slice},
    { "truncate", _wrap_truncate},
    { "reverse", _wrap_reverse},
    { "ringbuf_read", _wrap_ringbuf_read},
    { "ringbuf_write", _wrap_ringbuf_write},
    { "abs", _wrap_abs},
    { "add", _wrap_add},
    { "absmax", _wrap_absmax},
    { "absmin", _wrap_absmin},
    { "clamp", _wrap_clamp},
    { "cube", _wrap_cube},
    { "div", _wrap_div},
    { "fmadd", _wrap_fmadd},
    { "fmsub", _wrap_fmsub},
    { "max", _wrap_max},
    { "min", _wrap_min},
    { "mix", _wrap_mix},
    { "mixs", _wrap_mixs},
    { "mul", _wrap_mul},
    { "neg", _wrap_neg},
    { "sqr", _wrap_sqr},
    { "sqrt", _wrap_sqrt},
    { "exp", _wrap_exp},
    { "exp10", _wrap_exp10},
    { "exp2", _wrap_exp2},
    { "exp_fmadd", _wrap_exp_fmadd},
    { "log", _wrap_log},
    { "log10", _wrap_log10},
    { "log2", _wrap_log2},
    { "log_fmadd", _wrap_log_fmadd},
    { "logb", _wrap_logb},
    { "logm", _wrap_logm},
    { "logn", _wrap_logn},
    { "pow", _wrap_pow},
    { "root", _wrap_root},
    { "floor", _wrap_floor},
    { "acos", _wrap_acos},
    { "asin", _wrap_asin},
    { "atan", _wrap_atan},
    { "atan2", _wrap_atan2},
    { "cos", _wrap_cos},
    { "sin", _wrap_sin},
    { "tan", _wrap_tan},
    { "cosh", _wrap_cosh},
    { "coth", _wrap_coth},
    { "sinh", _wrap_sinh},
    { "tanh", _wrap_tanh},
    { "atan2deg", _wrap_atan2deg},
    { "cosdeg", _wrap_cosdeg},
    { "sindeg", _wrap_sindeg},
    { "sinc", _wrap_sinc},
    { "gamma", _wrap_gamma},
    { "absmaxof", _wrap_absmaxof},
    { "dot", _wrap_dot},
    { "maxof", _wrap_maxof},
    { "minof", _wrap_minof},
    { "mean", _wrap_mean},
    { "product", _wrap_product},
    { "rms", _wrap_rms},
    { "sum", _wrap_sum},
    { "sumsqr", _wrap_sumsqr},
    { "ipow", _wrap_ipow},
    { "cos2x", _wrap_cos2x},
    { "sin2x", _wrap_sin2x},
    { "cos3x", _wrap_cos3x},
    { "sin3x", _wrap_sin3x},
    { "reciprocal", _wrap_reciprocal},
    { "acosh", _wrap_acosh},
    { "asinh", _wrap_asinh},
    { "atanh", _wrap_atanh},
    { "cbrt", _wrap_cbrt},
    { "ceil", _wrap_ceil},
    { "copysign", _wrap_copysign},
    { "erf", _wrap_erf},
    { "erfc", _wrap_erfc},
    { "expm1", _wrap_expm1},
    { "fdim", _wrap_fdim},
    { "fma", _wrap_fma},
    { "fmax", _wrap_fmax},
    { "fmin", _wrap_fmin},
    { "fmod", _wrap_fmod},
    { "fpclassify", _wrap_fpclassify},
    { "hypot", _wrap_hypot},
    { "ilogb", _wrap_ilogb},
    { "isfinite", _wrap_isfinite},
    { "isgreater", _wrap_isgreater},
    { "isgreaterequal", _wrap_isgreaterequal},
    { "isinf", _wrap_isinf},
    { "isless", _wrap_isless},
    { "islessequal", _wrap_islessequal},
    { "isnan", _wrap_isnan},
    { "isnormal", _wrap_isnormal},
    { "isunordered", _wrap_isunordered},
    { "ldexp", _wrap_ldexp},
    { "lgamma", _wrap_lgamma},
    { "llrint", _wrap_llrint},
    { "llround", _wrap_llround},
    { "log1p", _wrap_log1p},
    { "lrint", _wrap_lrint},
    { "lround", _wrap_lround},
    { "nan", _wrap_nan},
    { "nanf", _wrap_nanf},
    { "nanl", _wrap_nanl},
    { "nearbyint", _wrap_nearbyint},
    { "nextafter", _wrap_nextafter},
    { "nexttoward", _wrap_nexttoward},
    { "remainder", _wrap_remainder},
    { "rint", _wrap_rint},
    { "round", _wrap_round},
    { "scalbln", _wrap_scalbln},
    { "scalbn", _wrap_scalbn},
    { "square", _wrap_square},
    { "tgamma", _wrap_tgamma},
    { "trunc", _wrap_trunc},
    { "make_complex", _wrap_make_complex},
    { "make_univector", _wrap_make_univector},
    { "window_hann", _wrap_window_hann},
    { "window_hamming", _wrap_window_hamming},
    { "window_blackman", _wrap_window_blackman},
    { "window_blackman_harris", _wrap_window_blackman_harris},
    { "window_gaussian", _wrap_window_gaussian},
    { "window_triangular", _wrap_window_triangular},
    { "window_bartlett", _wrap_window_bartlett},
    { "window_cosine", _wrap_window_cosine},
    { "window_bartlett_hann", _wrap_window_bartlett_hann},
    { "window_bohman", _wrap_window_bohman},
    { "window_lanczos", _wrap_window_lanczos},
    { "window_flattop", _wrap_window_flattop},
    { "window_kaiser", _wrap_window_kaiser},
    { "window_hann_ptr", _wrap_window_hann_ptr},
    { "window_hamming_ptr", _wrap_window_hamming_ptr},
    { "window_blackman_ptr", _wrap_window_blackman_ptr},
    { "window_blackman_harris_ptr", _wrap_window_blackman_harris_ptr},
    { "window_gaussian_ptr", _wrap_window_gaussian_ptr},
    { "window_triangular_ptr", _wrap_window_triangular_ptr},
    { "window_bartlett_ptr", _wrap_window_bartlett_ptr},
    { "window_cosine_ptr", _wrap_window_cosine_ptr},
    { "window_bartlett_hann_ptr", _wrap_window_bartlett_hann_ptr},
    { "window_bohman_ptr", _wrap_window_bohman_ptr},
    { "window_lanczos_ptr", _wrap_window_lanczos_ptr},
    { "window_flattop_ptr", _wrap_window_flattop_ptr},
    { "window_kaiser_ptr", _wrap_window_kaiser_ptr},
    { "dftf", _wrap_dftf},
    { "realdftf", _wrap_realdftf},
    { "idftf", _wrap_idftf},
    { "irealdftf", _wrap_irealdftf},
    { "dftd", _wrap_dftd},
    { "realdftd", _wrap_realdftd},
    { "idftd", _wrap_idftd},
    { "irealdftd", _wrap_irealdftd},
    { "energy_to_loudness", _wrap_energy_to_loudness},
    { "loudness_to_energy", _wrap_loudness_to_energy},
    { "dcremove", _wrap_dcremove},
    { "random", _wrap_random},
    { "plot_save", _wrap_plot_save},
    { "plot_show", _wrap_plot_show},
    { "sinewave", _wrap_sinewave},
    { "squarewave", _wrap_squarewave},
    { "trianglewave", _wrap_trianglewave},
    { "sawtoothwave", _wrap_sawtoothwave},
    { "generate_sine", _wrap_generate_sine},
    { "generate_linear", _wrap_generate_linear},
    { "generate_exp", _wrap_generate_exp},
    { "generate_exp2", _wrap_generate_exp2},
    { "generate_cossin", _wrap_generate_cossin},
    { "autocorrelate", _wrap_autocorrelate},
    { "correlate", _wrap_correlate},
    { "resample", _wrap_resample},
    { "convert_sample", _wrap_convert_sample},
    { "amp_to_dB", _wrap_amp_to_dB},
    { "fir_lowpass", _wrap_fir_lowpass},
    { "fir_highpass", _wrap_fir_highpass},
    { "fir_bandpass", _wrap_fir_bandpass},
    { "fir_bandstop", _wrap_fir_bandstop},
    { "interleave", _wrap_interleave},
    { "deinterleave", _wrap_deinterleave},
    { "bessel_lowpass", _wrap_bessel_lowpass},
    { "bessel_highpass", _wrap_bessel_highpass},
    { "bessel_bandpass", _wrap_bessel_bandpass},
    { "bessel_bandstop", _wrap_bessel_bandstop},
    { "butterworth_lowpass", _wrap_butterworth_lowpass},
    { "butterworth_highpass", _wrap_butterworth_highpass},
    { "butterworth_bandpass", _wrap_butterworth_bandpass},
    { "butterworth_bandstop", _wrap_butterworth_bandstop},
    { "chebyshev1_lowpass", _wrap_chebyshev1_lowpass},
    { "chebyshev1_highpass", _wrap_chebyshev1_highpass},
    { "chebyshev1_bandpass", _wrap_chebyshev1_bandpass},
    { "chebyshev1_bandstop", _wrap_chebyshev1_bandstop},
    { "chebyshev2_lowpass", _wrap_chebyshev2_lowpass},
    { "chebyshev2_highpass", _wrap_chebyshev2_highpass},
    { "chebyshev2_bandpass", _wrap_chebyshev2_bandpass},
    { "chebyshev2_bandstop", _wrap_chebyshev2_bandstop},
    { "convolve", _wrap_convolve},
    { "load_wav", _wrap_load_wav},
    { "save_wav", _wrap_save_wav},
    { "load_mp3", _wrap_load_mp3},
    { "load_flac", _wrap_load_flac},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_float_vector,
&_wrap_class_double_vector,
&_wrap_class_int8_vector,
&_wrap_class_uint8_vector,
&_wrap_class_int16_vector,
&_wrap_class_uint16_vector,
&_wrap_class_int32_vector,
&_wrap_class_uint32_vector,
&_wrap_class_int64_vector,
&_wrap_class_Vector,
&_wrap_class_Vector2D,
&_wrap_class_Biquad,
&_wrap_class_BiquadParams,
&_wrap_class_NotchFilter,
&_wrap_class_LowpassFilter,
&_wrap_class_HighpassFilter,
&_wrap_class_BandpassFilter,
&_wrap_class_PeakFilter,
&_wrap_class_LowShelfFilter,
&_wrap_class_HighShelfFilter,
&_wrap_class_WavReader,
&_wrap_class_WavWriter,
&_wrap_class_Mp3Reader,
&_wrap_class_FlacReader,
&_wrap_class_DCTPlan,
&_wrap_class_DFTPlan,
&_wrap_class_DFTRealPlan,
&_wrap_class_FIRFilter,
&_wrap_class_FIRBandpassFilter,
&_wrap_class_FIRLowpassFilter,
&_wrap_class_FIRHighpassFilter,
&_wrap_class_FIRBandstopFilter,
&_wrap_class_BesselFilter,
&_wrap_class_BesselLowPassFilter,
&_wrap_class_BesselHighPassFilter,
&_wrap_class_BesselBandPassFilter,
&_wrap_class_BesselBandStopFilter,
&_wrap_class_ButterworthFilter,
&_wrap_class_ButterworthLowPassFilter,
&_wrap_class_ButterworthHighPassFilter,
&_wrap_class_ButterworthBandPassFilter,
&_wrap_class_ButterworthBandStopFilter,
&_wrap_class_Chevyshev1Filter,
&_wrap_class_Chevyshev1LowPassFilter,
&_wrap_class_Chevyshev1HighPassFilter,
&_wrap_class_Chevyshev1BandPassFilter,
&_wrap_class_Chevyshev1BandStopFilter,
&_wrap_class_Chevyshev2Filter,
&_wrap_class_Chevyshev2LowPassFilter,
&_wrap_class_Chevyshev2HighPassFilter,
&_wrap_class_Chevyshev2BandPassFilter,
&_wrap_class_Chevyshev2BandStopFilter,
&_wrap_class_ConvolveFilter,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "kfr2",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_DSP__BandPassFilterT_double_t = {"_p_DSP__BandPassFilterT_double_t", "DSP::BandPassFilter< double > *|DSP::BandPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_BandpassFilter, 0};
static swig_type_info _swigt__p_DSP__BesselBandPassFilterT_double_t = {"_p_DSP__BesselBandPassFilterT_double_t", "DSP::BesselBandPassFilter< double > *|DSP::BesselBandPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_BesselBandPassFilter, 0};
static swig_type_info _swigt__p_DSP__BesselBandStopFilterT_double_t = {"_p_DSP__BesselBandStopFilterT_double_t", "DSP::BesselBandStopFilter< double > *|DSP::BesselBandStopFilter< SampleType > *", 0, 0, (void*)&_wrap_class_BesselBandStopFilter, 0};
static swig_type_info _swigt__p_DSP__BesselFilterT_double_t = {"_p_DSP__BesselFilterT_double_t", "DSP::BesselFilter< double > *|DSP::BesselFilter< SampleType > *", 0, 0, (void*)&_wrap_class_BesselFilter, 0};
static swig_type_info _swigt__p_DSP__BesselHighPassFilterT_double_t = {"_p_DSP__BesselHighPassFilterT_double_t", "DSP::BesselHighPassFilter< double > *|DSP::BesselHighPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_BesselHighPassFilter, 0};
static swig_type_info _swigt__p_DSP__BesselLowPassFilterT_double_t = {"_p_DSP__BesselLowPassFilterT_double_t", "DSP::BesselLowPassFilter< double > *|DSP::BesselLowPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_BesselLowPassFilter, 0};
static swig_type_info _swigt__p_DSP__BiQuadParamsT_double_t = {"_p_DSP__BiQuadParamsT_double_t", "DSP::BiQuadParams< double > *|DSP::BiQuadParams< SampleType > *", 0, 0, (void*)&_wrap_class_BiquadParams, 0};
static swig_type_info _swigt__p_DSP__BiquadT_double_t = {"_p_DSP__BiquadT_double_t", "DSP::Biquad< double > *|DSP::Biquad< SampleType > *", 0, 0, (void*)&_wrap_class_Biquad, 0};
static swig_type_info _swigt__p_DSP__ButterworthBandPassFilterT_double_t = {"_p_DSP__ButterworthBandPassFilterT_double_t", "DSP::ButterworthBandPassFilter< double > *|DSP::ButterworthBandPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_ButterworthBandPassFilter, 0};
static swig_type_info _swigt__p_DSP__ButterworthBandStopFilterT_double_t = {"_p_DSP__ButterworthBandStopFilterT_double_t", "DSP::ButterworthBandStopFilter< double > *|DSP::ButterworthBandStopFilter< SampleType > *", 0, 0, (void*)&_wrap_class_ButterworthBandStopFilter, 0};
static swig_type_info _swigt__p_DSP__ButterworthFilterT_double_t = {"_p_DSP__ButterworthFilterT_double_t", "DSP::ButterworthFilter< double > *|DSP::ButterworthFilter< SampleType > *", 0, 0, (void*)&_wrap_class_ButterworthFilter, 0};
static swig_type_info _swigt__p_DSP__ButterworthHighPassFilterT_double_t = {"_p_DSP__ButterworthHighPassFilterT_double_t", "DSP::ButterworthHighPassFilter< double > *|DSP::ButterworthHighPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_ButterworthHighPassFilter, 0};
static swig_type_info _swigt__p_DSP__ButterworthLowPassFilterT_double_t = {"_p_DSP__ButterworthLowPassFilterT_double_t", "DSP::ButterworthLowPassFilter< double > *|DSP::ButterworthLowPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_ButterworthLowPassFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1BandPassFilterT_double_t = {"_p_DSP__Chebyshev1BandPassFilterT_double_t", "DSP::Chebyshev1BandPassFilter< double > *|DSP::Chebyshev1BandPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_Chevyshev1BandPassFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1BandStopFilterT_double_t = {"_p_DSP__Chebyshev1BandStopFilterT_double_t", "DSP::Chebyshev1BandStopFilter< double > *|DSP::Chebyshev1BandStopFilter< SampleType > *", 0, 0, (void*)&_wrap_class_Chevyshev1BandStopFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1FilterT_double_t = {"_p_DSP__Chebyshev1FilterT_double_t", "DSP::Chebyshev1Filter< double > *|DSP::Chebyshev1Filter< SampleType > *", 0, 0, (void*)&_wrap_class_Chevyshev1Filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1HighPassFilterT_double_t = {"_p_DSP__Chebyshev1HighPassFilterT_double_t", "DSP::Chebyshev1HighPassFilter< double > *|DSP::Chebyshev1HighPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_Chevyshev1HighPassFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1LowPassFilterT_double_t = {"_p_DSP__Chebyshev1LowPassFilterT_double_t", "DSP::Chebyshev1LowPassFilter< double > *|DSP::Chebyshev1LowPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_Chevyshev1LowPassFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2BandPassFilterT_double_t = {"_p_DSP__Chebyshev2BandPassFilterT_double_t", "DSP::Chebyshev2BandPassFilter< double > *|DSP::Chebyshev2BandPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_Chevyshev2BandPassFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2BandStopFilterT_double_t = {"_p_DSP__Chebyshev2BandStopFilterT_double_t", "DSP::Chebyshev2BandStopFilter< double > *|DSP::Chebyshev2BandStopFilter< SampleType > *", 0, 0, (void*)&_wrap_class_Chevyshev2BandStopFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2FilterT_double_t = {"_p_DSP__Chebyshev2FilterT_double_t", "DSP::Chebyshev2Filter< double > *|DSP::Chebyshev2Filter< SampleType > *", 0, 0, (void*)&_wrap_class_Chevyshev2Filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2HighPassFilterT_double_t = {"_p_DSP__Chebyshev2HighPassFilterT_double_t", "DSP::Chebyshev2HighPassFilter< double > *|DSP::Chebyshev2HighPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_Chevyshev2HighPassFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2LowPassFilterT_double_t = {"_p_DSP__Chebyshev2LowPassFilterT_double_t", "DSP::Chebyshev2LowPassFilter< double > *|DSP::Chebyshev2LowPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_Chevyshev2LowPassFilter, 0};
static swig_type_info _swigt__p_DSP__ComplexT_double_t = {"_p_DSP__ComplexT_double_t", "DSP::Complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DSP__ConvolveFilterT_double_t = {"_p_DSP__ConvolveFilterT_double_t", "DSP::ConvolveFilter< double > *|DSP::ConvolveFilter< SampleType > *", 0, 0, (void*)&_wrap_class_ConvolveFilter, 0};
static swig_type_info _swigt__p_DSP__DCTPlanT_double_t = {"_p_DSP__DCTPlanT_double_t", "DSP::DCTPlan< double > *|DSP::DCTPlan< SampleType > *", 0, 0, (void*)&_wrap_class_DCTPlan, 0};
static swig_type_info _swigt__p_DSP__DFTPlanT_double_t = {"_p_DSP__DFTPlanT_double_t", "DSP::DFTPlan< double > *|DSP::DFTPlan< SampleType > *", 0, 0, (void*)&_wrap_class_DFTPlan, 0};
static swig_type_info _swigt__p_DSP__DFTRealPlanT_double_t = {"_p_DSP__DFTRealPlanT_double_t", "DSP::DFTRealPlan< double > *|DSP::DFTRealPlan< SampleType > *", 0, 0, (void*)&_wrap_class_DFTRealPlan, 0};
static swig_type_info _swigt__p_DSP__FIRBandpassFilterT_double_t = {"_p_DSP__FIRBandpassFilterT_double_t", "DSP::FIRBandpassFilter< double > *|DSP::FIRBandpassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_FIRBandpassFilter, 0};
static swig_type_info _swigt__p_DSP__FIRBandstopFilterT_double_t = {"_p_DSP__FIRBandstopFilterT_double_t", "DSP::FIRBandstopFilter< double > *|DSP::FIRBandstopFilter< SampleType > *", 0, 0, (void*)&_wrap_class_FIRBandstopFilter, 0};
static swig_type_info _swigt__p_DSP__FIRFilterT_double_t = {"_p_DSP__FIRFilterT_double_t", "DSP::FIRFilter< double > *|DSP::FIRFilter< SampleType > *", 0, 0, (void*)&_wrap_class_FIRFilter, 0};
static swig_type_info _swigt__p_DSP__FIRHighpassFilterT_double_t = {"_p_DSP__FIRHighpassFilterT_double_t", "DSP::FIRHighpassFilter< double > *|DSP::FIRHighpassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_FIRHighpassFilter, 0};
static swig_type_info _swigt__p_DSP__FIRLowpassFilterT_double_t = {"_p_DSP__FIRLowpassFilterT_double_t", "DSP::FIRLowpassFilter< double > *|DSP::FIRLowpassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_FIRLowpassFilter, 0};
static swig_type_info _swigt__p_DSP__FlacReaderT_double_t = {"_p_DSP__FlacReaderT_double_t", "DSP::FlacReader< double > *|DSP::FlacReader< SampleType > *", 0, 0, (void*)&_wrap_class_FlacReader, 0};
static swig_type_info _swigt__p_DSP__HighPassFilterT_double_t = {"_p_DSP__HighPassFilterT_double_t", "DSP::HighPassFilter< double > *|DSP::HighPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_HighpassFilter, 0};
static swig_type_info _swigt__p_DSP__HighShelfFilterT_double_t = {"_p_DSP__HighShelfFilterT_double_t", "DSP::HighShelfFilter< double > *|DSP::HighShelfFilter< SampleType > *", 0, 0, (void*)&_wrap_class_HighShelfFilter, 0};
static swig_type_info _swigt__p_DSP__LowPassFilterT_double_t = {"_p_DSP__LowPassFilterT_double_t", "DSP::LowPassFilter< double > *|DSP::LowPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_LowpassFilter, 0};
static swig_type_info _swigt__p_DSP__LowShelfFilterT_double_t = {"_p_DSP__LowShelfFilterT_double_t", "DSP::LowShelfFilter< double > *|DSP::LowShelfFilter< SampleType > *", 0, 0, (void*)&_wrap_class_LowShelfFilter, 0};
static swig_type_info _swigt__p_DSP__MP3ReaderT_double_t = {"_p_DSP__MP3ReaderT_double_t", "DSP::MP3Reader< double > *|DSP::MP3Reader< SampleType > *", 0, 0, (void*)&_wrap_class_Mp3Reader, 0};
static swig_type_info _swigt__p_DSP__NotchFilterT_double_t = {"_p_DSP__NotchFilterT_double_t", "DSP::NotchFilter< double > *|DSP::NotchFilter< SampleType > *", 0, 0, (void*)&_wrap_class_NotchFilter, 0};
static swig_type_info _swigt__p_DSP__PeakFilterT_double_t = {"_p_DSP__PeakFilterT_double_t", "DSP::PeakFilter< double > *|DSP::PeakFilter< SampleType > *", 0, 0, (void*)&_wrap_class_PeakFilter, 0};
static swig_type_info _swigt__p_DSP__SampleMatrixT_double_t = {"_p_DSP__SampleMatrixT_double_t", "DSP::SampleMatrix< double > *|DSP::SampleMatrix< SampleType > *", 0, 0, (void*)&_wrap_class_Vector2D, 0};
static swig_type_info _swigt__p_DSP__SampleVectorT_double_t = {"_p_DSP__SampleVectorT_double_t", "DSP::SampleVector< double > *|DSP::SampleVector< SampleType > *", 0, 0, (void*)&_wrap_class_Vector, 0};
static swig_type_info _swigt__p_DSP__SampleVectorT_kfr__complexT_double_t_t = {"_p_DSP__SampleVectorT_kfr__complexT_double_t_t", "DSP::SampleVector< kfr::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DSP__ScalarT_double_t = {"_p_DSP__ScalarT_double_t", "DSP::Scalar< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DSP__WavReaderT_double_t = {"_p_DSP__WavReaderT_double_t", "DSP::WavReader< double > *|DSP::WavReader< SampleType > *", 0, 0, (void*)&_wrap_class_WavReader, 0};
static swig_type_info _swigt__p_DSP__WavWriterT_double_t = {"_p_DSP__WavWriterT_double_t", "DSP::WavWriter< double > *|DSP::WavWriter< SampleType > *", 0, 0, (void*)&_wrap_class_WavWriter, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "f64 *|SampleType *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "f32 *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *|i32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__audio_format_and_length = {"_p_kfr__audio_format_and_length", "kfr::audio_format_and_length *|DSP::audio_format *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__audio_reader_flacT_double_t = {"_p_kfr__audio_reader_flacT_double_t", "kfr::audio_reader_flac< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__audio_reader_mp3T_double_t = {"_p_kfr__audio_reader_mp3T_double_t", "kfr::audio_reader_mp3< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__audio_writer_wavT_double_t = {"_p_kfr__audio_writer_wavT_double_t", "kfr::audio_writer_wav< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__biquad_filterT_double_t = {"_p_kfr__biquad_filterT_double_t", "kfr::biquad_filter< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__biquad_paramsT_double_t = {"_p_kfr__biquad_paramsT_double_t", "kfr::biquad_params< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__complexT_double_t = {"_p_kfr__complexT_double_t", "kfr::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__expression_pointerT_double_t = {"_p_kfr__expression_pointerT_double_t", "kfr::expression_pointer< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__seek_origin = {"_p_kfr__seek_origin", "kfr::seek_origin *|DSP::seek_origin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univector2dT_double_t = {"_p_kfr__univector2dT_double_t", "kfr::univector2d< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_double_t = {"_p_kfr__univectorT_double_t", "kfr::univector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *|i64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sample_rate_conversion_quality = {"_p_sample_rate_conversion_quality", "sample_rate_conversion_quality *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|i16 *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|i8 *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< f64 > *|std::vector< double > *", 0, 0, (void*)&_wrap_class_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *|std::vector< f32 > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< i32 > *|std::vector< int > *", 0, 0, (void*)&_wrap_class_int32_vector, 0};
static swig_type_info _swigt__p_std__vectorT_kfr__biquad_paramsT_double_t_t = {"_p_std__vectorT_kfr__biquad_paramsT_double_t_t", "std::vector< kfr::biquad_params< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_long_t = {"_p_std__vectorT_long_long_t", "std::vector< long long > *|std::vector< i64 > *", 0, 0, (void*)&_wrap_class_int64_vector, 0};
static swig_type_info _swigt__p_std__vectorT_short_t = {"_p_std__vectorT_short_t", "std::vector< short > *|std::vector< i16 > *", 0, 0, (void*)&_wrap_class_int16_vector, 0};
static swig_type_info _swigt__p_std__vectorT_signed_char_t = {"_p_std__vectorT_signed_char_t", "std::vector< signed char > *|std::vector< i8 > *", 0, 0, (void*)&_wrap_class_int8_vector, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< unsigned char > *|std::vector< u8 > *", 0, 0, (void*)&_wrap_class_uint8_vector, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< u32 > *|std::vector< unsigned int > *", 0, 0, (void*)&_wrap_class_uint32_vector, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_t = {"_p_std__vectorT_unsigned_short_t", "std::vector< unsigned short > *|std::vector< u16 > *", 0, 0, (void*)&_wrap_class_uint16_vector, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "u8 *|unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|u32 *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|u16 *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_window_symmetry = {"_p_window_symmetry", "window_symmetry *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_DSP__BandPassFilterT_double_t,
  &_swigt__p_DSP__BesselBandPassFilterT_double_t,
  &_swigt__p_DSP__BesselBandStopFilterT_double_t,
  &_swigt__p_DSP__BesselFilterT_double_t,
  &_swigt__p_DSP__BesselHighPassFilterT_double_t,
  &_swigt__p_DSP__BesselLowPassFilterT_double_t,
  &_swigt__p_DSP__BiQuadParamsT_double_t,
  &_swigt__p_DSP__BiquadT_double_t,
  &_swigt__p_DSP__ButterworthBandPassFilterT_double_t,
  &_swigt__p_DSP__ButterworthBandStopFilterT_double_t,
  &_swigt__p_DSP__ButterworthFilterT_double_t,
  &_swigt__p_DSP__ButterworthHighPassFilterT_double_t,
  &_swigt__p_DSP__ButterworthLowPassFilterT_double_t,
  &_swigt__p_DSP__Chebyshev1BandPassFilterT_double_t,
  &_swigt__p_DSP__Chebyshev1BandStopFilterT_double_t,
  &_swigt__p_DSP__Chebyshev1FilterT_double_t,
  &_swigt__p_DSP__Chebyshev1HighPassFilterT_double_t,
  &_swigt__p_DSP__Chebyshev1LowPassFilterT_double_t,
  &_swigt__p_DSP__Chebyshev2BandPassFilterT_double_t,
  &_swigt__p_DSP__Chebyshev2BandStopFilterT_double_t,
  &_swigt__p_DSP__Chebyshev2FilterT_double_t,
  &_swigt__p_DSP__Chebyshev2HighPassFilterT_double_t,
  &_swigt__p_DSP__Chebyshev2LowPassFilterT_double_t,
  &_swigt__p_DSP__ComplexT_double_t,
  &_swigt__p_DSP__ConvolveFilterT_double_t,
  &_swigt__p_DSP__DCTPlanT_double_t,
  &_swigt__p_DSP__DFTPlanT_double_t,
  &_swigt__p_DSP__DFTRealPlanT_double_t,
  &_swigt__p_DSP__FIRBandpassFilterT_double_t,
  &_swigt__p_DSP__FIRBandstopFilterT_double_t,
  &_swigt__p_DSP__FIRFilterT_double_t,
  &_swigt__p_DSP__FIRHighpassFilterT_double_t,
  &_swigt__p_DSP__FIRLowpassFilterT_double_t,
  &_swigt__p_DSP__FlacReaderT_double_t,
  &_swigt__p_DSP__HighPassFilterT_double_t,
  &_swigt__p_DSP__HighShelfFilterT_double_t,
  &_swigt__p_DSP__LowPassFilterT_double_t,
  &_swigt__p_DSP__LowShelfFilterT_double_t,
  &_swigt__p_DSP__MP3ReaderT_double_t,
  &_swigt__p_DSP__NotchFilterT_double_t,
  &_swigt__p_DSP__PeakFilterT_double_t,
  &_swigt__p_DSP__SampleMatrixT_double_t,
  &_swigt__p_DSP__SampleVectorT_double_t,
  &_swigt__p_DSP__SampleVectorT_kfr__complexT_double_t_t,
  &_swigt__p_DSP__ScalarT_double_t,
  &_swigt__p_DSP__WavReaderT_double_t,
  &_swigt__p_DSP__WavWriterT_double_t,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_kfr__audio_format_and_length,
  &_swigt__p_kfr__audio_reader_flacT_double_t,
  &_swigt__p_kfr__audio_reader_mp3T_double_t,
  &_swigt__p_kfr__audio_writer_wavT_double_t,
  &_swigt__p_kfr__biquad_filterT_double_t,
  &_swigt__p_kfr__biquad_paramsT_double_t,
  &_swigt__p_kfr__complexT_double_t,
  &_swigt__p_kfr__expression_pointerT_double_t,
  &_swigt__p_kfr__seek_origin,
  &_swigt__p_kfr__univector2dT_double_t,
  &_swigt__p_kfr__univectorT_double_t,
  &_swigt__p_long_long,
  &_swigt__p_sample_rate_conversion_quality,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_kfr__biquad_paramsT_double_t_t,
  &_swigt__p_std__vectorT_long_long_t,
  &_swigt__p_std__vectorT_short_t,
  &_swigt__p_std__vectorT_signed_char_t,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_std__vectorT_unsigned_short_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_window_symmetry,
};

static swig_cast_info _swigc__p_DSP__BandPassFilterT_double_t[] = {  {&_swigt__p_DSP__BandPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselBandPassFilterT_double_t[] = {  {&_swigt__p_DSP__BesselBandPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselBandStopFilterT_double_t[] = {  {&_swigt__p_DSP__BesselBandStopFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselFilterT_double_t[] = {  {&_swigt__p_DSP__BesselFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselHighPassFilterT_double_t[] = {  {&_swigt__p_DSP__BesselHighPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselLowPassFilterT_double_t[] = {  {&_swigt__p_DSP__BesselLowPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BiQuadParamsT_double_t[] = {  {&_swigt__p_DSP__BiQuadParamsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BiquadT_double_t[] = {  {&_swigt__p_DSP__BiquadT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthBandPassFilterT_double_t[] = {  {&_swigt__p_DSP__ButterworthBandPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthBandStopFilterT_double_t[] = {  {&_swigt__p_DSP__ButterworthBandStopFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthFilterT_double_t[] = {  {&_swigt__p_DSP__ButterworthFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthHighPassFilterT_double_t[] = {  {&_swigt__p_DSP__ButterworthHighPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthLowPassFilterT_double_t[] = {  {&_swigt__p_DSP__ButterworthLowPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1BandPassFilterT_double_t[] = {  {&_swigt__p_DSP__Chebyshev1BandPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1BandStopFilterT_double_t[] = {  {&_swigt__p_DSP__Chebyshev1BandStopFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1FilterT_double_t[] = {  {&_swigt__p_DSP__Chebyshev1FilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1HighPassFilterT_double_t[] = {  {&_swigt__p_DSP__Chebyshev1HighPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1LowPassFilterT_double_t[] = {  {&_swigt__p_DSP__Chebyshev1LowPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2BandPassFilterT_double_t[] = {  {&_swigt__p_DSP__Chebyshev2BandPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2BandStopFilterT_double_t[] = {  {&_swigt__p_DSP__Chebyshev2BandStopFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2FilterT_double_t[] = {  {&_swigt__p_DSP__Chebyshev2FilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2HighPassFilterT_double_t[] = {  {&_swigt__p_DSP__Chebyshev2HighPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2LowPassFilterT_double_t[] = {  {&_swigt__p_DSP__Chebyshev2LowPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ComplexT_double_t[] = {  {&_swigt__p_DSP__ComplexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ConvolveFilterT_double_t[] = {  {&_swigt__p_DSP__ConvolveFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__DCTPlanT_double_t[] = {  {&_swigt__p_DSP__DCTPlanT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__DFTPlanT_double_t[] = {  {&_swigt__p_DSP__DFTPlanT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__DFTRealPlanT_double_t[] = {  {&_swigt__p_DSP__DFTRealPlanT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRBandpassFilterT_double_t[] = {  {&_swigt__p_DSP__FIRBandpassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRBandstopFilterT_double_t[] = {  {&_swigt__p_DSP__FIRBandstopFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRFilterT_double_t[] = {  {&_swigt__p_DSP__FIRFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRHighpassFilterT_double_t[] = {  {&_swigt__p_DSP__FIRHighpassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRLowpassFilterT_double_t[] = {  {&_swigt__p_DSP__FIRLowpassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FlacReaderT_double_t[] = {  {&_swigt__p_DSP__FlacReaderT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__HighPassFilterT_double_t[] = {  {&_swigt__p_DSP__HighPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__HighShelfFilterT_double_t[] = {  {&_swigt__p_DSP__HighShelfFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__LowPassFilterT_double_t[] = {  {&_swigt__p_DSP__LowPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__LowShelfFilterT_double_t[] = {  {&_swigt__p_DSP__LowShelfFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__MP3ReaderT_double_t[] = {  {&_swigt__p_DSP__MP3ReaderT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__NotchFilterT_double_t[] = {  {&_swigt__p_DSP__NotchFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__PeakFilterT_double_t[] = {  {&_swigt__p_DSP__PeakFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__SampleMatrixT_double_t[] = {  {&_swigt__p_DSP__SampleMatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__SampleVectorT_double_t[] = {  {&_swigt__p_DSP__SampleVectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__SampleVectorT_kfr__complexT_double_t_t[] = {  {&_swigt__p_DSP__SampleVectorT_kfr__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ScalarT_double_t[] = {  {&_swigt__p_DSP__ScalarT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__WavReaderT_double_t[] = {  {&_swigt__p_DSP__WavReaderT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__WavWriterT_double_t[] = {  {&_swigt__p_DSP__WavWriterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_format_and_length[] = {  {&_swigt__p_kfr__audio_format_and_length, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_reader_flacT_double_t[] = {  {&_swigt__p_kfr__audio_reader_flacT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_reader_mp3T_double_t[] = {  {&_swigt__p_kfr__audio_reader_mp3T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_writer_wavT_double_t[] = {  {&_swigt__p_kfr__audio_writer_wavT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__biquad_filterT_double_t[] = {  {&_swigt__p_kfr__biquad_filterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__biquad_paramsT_double_t[] = {  {&_swigt__p_kfr__biquad_paramsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__complexT_double_t[] = {  {&_swigt__p_kfr__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__expression_pointerT_double_t[] = {  {&_swigt__p_kfr__expression_pointerT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__seek_origin[] = {  {&_swigt__p_kfr__seek_origin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univector2dT_double_t[] = {  {&_swigt__p_kfr__univector2dT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_double_t[] = {  {&_swigt__p_kfr__univectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sample_rate_conversion_quality[] = {  {&_swigt__p_sample_rate_conversion_quality, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_kfr__biquad_paramsT_double_t_t[] = {  {&_swigt__p_std__vectorT_kfr__biquad_paramsT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_long_t[] = {  {&_swigt__p_std__vectorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_t[] = {  {&_swigt__p_std__vectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_signed_char_t[] = {  {&_swigt__p_std__vectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_window_symmetry[] = {  {&_swigt__p_window_symmetry, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_DSP__BandPassFilterT_double_t,
  _swigc__p_DSP__BesselBandPassFilterT_double_t,
  _swigc__p_DSP__BesselBandStopFilterT_double_t,
  _swigc__p_DSP__BesselFilterT_double_t,
  _swigc__p_DSP__BesselHighPassFilterT_double_t,
  _swigc__p_DSP__BesselLowPassFilterT_double_t,
  _swigc__p_DSP__BiQuadParamsT_double_t,
  _swigc__p_DSP__BiquadT_double_t,
  _swigc__p_DSP__ButterworthBandPassFilterT_double_t,
  _swigc__p_DSP__ButterworthBandStopFilterT_double_t,
  _swigc__p_DSP__ButterworthFilterT_double_t,
  _swigc__p_DSP__ButterworthHighPassFilterT_double_t,
  _swigc__p_DSP__ButterworthLowPassFilterT_double_t,
  _swigc__p_DSP__Chebyshev1BandPassFilterT_double_t,
  _swigc__p_DSP__Chebyshev1BandStopFilterT_double_t,
  _swigc__p_DSP__Chebyshev1FilterT_double_t,
  _swigc__p_DSP__Chebyshev1HighPassFilterT_double_t,
  _swigc__p_DSP__Chebyshev1LowPassFilterT_double_t,
  _swigc__p_DSP__Chebyshev2BandPassFilterT_double_t,
  _swigc__p_DSP__Chebyshev2BandStopFilterT_double_t,
  _swigc__p_DSP__Chebyshev2FilterT_double_t,
  _swigc__p_DSP__Chebyshev2HighPassFilterT_double_t,
  _swigc__p_DSP__Chebyshev2LowPassFilterT_double_t,
  _swigc__p_DSP__ComplexT_double_t,
  _swigc__p_DSP__ConvolveFilterT_double_t,
  _swigc__p_DSP__DCTPlanT_double_t,
  _swigc__p_DSP__DFTPlanT_double_t,
  _swigc__p_DSP__DFTRealPlanT_double_t,
  _swigc__p_DSP__FIRBandpassFilterT_double_t,
  _swigc__p_DSP__FIRBandstopFilterT_double_t,
  _swigc__p_DSP__FIRFilterT_double_t,
  _swigc__p_DSP__FIRHighpassFilterT_double_t,
  _swigc__p_DSP__FIRLowpassFilterT_double_t,
  _swigc__p_DSP__FlacReaderT_double_t,
  _swigc__p_DSP__HighPassFilterT_double_t,
  _swigc__p_DSP__HighShelfFilterT_double_t,
  _swigc__p_DSP__LowPassFilterT_double_t,
  _swigc__p_DSP__LowShelfFilterT_double_t,
  _swigc__p_DSP__MP3ReaderT_double_t,
  _swigc__p_DSP__NotchFilterT_double_t,
  _swigc__p_DSP__PeakFilterT_double_t,
  _swigc__p_DSP__SampleMatrixT_double_t,
  _swigc__p_DSP__SampleVectorT_double_t,
  _swigc__p_DSP__SampleVectorT_kfr__complexT_double_t_t,
  _swigc__p_DSP__ScalarT_double_t,
  _swigc__p_DSP__WavReaderT_double_t,
  _swigc__p_DSP__WavWriterT_double_t,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_kfr__audio_format_and_length,
  _swigc__p_kfr__audio_reader_flacT_double_t,
  _swigc__p_kfr__audio_reader_mp3T_double_t,
  _swigc__p_kfr__audio_writer_wavT_double_t,
  _swigc__p_kfr__biquad_filterT_double_t,
  _swigc__p_kfr__biquad_paramsT_double_t,
  _swigc__p_kfr__complexT_double_t,
  _swigc__p_kfr__expression_pointerT_double_t,
  _swigc__p_kfr__seek_origin,
  _swigc__p_kfr__univector2dT_double_t,
  _swigc__p_kfr__univectorT_double_t,
  _swigc__p_long_long,
  _swigc__p_sample_rate_conversion_quality,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_kfr__biquad_paramsT_double_t_t,
  _swigc__p_std__vectorT_long_long_t,
  _swigc__p_std__vectorT_short_t,
  _swigc__p_std__vectorT_signed_char_t,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_std__vectorT_unsigned_short_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_window_symmetry,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

